{"data":{"wordpressPost":{"title":"Nondeterministic turing machine simulator in 23 lines of JavaScript","content":"<div id=\"attachment_3052\" style=\"width: 409px\" class=\"wp-caption alignright\"><a href=\"http://swizec.com/blog/wp-content/uploads/2011/11/Screen-Shot-2011-11-23-at-10.10.32-PM.png\"><img class=\"size-full wp-image-3052 \" title=\"The machine I used for testing\" src=\"http://swizec.com/blog/wp-content/uploads/2011/11/Screen-Shot-2011-11-23-at-10.10.32-PM.png\" alt=\"The machine I used for testing\" width=\"399\" height=\"480\" srcset=\"https://swizec.com/blog/wp-content/uploads/2011/11/Screen-Shot-2011-11-23-at-10.10.32-PM.png 570w, https://swizec.com/blog/wp-content/uploads/2011/11/Screen-Shot-2011-11-23-at-10.10.32-PM-249x300.png 249w\" sizes=\"(max-width: 399px) 100vw, 399px\" /></a><p class=\"wp-caption-text\">The machine I used for testing</p></div>\n<p>Felt like doing some coding last night and since my friends were just trolling me about codegolfing a <a class=\"zem_slink\" title=\"Turing machine\" href=\"http://en.wikipedia.org/wiki/Turing_machine\" rel=\"wikipedia\">turing machine simulator</a>(they need it for a term paper), I decided to do just that.</p>\n<p>At first I wanted to make it super simple, 10 <a class=\"zem_slink\" title=\"Source lines of code\" href=\"http://en.wikipedia.org/wiki/Source_lines_of_code\" rel=\"wikipedia\">lines of code</a> max &#8230; and I failed.</p>\n<p>What better way to embrace failure than to implement a simulator of <a class=\"zem_slink\" title=\"Non-deterministic Turing machine\" href=\"http://en.wikipedia.org/wiki/Non-deterministic_Turing_machine\" rel=\"wikipedia\">nondeterministic turing machines</a> in as little lines of code as possible?</p>\n<p>Adding &#8220;eps&#8221; to the alphabet of course &#8211; basically a means for the machine to know when it&#8217;s gone off either end of the tape and that it can also write nothing to the tape. Both very useful features!</p>\n<p>And here&#8217;s the code in all its glory. You can also view it on <a href=\"https://github.com/Swizec/random-coding/blob/master/turing.js\" target=\"_blank\">github</a> if that&#8217;s your thing.</p>\n<pre lang=\"javascript\">// transition format: {from: 'q1', to: 'q2', via: 'A', put: 'B', move: 1/-1}\r\n// spits out whether end state was reached\r\n// basic way to run:  node turing.js machine.json 101 q4\r\n// node turing.js   \r\n\r\nvar _ = require('underscore'), states = {};\r\n\r\nvar delta = function (states, step, end) {\r\n    if (_.keys(step).indexOf(end) &gt;= 0) return true;\r\n    var _step = {}, foo = _.keys(step).map(function (k) {\r\n        var i = step[k][0], t = step[k][1],\r\n            cur = (i &lt; 0 || i &gt;= t.length) ? states[k]['esp'] :  states[k][t[i]];\r\n            if (cur) cur.map(function(cur) {\r\n                if (cur.put != \"eps\") t.splice(i, 1, cur.put);\r\n                _step[cur.to] = [i+cur.move, t];\r\n            });\r\n    });\r\n    return (_.size(_step)) ? delta(states, _step, end) : false;\r\n};\r\n\r\nJSON.parse(require('fs').readFileSync(process.argv[2], 'utf-8')).map(function (i) {\r\n    states[i.from] = states[i.from] || {};\r\n    states[i.from][i.via] = states[i.from][i.via] || [];\r\n    states[i.from][i.via].push(i);\r\n});\r\n\r\nconsole.log(delta(states, {\"q0\": [0, process.argv[3].split(\"\")]}, process.argv[4]));</pre>\n<p>Basically what you&#8217;re doing is performing a <a class=\"zem_slink\" title=\"Breadth-first search\" href=\"http://en.wikipedia.org/wiki/Breadth-first_search\" rel=\"wikipedia\">breadth-first-search</a> on a graph, looking for the end state and a pinch of complications with observing contents the tape as well. You should make sure not to accidentally implement a <a class=\"zem_slink\" title=\"Depth-first search\" href=\"http://en.wikipedia.org/wiki/Depth-first_search\" rel=\"wikipedia\">depth-first search</a> since some branches might never terminate.</p>\n<p>The above implementation could probably be codegolfed some more, but I don&#8217;t like codegolfing by just compating lines beyond what is reasonable. I much prefer doing it with languages features and perhaps algorithmic improvements.</p>\n<p>One of the biggest hindrances to making this much shorter is that a lot of operations on javascript arrays affect state, but don&#8217;t return the new object as well. Lost at least three lines because of this!</p>\n<p>An approach worth trying would be to perform a reduce on the tree of states and if the start and end state ever overlap, you know to return a truthy value, otherwise you go with something falsy. But I wasn&#8217;t sure how to go about that.</p>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles</h6>\n<ul class=\"zemanta-article-ul\">\n<li class=\"zemanta-article-ul-li\"><a href=\"http://xlinux.nist.gov/dads//\">Dictionary of Algorithms and Datastructures</a> (xlinux.nist.gov)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://compassioninpolitics.wordpress.com/2011/09/29/free-will-quantum-theory-and-brain-science/\">Free Will, Quantum Mechanics, and Brain Science: John Polkinghorne Quotes</a> (compassioninpolitics.wordpress.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://rjlipton.wordpress.com/2011/07/28/logic-in-action/\">Logic In Action</a> (rjlipton.wordpress.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://rjlipton.wordpress.com/2011/07/04/getting-on-base-with-pnp/\">Getting On Base With P=NP</a> (rjlipton.wordpress.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://rjlipton.wordpress.com/2011/10/31/an-interview-with-kurt-gdel/\">An Interview With Kurt GÃ¶del</a> (rjlipton.wordpress.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://work.damow.net/random/bf-turing/\">The Brainfu*k Turing Machine (Javascript)</a> (work.damow.net)</li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=c89197ff-e3d0-4791-867f-053288550625\" alt=\"Enhanced by Zemanta\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"d69ef492-57ab-50a0-95e2-868a5949b807"}}