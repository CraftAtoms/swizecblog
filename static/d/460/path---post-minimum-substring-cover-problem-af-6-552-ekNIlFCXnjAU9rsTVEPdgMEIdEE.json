{"data":{"wordpressPost":{"title":"Minimum substring cover problem","content":"<p>A major part of <a href=\"https://github.com/Swizec/Le-Thesis\">my thesis</a>involves finding an algorithm to discover a good substring cover of text in order to properly syllabify said text. But what is the substring cover problem anyway and what does it entail?</p>\n<div style=\"width: 223px\" class=\"wp-caption alignright\"><a href=\"http://www.flickr.com/photos/94416001@N00/11259239\"><img class=\"zemanta-img-inserted zemanta-img-configured\" title=\"algorithms doodle\" src=\"http://swizec.com/blog/wp-content/uploads/2012/01/11259239_fe6b60af02_m5.jpg\" alt=\"algorithms doodle\" width=\"213\" height=\"240\" /></a><p class=\"wp-caption-text\">Image by Shreyans Bhansali via Flickr</p></div>\n<p><a href=\"http://cs.haifa.ac.il/~dhermeli/Publications/WAOA2007.pdf\" target=\"_blank\">The Minimum Substring Cover Problem</a> paper from Hermelin, Rawitz, Rizzi and Vialette dating back to 2007 (judging by the filename) serves as a good entry point into this topic.</p>\n<p>There are actually a lot of cover problems, the most famous being Minimum <a class=\"zem_slink\" title=\"Set cover problem\" href=\"http://en.wikipedia.org/wiki/Set_cover_problem\" rel=\"wikipedia\">Set Cover</a> and <a class=\"zem_slink\" title=\"Vertex cover\" href=\"http://en.wikipedia.org/wiki/Vertex_cover\" rel=\"wikipedia\">Minimum Vertex Cover</a> problems. In this type of problems we are faced with two sets of elements and we want to cover one of the sets with another, by using the &#8220;least&#8221; elements from the covering set. I put &#8220;least&#8221; in quotes because the definition depends on what we want &#8211; maybe we want to use the least number of elements, perhaps we want the shortest elements &#8230; whatever.</p>\n<p>For an example consider this:</p>\n<pre>S = ['a', 'aab', 'aba']\r\nC(S) = ['a', 'b', 'aa', 'ab', 'ba', 'aab', 'aba']</pre>\n<p>We can easily see that <em>C(S)</em> is a set of all the possible coverings of S &#8211; using a combination of strings from C we can construct every string in S. This part isn&#8217;t very difficult to calculate.</p>\n<p>Everything gets slightly hairier when you look for minimum covers:</p>\n<pre>C_1 = ['a', 'b']  # 3-cover (need 3 strings to cover the longest string in S)\r\nC_2 = ['a', 'ab'] # 2-cover (need 2 strings to cover the longest string in S)</pre>\n<p>Depending on how you choose the weight, both C_1 and C_2 are <em>minimum substring covers</em> of S. Considering &#8220;least&#8221; to mean <em> least amount of strings</em> then both are of weight 2, but if you consider &#8220;least&#8221; to mean <em>the total length of strings</em> then C_1 is better.</p>\n<p>You could easily argue C_2 is better, because it uses the least amount of elements to cover the whole set S. 1+3+3 = 7 for C_1 and 1+2+2 = 5 for C_2.</p>\n<p>Ok, so now we know that finding the minimum substring cover of a set of strings depends a whole lot on what you actually want. Always a good sign, having a well-known problem where people can&#8217;t even agree on what the best solution looks like.</p>\n<p>The paper goes on to explain in great theoretical detail that, because this problem is similar to minimum vertex cover, minimum set cover and similar problems, it is <a class=\"zem_slink\" title=\"NP-hard\" href=\"http://en.wikipedia.org/wiki/NP-hard\" rel=\"wikipedia\">NP-hard</a> to approximate. This means that the problem is at least as hard as the hardest problems in NP, but it doesn&#8217;t necessarily mean that there is no polynomial solution &#8211; it just hasn&#8217;t been found yet.</p>\n<p>Luckily, if we constrain some parameters of the problem, it becomes/remains <a class=\"zem_slink\" title=\"APX\" href=\"http://en.wikipedia.org/wiki/APX\" rel=\"wikipedia\">APX-hard</a> &#8211; <em>problems in this class have efficient algorithms that can find an answer within some fixed percentage of the optimal answer. </em></p>\n<p>The article then proposes two <a class=\"zem_slink\" title=\"Approximation algorithm\" href=\"http://en.wikipedia.org/wiki/Approximation_algorithm\" rel=\"wikipedia\">approximation algorithms</a> for finding minimum substring covers of S.</p>\n<h2>Local-Ratio Algorithms</h2>\n<p>This algorithm follows from the local-ratio lemma, which in the case of substring cover means</p>\n<blockquote><p>Let C be a cover for S, and let w_1 and w_2 be weight functions for C(S). If C is an alpha-approximate, both with respect to w_1 and with respect to w_2, then C is also alpha-approximate with respect to w_1+w_2.</p></blockquote>\n<pre lang=\"pseudocode\">Data: A set of strings S, a weight function w:C(S) -&gt; Q+, an integer l &gt;= 2\r\nResult: An l-cover C for S (l is the number of substrings covering the longest s in S)\r\nbegin\r\n\r\nC</pre>\n<p>This algorithm is guaranteed to terminate after a polynomial amount of recursive calls and it returns a (((m+1) binomial 2) &#8211; 1)-approximate l-cover of S.</p>\n<p>In sensible terms the algorithm basically does this: Add everything with zero weight to a partial solution, if this isn&#8217;t the solution, it selects an uncovered substring in S and tries to cover it by examining all substrings in C_s.</p>\n<h2><a class=\"zem_slink\" title=\"Linear programming\" href=\"http://en.wikipedia.org/wiki/Linear_programming\" rel=\"wikipedia\">Linear Programming</a> Rounding</h2>\n<p>Originally the linear programming rounding algorithm was developed by Hajiaghayi et all. for the Minimum Multicolored Subgraph problem when l=2. It has now been expanded for any constant value of l.</p>\n<p>This section is extremely light on practical results and just shows a bunch of mathematics that supposedly prove how the algorithm can be extended and that the final result is an O(log^(1/l) n * m^((l/1)^2/l))-approximate algorithm.</p>\n<p>From what I can understand this algorithm approaches the problem with the idea that they are basically looking for l-factorizations of strings.</p>\n<p>According to this section, the minimum substring cover can be formulated using the following integer linear program:</p>\n<pre>min    SUM_(c in C(s)) w(c)x_c\r\ns.t.   SUM_(f in F_l(s)) y_f &gt;= 1          every s in S\r\n       SUM_(c in f in F_l(s)) y_f</pre>\n<p>Then there are a bunch of proofs that this algorithm works and is indeed very awesome &#8230; but by this time my eyes started glazing over and the September deadline for my thesis started looking <em>very</em> near.</p>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles</h6>\n<ul class=\"zemanta-article-ul\">\n<li class=\"zemanta-article-ul-li\"><a href=\"http://stackoverflow.com/questions/7467186/apply-substring-on-values-in-linq\">Apply substring on values in LINQ</a> (stackoverflow.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://stackoverflow.com/questions/8046107/objective-c-substring-range-exception\">Objective-c Substring Range Exception</a> (stackoverflow.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://stackoverflow.com/questions/7904270/substr-and-explode-in-javascript\">Substr and explode in JavaScript</a> (stackoverflow.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://spokutta.wordpress.com/2012/01/05/1311/\">On linear programming formulations for the TSP polytope</a> (spokutta.wordpress.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://ntz-develop.blogspot.com/2011/03/fuzzy-string-search.html\">Fuzzy string search</a> (ntz-develop.blogspot.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://11011110.livejournal.com/238766.html\">Top ten algorithms preprints of 2011</a> (11011110.livejournal.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://stackoverflow.com/questions/8456010/efficiently-replace-a-fixed-position-substring-with-a-string-of-equal-or-larger\">Efficiently replace a fixed position substring with a string of equal or larger length</a> (stackoverflow.com)</li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=a0995159-d508-465f-9dd9-b53632d16b06\" alt=\"Enhanced by Zemanta\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"728f2283-5a60-5e3c-a47c-e22dd0a4060f"}}