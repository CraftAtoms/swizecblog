{"data":{"wordpressPost":{"title":"Using prime numbers to generate pretty trees","content":"<p>Have you ever tried to generate a natural-ish looking tree? I did it for a coursework assignment and turns out it&#8217;s both incredibly simple while being full of strange little twists.</p>\n<p>&nbsp;</p>\n<div style=\"width: 261px\" class=\"wp-caption alignright\"><img class=\" \" src=\"http://i.imgur.com/Onf49.png\" alt=\"\" width=\"251\" height=\"343\" /><p class=\"wp-caption-text\">The resulting pretty tree</p></div>\n<p>Generally the assignment was about manipulating 3D objects in <a class=\"zem_slink\" title=\"OpenGL\" rel=\"homepage\" href=\"http://www.opengl.org/\">OpenGL</a> through user action. Otherwise known as: make a game, if it isn&#8217;t a game, you&#8217;re likely doing it wrong.</p>\n<p>&nbsp;</p>\n<p>Since we had the whole semester to work on it, I spent nearly all of it on a little piece of the whole puzzle that seemed the most interesting &#8211; Generating <a class=\"zem_slink\" title=\"Tree\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Tree\">trees</a>.</p>\n<p>Of course me and my partner both being avid dislikers of <a class=\"zem_slink\" title=\"Java (programming language)\" rel=\"homepage\" href=\"http://www.oracle.com/technetwork/java/\">Java</a> and Java sort of being what the class is taught in &#8230; well we decided both to pick our favourite dialect of a <a class=\"zem_slink\" title=\"Functional programming\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Functional_programming\">functional language</a> running on a <a class=\"zem_slink\" title=\"Java Virtual Machine\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Java_Virtual_Machine\">JVM</a>.</p>\n<p>Scala and <a class=\"zem_slink\" title=\"Clojure\" rel=\"homepage\" href=\"http://clojure.org\">Clojure</a>.</p>\n<p>Fun ensued, but we actually <em>did</em> get it working and now half the project is in one language, half is in another and neither of us can read the other&#8217;s code.</p>\n<p>While <a href=\"http://twitter.com/hairyfotr\">@hairyfotr </a>took care of pretty much anything, I took it upon myself to generate the data for having pretty trees that are a bit random, but always manage to look like a beautiful beautiful tree.</p>\n<p>A night of hacking or three later, we had this:</p>\n<div style=\"width: 490px\" class=\"wp-caption alignnone\"><img class=\" \" title=\"Not a tree isn't a treet\" src=\"http://i.imgur.com/KlUXU.png\" alt=\"\" width=\"480\" height=\"373\" /><p class=\"wp-caption-text\">Not _exactly_ a tree</p></div>\n<p>As you can see, it wasn&#8217;t so much a tree as a bunch of weird random looking lines without any sort of order to them.</p>\n<p>Turns out not only was I calculating the tree all wrong and possibly even providing the incorrect data structure, @hairyfotr wasn&#8217;t very adept at drawing what I did manage to generate either.</p>\n<p>But eventually after quite a bit of hacking, it got better. I learned a lot about <a class=\"zem_slink\" title=\"Linear algebra\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Linear_algebra\">linear algebra</a> and not being an idiot, @hairyfotr learned how to traverse a <a class=\"zem_slink\" title=\"Tree (data structure)\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Tree_%28data_structure%29\">tree data structure</a>. In the end, everyone is happier and this is what the final trees look like &#8230; I reckon they&#8217;re pretty damn shiny.</p>\n<p style=\"text-align: center;\"><img class=\"aligncenter\" title=\"Tree\" src=\"http://i.imgur.com/NlQkb.png\" alt=\"\" width=\"366\" height=\"291\" /><img class=\"alignnone\" title=\"Tree\" src=\"http://i.imgur.com/VFX7p.png\" alt=\"\" width=\"453\" height=\"610\" /><img class=\"alignnone\" title=\"Tree\" src=\"http://i.imgur.com/avoQP.png\" alt=\"\" width=\"354\" height=\"492\" /><img class=\"alignnone\" title=\"Tree\" src=\"http://i.imgur.com/Onf49.png\" alt=\"\" width=\"419\" height=\"571\" /><img class=\"alignnone\" title=\"Tree\" src=\"http://i.imgur.com/csDVD.png\" alt=\"\" width=\"429\" height=\"557\" /></p>\n<h2>The generator</h2>\n<p>In general the idea on how to generate trees is pretty simple. You take a vector representing the direction of a branch and its length. Then you move to the end of the branch, make N new directional vectors and give them a length. Then you simply repeat the process on every branch.</p>\n<p>Simple right?</p>\n<p>PS: lest your eyes glaze over, there&#8217;s a sketch explaining all of this at the bottom</p>\n<p>It is. But it gets a bit complicated when you want this bunch of vectors to actually resemble something. The first concern is spacing child branches out evenly. You can think of this as a problem of evenly dividing a half sphere into N chunks.</p>\n<p>My first approach to this failed spectacularly. I tried to take the current branch as a normal to a plane, then drawing a vector between the end of the current branch and the made up point. This would give me a <a class=\"zem_slink\" title=\"Surface normal\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Surface_normal\">perpendicular vector</a> to the original branch. Then all you need to do is rotate this perpendicular vector around X times, using the original branch as the <a class=\"zem_slink\" title=\"Rotation\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Rotation\">rotation axis</a>.</p>\n<p>This gives you an evenly sliced plane perched on top of the current branch. Then all you have to do is slant each new branch upwards by a certain angle and you&#8217;re done. Since upwards can mean anything, you take it to mean the direction the original branch was pointing in.</p>\n<p>Turns out this approach is brilliant, except for that calculating a plane and points and such. That is just way too concrete and not abstract enough. It doesn&#8217;t really work &#8230; to make it work you&#8217;d need data outside of the &#8220;direction of current branch&#8221; scope.</p>\n<p>So what you do instead is this: take the current branch and <em>make up</em> a vector. It doesn&#8217;t really matter what it is, as long as it&#8217;s different from the branch. Then you calculate the cross product between the branch and the made up vector and voila. You have your first perpendicular child branch.</p>\n<p>Then you just do the whole rotation bit.</p>\n<p>This approach works surprisingly well. But it only ever gives you one tree and that doesn&#8217;t do.</p>\n<p>So in order to get random trees that still look like trees I made use of a very simple trick. When choosing the angle by which to turn a branch upwards, just make the angle be chosen by some sort of weighted random choice. A bit of twiddling around and everything was nice and shiny. When everything conspires just right, you even get those long branches with others splitting off of them &#8230; even though the tree itself thinks on every level all the branches split.</p>\n<p>It&#8217;s just bloody elegant I tell you!</p>\n<p>And when doing the rotations around the original branch I add a little noise to the angles, just a few degrees so the spacing isn&#8217;t always perfectly even.</p>\n<p>But, here comes the real beauty. When choosing how many new branches to create on every level, I just follow the progression of prime numbers. So, on the first level there are two branches, then three, then five and so on.</p>\n<p>I use a similar progression for calculating the length of every next branch. There it&#8217;s actually 1-0.prime. It works marvelously.</p>\n<p>But this is quite a bit of text that probably doesn&#8217;t make any sense to anyone. So here&#8217;s a quick whiteboard sketch of what&#8217;s going on:</p>\n<p>&nbsp;</p>\n<div style=\"width: 691px\" class=\"wp-caption alignnone\"><img class=\" \" title=\"Sketch\" src=\"http://i.imgur.com/83sOz.jpg\" alt=\"\" width=\"681\" height=\"440\" /><p class=\"wp-caption-text\">Excuse my sucky perspective drawing</p></div>\n<p>Next step in making it even awesomer is probably applying some randomness to branch lengths.</p>\n<p>&nbsp;</p>\n<p>You can also see the source for this <a href=\"https://github.com/HairyFotr/AngryPigs/blob/master/src/AngryPigs/gen-tree.clj\" target=\"_blank\">on github</a>.</p>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=666832dc-2563-4672-abbb-3ea6296b7ba1\" alt=\"Enhanced by Zemanta\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"4a6aeb50-cdc6-5e51-aa2e-a5c0548af01a"}}