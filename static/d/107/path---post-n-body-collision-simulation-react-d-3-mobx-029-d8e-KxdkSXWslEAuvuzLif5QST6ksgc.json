{"data":{"wordpressPost":{"title":"N-body Collision Simulation with React, D3, and MobX","content":"<p><iframe width=\"853\" height=\"480\" src=\"https://www.youtube.com/embed/H84fmXjTElM\" frameborder=\"0\" allowfullscreen></iframe></p>\n<p>Collision detection is one of those problems that&#39;s easy in theory but hard in practice. Even between ideal circles.</p>\n<p>All you have to do is:</p>\n<ol>\n<li>For every item, find all items with which it intersects</li>\n<li>Change its movement vector so it reacts to the collision</li>\n<li>Potentially change vectors of other items involved in collision</li>\n</ol>\n<p>This is called <a href=\"https://en.wikipedia.org/wiki/Collision_detection#A_posteriori_.28discrete.29_versus_a_priori_.28continuous.29\">a posteriori collision detection</a>. It detects collisions <em>after</em> they happen and corrects in the next animation frame. If items move very fast, they can pass through each other.</p>\n<p>Another approach is called a priori collision detection. That predicts collisions <em>before</em> they happen. It&#39;s more correct, but it’s hard to implement because predicting when two items will collide is, in theory, an algorithm with infinite steps. Wikipedia says the problem doesn&#39;t have a <a href=\"https://en.wikipedia.org/wiki/Closed-form_expression\">closed-form solution</a>.</p>\n<p>As per this <a href=\"https://wwwx.cs.unc.edu/~geom/papers/documents/dissertations/lin93.pdf\">159 page thesis on collision detection</a>, collision detection is important.</p>\n<blockquote><p>\nThe problem of collision detection or contact determination between two or more objects is fundamental to computer animation, physical-based modeling, molecular modeling, computer simulated environments (e.g. virtual environments) and robot motion planning as well. (Depending on the content of applications, it is also called with many different names, such as interference detection, clash detection, intersection tests, etc.)\n</p></blockquote>\n<p>Indeed. It&#39;s also fun to build. You can play with the final solution in this <a href=\"https://swizec.github.io/declarative-canvas-react-konva/\">live example</a>.</p>\n<p>Here is my first attempt ?</p>\n<img class=\"alignnone size-full wp-image-7496\" src=\"https://swizec.com/blog/wp-content/uploads/2017/03/base-collision.gif\" width=\"616\" height=\"589\" />\n<p>? Hmmmm… the two marbles do bounce off each other, but that&#39;s not quite right. They come too close together before bouncing.</p>\n<p>On my second attempt, I used <a href=\"https://github.com/d3/d3-quadtree\">D3v4&#39;s quadtree</a> to detect the collision. Quadtrees subdivide a space based on a list of coordinates. In my case, it’s a list of marbles. You can then perform fast lookups for <em>&quot;Which items are within radius R of coordinates (x, y)?”</em>.</p>\n<p>With some finagling, we can use a quadtree to reduce our n-body collision problem to a series of 2-body collision problems. Each item collides only with its nearest neighbor.</p>\n<img class=\"alignnone size-full wp-image-7491\" src=\"https://swizec.com/blog/wp-content/uploads/2017/03/quadtree-collision.gif\" width=\"616\" height=\"589\" />\n<p>Better. Mr. Quadtree catches the collision when it happens and both marbles bounce off. After the collision, they travel in the opposite direction of where they were going before.</p>\n<p>But a collision should deflect marbles, not just bounce them. So I used a <a href=\"https://en.wikipedia.org/wiki/Dot_product\">dot product</a> to calculate new vectors. Thanks to <a href=\"https://twitter.com/air_hadoken/status/837363064005623810\">@air_hadoken</a> for showing me some of his old code. It helped a lot ^_^</p>\n<img class=\"alignnone size-full wp-image-7490\" src=\"https://swizec.com/blog/wp-content/uploads/2017/03/dotproduct-collision.gif\" width=\"616\" height=\"589\" />\n<p>Marvelous! Direction vectors get deflected, marbles bounce off each other, and something is still wrong. My collision correction algorithm doesn&#39;t account for mass.</p>\n<p>Real marbles have mass. To make life easier, I decided all marbles should have the same mass. This means each marble involved in a collision gets half the combined speed involved in the impact.</p>\n<img class=\"alignnone size-full wp-image-7492\" src=\"https://swizec.com/blog/wp-content/uploads/2017/03/mass-collision.gif\" width=\"699\" height=\"647\" />\n<p>?… hmmm… I don&#39;t think marbles are that sticky.</p>\n<p>I started tweaking parameters, changing coefficients, and tweaking multipliers. I came up with this:</p>\n<blockquote class=\"twitter-tweet\" data-width=\"550\">\n<p lang=\"en\" dir=\"ltr\">This is how physics works, right? <a href=\"https://t.co/rAjq8jx2Ys\">pic.twitter.com/rAjq8jx2Ys</a></p>\n<p>&mdash; Swizec (@Swizec) <a href=\"https://twitter.com/Swizec/status/841529688002449409\">March 14, 2017</a></p></blockquote>\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n<p>Click play. A gif wouldn&#39;t do it justice.</p>\n<p>Turns out, speed is definitely not additive. That looks more like a fission simulation at the atom level than a simulation of marbles hitting each other. ?</p>\n<p>After some more tweaking, I think I got it:</p>\n<img class=\"alignnone size-full wp-image-7494\" src=\"https://swizec.com/blog/wp-content/uploads/2017/03/better-collisions.gif\" width=\"958\" height=\"773\" />\n<p><em>In general</em>, marbles bounce off each other, have their vectors deflected, slow down due to friction, and share mass in a collision. I don&#39;t know if it&#39;s a physically correct simulation, but it looks good enough to me.</p>\n<p>Some marbles still stick.</p>\n<h2>Why some marbles still stick together</h2>\n<p>Marbles sticking together can happen due to one of three reasons:</p>\n<ol>\n<li>User overlaid marbles manually</li>\n<li>A marble <em>actually</em> collides with multiple marbles within the same 16ms frame. Only one of the collisions is detected</li>\n<li>A fast marble hits a small marble in such a way that their cumulative speed doesn&#39;t produce escape velocity</li>\n</ol>\n<p>The 1st case often goes away when you release the mouse. Sometimes it does not, depending on angle of approach.</p>\n<p>The 2nd case is unsolvable when using quadtrees for collision detection.</p>\n<p>The 3rd case can be solved by applying the collision step until all collisions are resolved. This <em>might</em> help with the 2nd case too ?</p>\n<img class=\"alignnone size-full wp-image-7495\" src=\"https://swizec.com/blog/wp-content/uploads/2017/03/iterative-application.gif\" width=\"958\" height=\"773\" />\n<p>Well… there&#39;s no stickiness… but no.</p>\n<hr />\n<h2>Here&#39;s how it works</h2>\n<p>The marbles are rendered on <code>&lt;canvas&gt;</code> using a combination of React, react-konva, and Konva. Each is rendered declaratively from an array of <code>(x, y)</code> positions that change with each step of the simulation.</p>\n<p>You can read about the rendering part in my <a href=\"https://swizec.com/blog/declarative-canvas-animation-react-konva/swizec/7443\">Declarative canvas with React and Konva</a> article.</p>\n<p>Since then, I have moved all logic into a MobX store called <code>Physics</code>. You can see the <a href=\"https://github.com/Swizec/declarative-canvas-react-konva\">full code on Github</a>. The interesting bits for collision detection are in the <a href=\"https://github.com/Swizec/declarative-canvas-react-konva/tree/master/src/logic\">src/logic</a> directory.</p>\n<p>Our general approach goes like this:</p>\n<ol>\n<li>Have an observable array of marbles</li>\n<li>Run a <code>simulationStep</code> on each <code>requesAnimationFrame</code> using <code>d3.timer</code></li>\n<li>Change marble positions and speed</li>\n<li>MobX observables and observers trigger re-renders of marbles that move</li>\n</ol>\n<p>The <a href=\"https://github.com/Swizec/declarative-canvas-react-konva/blob/master/src/logic/Physics.js\"><code>Physics.js</code></a> file is 160 lines, so let me show you just the interesting part: <code>@action simulationStep</code>. It handles collision detection and the aftermath of each collision.</p>\n<h2>simulationStep –&nbsp;where collisions collision</h2>\n<pre lang=\"javascript\">\n\n@action simulationStep() {\n    const { width, height, MarbleR } = this;\n\n    const moveMarble = ({x, y, vx, vy, id}) => {\n        let _vx = ((x+vx < MarbleR) ? -vx : (x+vx > width-MarbleR) ? -vx : vx)*.99,\n            _vy = ((y+vy < MarbleR) ? -vy : (y+vy > height-MarbleR) ? -vy : vy)*.99;\n\n        // nearest marble is a collision candidate\n        const subdividedSpace = quadtree().extent([[-1, -1],\n                                                   [this.width+1, this.height+1]])\n                                          .x(d => d.x)\n                                          .y(d => d.y)\n                                          .addAll(this.marbles\n                                                      .filter(m => id !== m.id)),\n              candidate = subdividedSpace.find(x, y, MarbleR*2);\n\n        if (candidate) {\n\n            // borrowing @air_hadoken's implementation from here:\n            // https://github.com/airhadoken/game_of_circles/blob/master/circles.js#L64\n            const cx = candidate.x,\n                  cy = candidate.y,\n                  normx = cx - x,\n                  normy = cy - y,\n                  dist = (normx ** 2 + normy ** 2),\n                  c = (_vx * normx + _vy * normy) / dist * 2.3;\n\n            _vx = (_vx - c * normx)/2.3;\n            _vy = (_vy - c * normy)/2.3;\n\n            candidate.vx += -_vx;\n            candidate.vy += -_vy;\n            candidate.x += -_vx;\n            candidate.y += -_vy;\n        }\n\n        return {\n            x: x + _vx,\n            y: y + _vy,\n            vx: _vx,\n            vy: _vy\n        }\n    };\n\n    this.marbles.forEach((marble, i) => {\n        const { x, y, vx, vy } = moveMarble(marble);\n\n        this.marbles[i].x = x;\n        this.marbles[i].y = y;\n        this.marbles[i].vx = vx;\n        this.marbles[i].vy = vy;\n    });\n}\n</pre>\n<p>That&#39;s a lot of code ?. Let&#39;s break it down.</p>\n<p>You can think of it as a function and a loop. At the bottom, there is a <code>.forEach</code> that applies a <code>moveMarble</code> function to each marble.</p>\n<pre lang=\"javascript\">\n    this.marbles.forEach((marble, i) => {\n        const { x, y, vx, vy } = moveMarble(marble);\n\n        this.marbles[i].x = x;\n        this.marbles[i].y = y;\n        this.marbles[i].vx = vx;\n        this.marbles[i].vy = vy;\n    });\n</pre>\n<p>We iterate over the list of marbles, feed them into <code>moveMarble</code>, get their new properties, and save them in the main marbles array. This might be unnecessary because of MobX. We <em>should</em> be able to change them inside the loop and rely on MobX observables to do the heavy lifting.</p>\n<p>I wonder why I did it like this ? Maybe a leftover from before MobX?</p>\n<h3>moveMarble</h3>\n<p><code>moveMarble</code> is itself a hairy function. Things happen in 3 steps:</p>\n<ol>\n<li>Handle collisions with walls</li>\n<li>Find collision with closest other marble</li>\n<li>Handle collision with marble</li>\n</ol>\n<p><strong>Handling collisions with walls happens</strong> in two lines of code. One per coordinate.</p>\n<pre lang=\"javascript\">\nlet _vx = ((x+vx < MarbleR) ? -vx : (x+vx > width-MarbleR) ? -vx : vx)*.99,\n    _vy = ((y+vy < MarbleR) ? -vy : (y+vy > height-MarbleR) ? -vy : vy)*.99;\n</pre>\n<p>Nested ternary expressions are kinda messy, but they’re good enough. If a marble is beyond any boundary, we reverse its direction. We <em>always</em> apply a <code>.99</code> friction coefficient so that marbles slow down.</p>\n<p><strong>Finding collisions</strong> with the next closest marble happens via a quadtree. Since we don&#39;t have too many marbles, we can afford to build a new quadtree from scratch every time.</p>\n<pre lang=\"javascript\">\n// nearest marble is a collision candidate\nconst subdividedSpace = quadtree().extent([[-1, -1],\n                                           [this.width+1, this.height+1]])\n                                  .x(d => d.x)\n                                  .y(d => d.y)\n                                  .addAll(this.marbles\n                                              .filter(m => id !== m.id)),\n      candidate = subdividedSpace.find(x, y, MarbleR*2);\n</pre>\n<p>We&#39;re using <a href=\"https://github.com/d3/d3-quadtree\"><code>d3-quadtree</code></a> for the quadtree implementation. It takes an <code>extent</code>, which tells it how big our space is. It uses <code>x</code> and <code>y</code> accessors to get coordinates out of our marble objects, and we use <code>addAll</code> to fill it with marbles.</p>\n<p>To avoid detecting each marble as colliding with itself, we take each marble out of our list before feeding the quadtree.</p>\n<p>Once we have a quadtree built out, we use <code>.find</code> to look for the nearest marble within <code>MarbleR*2</code> of the current marble. Which is exactly the one we&#39;re colliding with! 🙂</p>\n<p><strong>Handling collisions with marbles</strong> involves math. It’s the sort of thing you think you remember from high school and then suddenly realize you don&#39;t when the time comes to use it.</p>\n<p>The code looks like this:</p>\n<pre lang=\"javascript\">\nif (candidate) {\n\n    // borrowing @air_hadoken's implementation from here:\n    // https://github.com/airhadoken/game_of_circles/blob/master/circles.js#L64\n    const cx = candidate.x,\n          cy = candidate.y,\n          normx = cx - x,\n          normy = cy - y,\n          dist = (normx ** 2 + normy ** 2),\n          c = (_vx * normx + _vy * normy) / dist * 2.3;\n\n    _vx = (_vx - c * normx)/2.3;\n    _vy = (_vy - c * normy)/2.3;\n\n    candidate.vx += -_vx;\n    candidate.vy += -_vy;\n    candidate.x += -_vx;\n    candidate.y += -_vy;\n}\n\nreturn {\n    x: x + _vx,\n    y: y + _vy,\n    vx: _vx,\n    vy: _vy\n}\n</pre>\n<p>Ok, the <code>return</code> statement isn&#39;t about handling collisions. It updates the current marble.</p>\n<p>The rest kind of looks like magic. I implemented it and it looks like magic and I feel like I don&#39;t <em>really</em> understand it.</p>\n<p>You can think of <code>[normx, normy]</code> as a vector that points from current marble to collision candidate. It gives us bounce direction. We use the <a href=\"https://en.wikipedia.org/wiki/Euclidean_distance\">euclidean distance</a> formula to calculate the length of this vector. It measures the distance between the centers of both marbles.</p>\n<p>Then we calculate the <a href=\"https://en.wikipedia.org/wiki/Dot_product\">dot product</a> between our marble&#39;s speed vector and the collision direction vector. We normalize it by distance. Multiplying distance by <code>2</code> accounts for there being two marbles in the collision. That extra <code>.3</code> made the simulation look better.</p>\n<p>I fiddled with it 🙂</p>\n<p>Then we use the dot product scalar to adjust the marble&#39;s speed vector. Dividing by <code>2</code> takes into account that half the energy goes to the other marble. This is only true because we assume their masses are equal.</p>\n<p>Finally, we update the <code>candidate</code> marble and make sure it bounces off as well. We do it additively because that&#39;s how it happens in real life.</p>\n<p>Two marbles traveling towards each other in exactly opposite directions with exactly the same speed will stop dead and stay there. As soon as there&#39;s any misalignment, deflection happens. If one is stationary, it starts moving. If it&#39;s moving in the same direction, it speeds up… etc.</p>\n<p>The end result is a decent-looking simulation of billiards.</p>\n<a href=\"https://swizec.github.io/declarative-canvas-react-konva/\"><img class=\"alignnone size-full wp-image-7493\" src=\"https://swizec.com/blog/wp-content/uploads/2017/03/better-collisions-1.gif\" width=\"958\" height=\"773\" /></a>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"ba473e22-6cd6-5926-8496-b7be78c27508"}}