{"data":{"wordpressPost":{"title":"Livecoding Recap #45: Almost building a ballistic missile with React and AR.js","content":"<p><em>This is a Livecoding Recap ‚Äì an almost-weekly post about interesting things discovered while livecoding. Usually shorter than 500 words. Often with pictures. Livecoding happens almost <strong>every Sunday at 2pm PDT</strong> on multiple channels. You should follow <a href=\"https://www.youtube.com/TheSwizec\">My Youtube</a> channel to catch me live.</em></p>\n<p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/39jb-y85YBo\" frameborder=\"0\" allowfullscreen></iframe></p>\n<p>This Sunday we had 3 jobs:</p>\n<ol>\n<li>Get the AR Minecraft guy working ‚úÖ</li>\n<li>Use a hand drawn custom marker ‚ùå</li>\n<li>Fire an AR ballistic missile from Korea ‚úÖ‚ùå</li>\n</ol>\n<p>But AR is hard.</p>\n<blockquote class=\"twitter-tweet\" data-width=\"550\">\n<p lang=\"en\" dir=\"ltr\">AR is hard <a href=\"https://t.co/SDwTMPjxJw\">pic.twitter.com/SDwTMPjxJw</a></p>\n<p>&mdash; Swizec (@Swizec) <a href=\"https://twitter.com/Swizec/status/904492731086528512\">September 3, 2017</a></p></blockquote>\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n<p>We got pretty close, just like I suggested in <a href=\"https://swizec.com/blog/livecoding-recap-44-dipping-toes-arjs/swizec/7759\">last week&#8217;s Livecoding Recap</a> the Minecraft guy just needed some textures. After we added those, he became visible and looked great.</p>\n<p>Here he is next to Kiwi.</p>\n<img src=\"https://swizec.com/blog/wp-content/uploads/2017/09/ar-stuff-1024x576.jpg\" alt=\"\" class=\"aligncenter size-large wp-image-7774\" srcset=\"https://swizec.com/blog/wp-content/uploads/2017/09/ar-stuff-1024x576.jpg 1024w, https://swizec.com/blog/wp-content/uploads/2017/09/ar-stuff-300x169.jpg 300w, https://swizec.com/blog/wp-content/uploads/2017/09/ar-stuff-768x432.jpg 768w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" />\n<p>To get that working we learned about <a href=\"https://A-FRAME.io/docs/0.6.0/core/component.html#schema\">A-FRAME Schemas</a>. They&#8217;re a way to describe the properties that an A-FRAME component can accept. A lot like React&#8217;s propTypes, but as an object.</p>\n<p>The <code>minecraft</code> component comes from <code>A-FRAME-minecraft.js</code>, which we copied off examples in <a href=\"https://github.com/jeromeetienne/AR.js\">Jerome Etiennes AR.js repo</a>. That looks like this:</p>\n<pre lang=\"javascript\">FRAME.registerComponent('minecraft', {\n    schema: {\n        skinUrl: {\n            type: 'string',\n            default : ''\n        },\n        wellKnownSkin: {\n            type: 'string',\n            default : ''\n        },\n        heightMeter : {\n            default : 1\n        }\n    },\n    init: function () {\n        var character   = new THREEx.MinecraftChar()\n        this.character = character\n\n        this.el.object3D.add( character.root )\n        // this.el.setObject3D('superRoot', character.root);\n    },\n    update: function () {\n                if( Object.keys(this.data).length === 0 )       return\n        var character = this.character\n        character.root.scale.set(1,1,1).multiplyScalar(this.data.heightMeter)\n\n        if( this.data.skinUrl ){\n            character.loadSkin(this.data.skinUrl)\n        }else if( this.data.wellKnownSkin ){\n            character.loadWellKnownSkin(this.data.wellKnownSkin)\n        }\n    },\n});\n</pre>\n<p>I have no idea which component system this is modeled after, but it works. Looks like we can define minecraft guy&#8217;s height in meters, a URL for the skin texture, and choose one of well known skins. Those won&#8217;t work in our project because we don&#8217;t have the files.</p>\n<p>Schema props are passed into A-FRAME components as a string. Like this:</p>\n<pre lang=\"javascript\"><Entity minecraft={`heightMeter: 2; skinUrl: ${skinUrl}`}\n                                minecraft-head-anim=\"yes\"\n                                minecraft-body-anim=\"hiwave\" />\n</pre>\n<p>You can read that as *&#8221;Create an A-FRAME Entity composed out of <code>minecraft</code> with <code>heightMeter: 2; skinUrl: <url></code>, and <code>minecraft-head-anim</code> set to <code>yes</code> and <code>minecraft-body-anim</code> set to <code>hiwave</code>. Both <code>minecraft-head-anim</code> and <code>minecraft-body-anim</code> are A-FRAME components. </p>\n<p>I don&#8217;t know yet how that composition works, but it looks neat.</p>\n<p>Equipped with a working Minecraft demo dude, we went on to try creating our own marker from scratch. According to the AR.js repo, you are to use this <a href=\"http://flash.tarotaro.org/blog/2009/07/12/mgo2/\">Flash-based marker training</a> implementation from 2009. </p>\n<p>Flash doesn&#8217;t work well in 2017. Couldn&#8217;t get it to run at all in Chrome and Firefox wouldn&#8217;t let us click on &#8220;Give camera permissions&#8221;. Had to hack around that and manually add a rule to the global permissions table.</p>\n<p>We were able to create a marker file. The trick is to have an enclosed area with straight lines. You can put any sort of scribble inside, as long as the outside is straight and enclosed.</p>\n<img src=\"https://swizec.com/blog/wp-content/uploads/2017/09/Screen-Shot-2017-09-03-at-19.25.21.png\" alt=\"Custom Marker\" class=\"aligncenter size-full wp-image-7775\" srcset=\"https://swizec.com/blog/wp-content/uploads/2017/09/Screen-Shot-2017-09-03-at-19.25.21.png 544w, https://swizec.com/blog/wp-content/uploads/2017/09/Screen-Shot-2017-09-03-at-19.25.21-300x269.png 300w\" sizes=\"(max-width: 544px) 100vw, 544px\" />\n<p>Unfortunately we weren&#8217;t able to convince AR.js to use our marker. Even explicitly setting the marker URL didn&#8217;t work and it kept using default settings.</p>\n<pre lang=\"javascript\"><a-marker type=\"pattern\" url=\"/markers/marker64.pat\">\n</pre>\n<p>¬Ø\\_(„ÉÑ)_/¬Ø</p>\n<p>Onwards to making a ballistic missile!</p>\n<p>We went the <a href=\"https://github.com/ngokevin/aframe-react\">aframe-react</a> way to build our ballistic missile. That way we could postpone understanding true A-FRAME components a little longer.</p>\n<pre lang=\"javascript\">class BallisticMissile extends Component {\n\n    render() {\n        const { pos } = this.props;\n\n        return (\n            <Entity geometry={{primitive: 'box', width: .2, height: 1, depth: .2}}\n                    material={{roughness: 0, src: require('./texture.jpg')}}\n                    scale={{x: 1, y: 1, z: 1}}\n                    position={pos}\n\n                    />\n        )\n    }\n}\n</pre>\n<p><code>BallisticMissile</code> is a class component because we wanted to use a <code>tickHandler</code> to animate as <a href=\"https://github.com/ngokevin/aframe-react#best-practices\">aframe-react README</a> suggests.</p>\n<blockquote><p>\nFor example, don&#8217;t create requestAnimationFrames to continuously throw React prop updates to A-Frame. Instead, create an A-Frame component with a tick handler such that everything is done in memory with little overhead.\n</p></blockquote>\n<p>This did not work. I couldn&#8217;t figure out how to set a tick handler that actually gets called, so we set up a little game loop in our <code><App></code> component to make the missile fly.</p>\n<pre lang=\"javascript\">class App extends Component {\n    state = {\n        missile: false,\n        launching: false\n    }\n\n    launch = () => {\n        this.setState({\n            missile: true,\n            launching: true,\n            missilePos: { x: 0, y: 0, z: 0 },\n            missileA: { ax: 0, ay: .005, az: 0 },\n            missileV: { vx: 0, vy: 0, vz: 0 }\n        });\n        if (!this.launched) {\n            window.requestAnimationFrame(() => this.gameLoop());\n            this.launched = true;\n        }\n    }\n\n    gameLoop() {\n        const { x, y, z } = this.state.missilePos,\n              { vx, vy, vz } = this.state.missileV,\n              { ax, ay, az } = this.state.missileA;\n\n        this.setState({\n            missilePos: { x: x+vx, y: y+vy, z: z+vz },\n            missileV: { vx: vx+ax, vy: vy+ay, vz: vz+az }\n        });\n        window.requestAnimationFrame(() => this.gameLoop());\n    }\n</pre>\n<p>On every <code>requestAnimationFrame</code> we update <code>missilePos</code> with velocity on each axis, and <code>missileV</code> with acceleration for each axis. This creates a missile that flies straight up and never stops.</p>\n<blockquote class=\"twitter-tweet\" data-width=\"550\">\n<p lang=\"en\" dir=\"ltr\">AR is hard <a href=\"https://t.co/SDwTMPjxJw\">pic.twitter.com/SDwTMPjxJw</a></p>\n<p>&mdash; Swizec (@Swizec) <a href=\"https://twitter.com/Swizec/status/904492731086528512\">September 3, 2017</a></p></blockquote>\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n<p>You can try launching a missile <a href=\"https://swizec.github.io/ar-js-experiment/\">here</a>. You&#8217;ll need the <a href=\"https://jeromeetienne.github.io/AR.js/data/images/HIRO.jpg\">hiro marker</a>.</p>\n<p>Join me next time as we try to make the missile look better and convince it to fly in a ballistic trajectory.</p>\n<p>üöÄ</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"86f97ed2-2457-557c-bda5-598eb1556b68"}}