{"data":{"wordpressPost":{"title":"Migrating to Webpack 2: some tips and gotchas","content":"<blockquote class=\"twitter-tweet\" data-width=\"550\">\n<p lang=\"en\" dir=\"ltr\">Question for the Javascript folk.<br />Have you upgraded Webpack to 2.x yet?</p>\n<p>What are you using for &quot;real projects&quot; (work/?)?</p>\n<p>&mdash; Erik Aybar (@erikthedev_) <a href=\"https://twitter.com/erikthedev_/status/818990904929349632\">January 11, 2017</a></p></blockquote>\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n<p>Webpack 2.2 has reached <a href=\"https://github.com/webpack/webpack/releases/tag/v2.2.0-rc.4\">release candidate 4</a>, the last pre-release version. Time to update!</p>\n<p>My motivation was <em>&quot;Ugh, I&#39;m tired of these 3min+ local compile times. The amount of waiting is too damn high!&quot;</em> The new features are a nice bonus too.</p>\n<p><center><a href=\"https://imgflip.com/i/1hh3ii\"><img src=\"https://i.imgflip.com/1hh3ii.jpg\" title=\"made at imgflip.com\"/></a></center></p>\n<p>After many days of fiddling, my Webpack is ready. Production compiles take 219 seconds instead of 226, and local dev compilation takes 152 seconds instead of 151. Itâ€™s not <em>that</em> worth it, but incremental compiles with Webpack in <code>watch</code> mode feel smooth as silk.</p>\n<p>I love the new feature that highlights big files and tells you initial load sizes for different apps. Iâ€™ve been using it to eyeball different options, and I&#39;m sure it has bigger use cases, too. Fine-tuning code splitting perhaps?</p>\n<img class=\"alignnone size-full wp-image-7354\" src=\"https://swizec.com/blog/wp-content/uploads/2017/01/Screen-Shot-2017-01-11-at-00.37.00.png\" width=\"775\" height=\"311\" srcset=\"https://swizec.com/blog/wp-content/uploads/2017/01/Screen-Shot-2017-01-11-at-00.37.00.png 775w, https://swizec.com/blog/wp-content/uploads/2017/01/Screen-Shot-2017-01-11-at-00.37.00-300x120.png 300w, https://swizec.com/blog/wp-content/uploads/2017/01/Screen-Shot-2017-01-11-at-00.37.00-768x308.png 768w\" sizes=\"(max-width: 775px) 100vw, 775px\" />\n<img class=\"alignnone size-full wp-image-7355\" src=\"https://swizec.com/blog/wp-content/uploads/2017/01/Screen-Shot-2017-01-11-at-00.38.28.png\" width=\"446\" height=\"117\" srcset=\"https://swizec.com/blog/wp-content/uploads/2017/01/Screen-Shot-2017-01-11-at-00.38.28.png 446w, https://swizec.com/blog/wp-content/uploads/2017/01/Screen-Shot-2017-01-11-at-00.38.28-300x79.png 300w\" sizes=\"(max-width: 446px) 100vw, 446px\" />\n<p>Then again, <code>rc4</code> just disabled these features by default &quot;because they&#39;re annoying&quot;. I liked it.</p>\n<p>Webpack recommends keeping files under 250kB, which sounds like a lot, but it looks damn small compared to my code. Did you know 196kB of source ES6 compiles into about 920kB of browser-ready JavaScript? <em>With</em> minification, tree shaking, and dead code elimination! Without that, it&#39;s 2.3 megs. ?</p>\n<p>The day when we ship raw ES6 code can&#39;t come soon enough.</p>\n<p><em>BTW: Tree shaking removes unused dependencies (like when you import a whole library but just use a function or two), and dead code elimination removes code that&#39;s unreachable, like functions you never call.</em></p>\n<p>So is upgrading to Webpack 2 even worth it?</p>\n<p>Totally. Once they and the ecosystem <a href=\"https://github.com/webpack/webpack/issues/2867\">resolve some issues</a>, tree shaking will ride eternal, shiny and chrome.</p>\n<p>Here are some gotchas I discovered while upgrading.</p>\n<h2>It&#39;s not quiiiiite ready yet (dependency hellish)</h2>\n<p>You can use Webpack 2 in production. I&#39;m about to start.</p>\n<blockquote class=\"twitter-tweet\" data-width=\"550\">\n<p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/erikthedev_\">@erikthedev_</a> <a href=\"https://twitter.com/TheLarkInn\">@TheLarkInn</a> in the midst of upgrading our prod app to Webpack2.</p>\n<p>Prob going live within the week.</p>\n<p>&mdash; Swizec (@Swizec) <a href=\"https://twitter.com/Swizec/status/819004362231943168\">January 11, 2017</a></p></blockquote>\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n<p>Although now that theyâ€™ve promised to release the final version in &lt; 10 days, I might wait. Or gently delay the code review and QA process until their release. We&#39;ll see ðŸ™‚</p>\n<p>But here&#39;s one thing that&#39;s really awkward right now.</p>\n<p>When you upgrade to Webpack 2.2.rc.x, you fall into a small dependency hell with <code>extract-text-webpack-plugin</code>. The released version depends on Webpack 2.1, which is silly. If you&#39;re going bleeding edge, you might as well go all the way, ya know?</p>\n<p>So here&#39;s what you have to do:</p>\n<pre lang=\"javascript\">\n// packages.json\n\"dependencies\": {\n  //...\n    \"extract-text-webpack-plugin\": \"git://github.com/webpack/extract-text-webpack-plugin#cbd4690\",\n    \"webpack\": \"^2.2.0-rc.3\"\n</pre>\n<p>I&#39;d show you the <code>npm install</code> command, but I don&#39;t know how to point at specific commits. See that <code>#cbd4690</code> hash? That&#39;s the exact commit that says <code>Add webpack 2 RC compatibility</code>.</p>\n<p>This is fragile and a terrible idea. You <em>will</em> forget to update this dependency in the future, and it will continue to point at a random commit for the foreseeable future. Happens every time.</p>\n<p><em>But</em> the published version on npm doesn&#39;t work. ? I assume they&#39;ll fix it for final release.</p>\n<p>Why extract-text-webpack-plugin? It makes stylesheet imports better, I&#39;m told.</p>\n<blockquote><p>\nIt moves every require(&quot;style.css&quot;) in entry chunks into a separate css output file. So your styles are no longer inlined into the javascript, but separate in a CSS bundle file (styles.css). If your total stylesheet volume is big, it will be faster because the stylesheet bundle is loaded in parallel to the javascript bundle.\n</p></blockquote>\n<p>See? Useful.</p>\n<p>You also have to update <code>babel-loader</code> to at least <code>6.2.10</code>. That&#39;s when they added support for Webpack 2 rc. Not too bad.</p>\n<h2>Funny config updates, but better docs</h2>\n<p>The new Webpack 2 docs are <em>so much better</em>. Check out this wonderful <a href=\"https://webpack.js.org/guides/migrating/\">Migrating from v1 to v2</a> official guide. You basically have to do a find &amp; replace, and you&#39;re done.</p>\n<p>Just don&#39;t forget to take <code>&#39;&#39;</code> out of <code>resolve.extensions</code>. I don&#39;t remember why everyone needed that in the past, but I know that the new Webpack throws an error.</p>\n<p>Error reports for bad configuration are also better now. That was fun to see. Loved it.</p>\n<h2>CSS/Less and PostCSS plugin</h2>\n<p>If you&#39;re not using Webpack to load CSS and compile Less or Sass, you should. It&#39;s made my life a lot easier. Especially the <a href=\"https://github.com/postcss/postcss\">PostCSS</a> plugin makes your CSS easier to write.</p>\n<p>Going from Webpack v1 to Webpack v2 involved many changes in this config. We used to have this:</p>\n<pre lang=\"javascript\">\n// webpack.config.js\nloaders: [\n    // ...\n        {\n        test: /\\.(less|css)$/,\n        loader: ExtractTextPlugin.extract(\"style/useable\", \"css?sourceMap!postcss-loader!less-loader?sourceMap=true\"),\n        include: [\n            path.resolve(__dirname, \"app/assets/stylesheets\")\n        ]\n    },\n\n    {\n        test: /\\.css$/,\n        loader: ExtractTextPlugin.extract(\"style/useable\", \"css?sourceMap!postcss-loader?sourceMap=true\")\n    },\n    // ...\n],\npostcss: function () {\n    return [\n        precss,\n\n        // UglifyJSPlugin mangles valid css during minfication. It is a known issue and this fix was obtained from: https://github.com/webpack/webpack/issues/666#issuecomment-184319770\n        postcssImport({ addDependencyTo: webpack }),\n        postcssURL(),\n        postcssNext({\n            browsers: ['last 2 versions', 'ie >= 9'],\n            compress: true\n        }),\n        cssnano({zindex: false})\n            // end UglifyJSPlugin fix\n    ];\n}\n</pre>\n<p>Which is probably too much config, but it worked. With Webpack v2 that&#39;s become more manageable and looks like this:</p>\n<pre lang=\"javascript\">\n// webpack.config.js\n    module: {\n        rules: [\n            {\n                test: /\\.(less|css)$/,\n                use: [\n                    ExtractTextPlugin.extract({\n                        fallbackLoader: \"style/useable\",\n                        loader: \"style-loader\"\n                    }),\n                    {\n                        loader: 'css-loader?sourceMap',\n                        query: {\n                            modules: true,\n                            importLoaders: 2\n                        }\n                    },\n                    'postcss-loader?sourceMap',\n                    'less-loader?sourceMap'\n                ]\n            },\n        ]\n    },\n</pre>\n<p>So much less code ?</p>\n<p>That&#39;s because a lot of it is now in a different file called <code>postcss.config.js</code>. That one is a copypaste of the detailed config for postcss itself:</p>\n<pre lang=\"javascript\">\nconst webpack = require('webpack')\n\nmodule.exports = {\n    plugins: [\n        // UglifyJSPlugin mangles valid css during minfication. It is a known issue and this fix was obtained from: https://github.com/webpack/webpack/issues/666#issuecomment-184319770\n        require('postcss-import')({ addDependencyTo: webpack }),\n        require('postcss-url'),\n        require('postcss-cssnext')({\n            browsers: ['last 2 versions', 'ie >= 9'],\n            compress: true\n        }),\n        require('cssnano')({zindex: false})\n            // end UglifyJSPlugin fix\n    ]\n}\n</pre>\n<p>I don&#39;t know if the <code>UglifyJS</code> bug we&#39;re working around still exists, so I left the config as I found it. Just to be safe.</p>\n<p>Looking at code blobs is hard, so here&#39;s what happened:</p>\n<ol>\n<li>Webpack 2 no longer allows plugin-specific config keys like <code>postcss</code>. Everything must fit in the <code>rules.use</code> listing.</li>\n<li>PostCSS now uses a separate config file called <code>postcss.config.js</code>. This works out of the box.</li>\n<li>I removed separate rules for compiled and uncompiled CSS.</li>\n<li>Everything goes in the <code>rules.use</code> array.</li>\n<li><strong>Use rules evaluate last to first.</strong></li>\n<li>First, we use <code>less-loader</code> to compile Less to CSS.</li>\n<li>Then, we use <code>postcss-loader</code> to do the PostCSS changes.</li>\n<li>Then, <code>css-loader</code> enables <code>import css from &#39;file.css&#39;</code>.</li>\n<li>Finally, <code>ExtractTextPlugin</code> puts it in <code>&lt;style&gt;</code>.</li>\n</ol>\n<p>All of this used to be encoded in the loader bang syntax before: <code>css?sourceMap!postcss-loader!less-loader?sourceMap=true</code></p>\n<p>Whomever came up with the <code>use: []</code> syntax, you&#39;re the best. I love the new approach.</p>\n<h2>Tree shaking and optimization</h2>\n<p>Now for the reason we&#39;re all here: tree shaking.</p>\n<p>Webpack 2 understands native ES6 imports and uses them as split points. That means it can organize your code into different chunks so you&#39;re only loading the JavaScript that you&#39;re using.</p>\n<p>What it <em>also</em> means is that it understands when you&#39;re importing more than you need. Combined with the <a href=\"https://www.npmjs.com/package/webpack-uglify-js-plugin\">UglifyJsPlugin</a>, it can eliminate that extra code.</p>\n<p>I spent a lot of time looking for what exactly turns this feature on. Turns Outâ„¢, it&#39;s on by default. Just Worksâ„¢.</p>\n<p>Here&#39;s what you have to do:</p>\n<ol>\n<li>Tell Babel <em>not</em> to compile imports into CommonJS (require stuff)</li>\n<li>Enable UglifyJS</li>\n</ol>\n<pre lang=\"javascript\">\n// webpack.config.js\nrules: [\n    {\n        test: /\\.js$/,\n        include: [\n            path.resolve(__dirname, \"app/assets/javascripts\")\n        ],\n        exclude: [\n            path.resolve(__dirname, \"node_modules/\")\n        ],\n        query: {\n            plugins: ['transform-decorators-legacy',\n                      'transform-runtime',\n                      'transform-object-rest-spread',\n                      'transform-react-constant-elements',\n                      'transform-class-properties'],\n            presets: [['es2015', {modules: false}], 'latest', 'react']\n        },\n        loader: 'babel-loader',\n    },\n]\n// ...\nplugins: [\n    new webpack.optimize.UglifyJsPlugin({\n        compress: {\n            warnings: false,\n            screw_ie8: true,\n            conditionals: true,\n            unused: true,\n            comparisons: true,\n            sequences: true,\n            dead_code: true,\n            evaluate: true,\n            join_vars: true,\n            if_return: true\n        },\n        output: {\n            comments: false\n        }\n    }),\n]\n</pre>\n<p>See that <code>{modules: false}</code> in the <code>babel-loader</code> config? That&#39;s new. You can specify options when defining Babel plugins and presets.</p>\n<p><code>modules: false</code> tells the <code>es2015</code> preset to avoid compiling <code>import</code> statements into CommonJS. That lets Webpack do tree shaking on your code.</p>\n<p>UglifyJsPlugin without extra config will do what we need, but I wanted to show you the options. It&#39;s <code>unused</code> and <code>dead_code</code> that enable tree shaking.</p>\n<p><strong>However</strong>, we have to wait for the ecosystem to catch up. Most libraries are distributed with ES6 modules compiled to ES5, so in a real world scenario, <a href=\"https://github.com/webpack/webpack/issues/2867#issuecomment-271802246\">you only get about 4% improvement</a>. ?</p>\n<p>With Webpack 2 around the corner, this is sure to improve. Can&#39;t wait!</p>\n<p>You should also split your code into Your Code and Everybody Else&#39;s code. Webpack docs have a great guide on <a href=\"https://webpack.js.org/guides/code-splitting-libraries/\">Code Splitting for Libraries</a>.</p>\n<p>Happy hacking ?</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"4d61f818-a277-55d0-8249-2618d1e9d964"}}