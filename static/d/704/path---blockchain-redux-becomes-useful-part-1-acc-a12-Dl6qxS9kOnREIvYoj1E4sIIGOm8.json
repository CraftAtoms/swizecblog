{"data":{"wordpressPost":{"title":"Blockchain-redux becomes useful, part 1","content":"<p><iframe width=\"580\" height=\"326\" src=\"https://www.youtube.com/embed/D3WH5nI9Nj4?feature=oembed\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe></p>\n<p>Remember my <a href=\"https://swizec.com/blog/blockchain-redux-experiment-part-2/swizec/8055\">blockchain-redux</a> project from December? Probably not.</p>\n<p>I&#8217;m building a library that lets anyone who can build a webapp build a blockchain. No, not an Etherium-distributed app or a crypto currency. Altho you couldâ€¦</p>\n<p>No, I&#8217;m exploring the idea that you can use blockchains as generic validated data storage. Got some state you wanna save and share? <code>.dispatch</code> an action. Your state is hashed, shared, and saved to <em>a</em> blockchain.</p>\n<p>Every other app or client attached to the same blockchain can read your state, use it, and add to it.</p>\n<img src=\"https://media.giphy.com/media/krhB8ydCQiYZq/giphy.gif\" />\n<p>Ideally, you shouldn&#8217;t have to know <em>how</em> it works.</p>\n<p>My ultimate goal is to give you this ðŸ‘‡</p>\n<ol>\n<li><code>import { createStore } from 'blockchain-redux'</code></li>\n<li><code>blockchain = createStore(rootReducer)</code></li>\n<li><code>blockchain.dispatch()</code> and <code>blockchain.getState()</code></li>\n<li>You have a globally distributed validated data store</li>\n</ol>\n<p>This weekend, we got very close.</p>\n<h2>First usable proof of concept</h2>\n<p>To prove that blockchains are useful for more than crypto speculation, I&#8217;m making my <a href=\"https://swizec.com/blog/building-interactive-dom-benchmark-preliminary-results/swizec/8219\">interactive DOM benchmark</a> collaborative. You can try it here: <a href=\"http://dom-benchmark.now.sh/\">dom-benchmark.now.sh</a></p>\n<p>There&#8217;s a few kinks left to resolve before I can publish the collaborative version.</p>\n<p>The goal is to store and share measurements from anyone who plays with the benchmark and show them as live-updating graphs and charts. We can finally find out how fast various web frameworks are in the real world on real people&#8217;s computers. Won&#8217;t that be fun? ðŸ¤˜</p>\n<p>Right now, on <a href=\"https://www.youtube.com/watch?v=D3WH5nI9Nj4&amp;feature=youtu.be&amp;t=3345\">my local machine</a>, each click adds a block to the blockchain, and every other instance has to reload the page to fetch the updates. I want to make this work live.</p>\n<img class=\"alignnone size-full wp-image-8309\" src=\"https://swizec.com/blog/wp-content/uploads/2018/04/Screen-Shot-on-2018-04-03-at-124014.png\" width=\"3360\" height=\"1950\" srcset=\"https://swizec.com/blog/wp-content/uploads/2018/04/Screen-Shot-on-2018-04-03-at-124014.png 3360w, https://swizec.com/blog/wp-content/uploads/2018/04/Screen-Shot-on-2018-04-03-at-124014-300x174.png 300w, https://swizec.com/blog/wp-content/uploads/2018/04/Screen-Shot-on-2018-04-03-at-124014-768x446.png 768w, https://swizec.com/blog/wp-content/uploads/2018/04/Screen-Shot-on-2018-04-03-at-124014-1024x594.png 1024w\" sizes=\"(max-width: 3360px) 100vw, 3360px\" />\n<p>Each block holds data that looks like this:</p>\n<pre lang=\"javascript\">\n{\n    \"vanilla\": {\n        \"prepend1000\": [35, 92, 31, 33, 33, 7],\n        \"insert1000\": [27],\n        \"append1000\": [19, 7],\n        \"dropAll\": [23, 21],\n        \"remove1\": [0]\n    },\n    \"smart\": {\n        // ...\n    },\n    \"react\": {\n        // ...\n    },\n    \"preact\": {\n        // ...\n    },\n    \"vue\": {\n        // ...\n    }\n}\n</pre>\n<p>A mapping of benchmark types to results. An array of values for each button you can click.</p>\n<h3>Adding blockchain-redux to the benchmark</h3>\n<p>Saving benchmark data to the blockchain revealed a few bugs in <a href=\"https://github.com/Swizec/blockchain-redux\">blockchain-redux</a> that I fixed. Unfortunately video of that livecoding session is blocked due to background music. Oops.</p>\n<p>When the bugs were resolved, integration boiled down to this ðŸ‘‡</p>\n<ol>\n<li>In <code>App.js</code>, we initialize the blockchain store</li>\n<li>We subscribe to changes on the blockchain</li>\n<li>We use the React 16.3 context API to share the store with child components</li>\n<li>We render the blockchain length counter in <code>&lt;IntroCopy /&gt;</code></li>\n<li>We dispatch block additions on every benchmark interaction</li>\n</ol>\n<h3>Initialize and subscribe</h3>\n<p>First 2 steps aren&#8217;t too hard:</p>\n<pre lang=\"javascript\">\n// App.js\nimport { createStore, firebaseMiddleware } from \"blockchain-redux\";\nimport * as firebase from \"firebase\";\n\nclass App extends Component {\n    blockchain = {};\n\n    componentDidMount = async () => {\n        const FirebaseApp = firebase.initializeApp({\n            apiKey: \"<api key>\",\n            databaseURL: \"https://blockchain-dom-benchmark.firebaseio.com\",\n            projectId: \"blockchain-dom-benchmark\"\n        });\n\n        this.blockchain = await createStore(\n            benchmarkReducer,\n            firebaseMiddleware(FirebaseApp)\n        );\n\n        this.unsubscribe = this.blockchain.subscribe(() => {\n            this.forceUpdate();\n        });\n        this.forceUpdate();\n    };\n\n    componentWillUnmount() {\n        this.unsubscribe();\n    }\n</pre>\n<p>We initialize <code>blockchain</code> as an empty object, then use <code>createStore</code> to overwrite it with our blockchain store in <code>componentDidMount</code>. This is because it needs to talk to Firebase during initialization.</p>\n<p>Firebase is used as a central hub right now. Eventually, I want to replace it with direct communication between nodes via WebRTC or similar.</p>\n<p>Once the blockchain is initialized, we subscribe to changes and trigger a <code>forceUpdate</code>. The initial call to subscribers after our chain initializes happens before we have a chance to subscribe.</p>\n<p>Right before <code>&lt;App /&gt;</code> unmounts, we unsubscribe from the store to avoid dangling callbacks.</p>\n<h3>Use context to pass the chain around</h3>\n<p>We use the new React 16.3 context API to pass the chain to child components.</p>\n<pre lang=\"javascript\">\n// BlockchainContext.js\nimport React from \"react\";\n\nconst BlockchainContext = React.createContext({});\n\nexport default BlockchainContext;\n</pre>\n<p>We create a new context in a separate file. This allows us to import it in other components so we can define consumers.</p>\n<p>In App.js, we set its value like this:</p>\n<pre lang=\"javascript\">\n// App.js\nrender() {\n    return <BlockchainContext.Provider value={this.blockchain}>\n            <IntroCopy />\n\n            <Benchmarks />\n        </BlockchainContext.Provider>\n}\n</pre>\n<p>We now have <code>this.blockchain</code> shared via context. Any component that needs to read from our blockchain has to use <code>&lt;BlockchainContext.Consumer&gt;</code>.</p>\n<h3>Read from the chain</h3>\n<p>In <code>&lt;IntroCopy&gt;</code>, we render the current length of our blockchain like this:</p>\n<pre lang=\"javascript\">\nimport BlockchainContext from \"./BlockchainContext\";\n\nexport default () => (\n    <React.Fragment>\n        <div className=\"App-heading App-flex\">\n            <h2>\n                Let's benchmark the <span className=\"App-react\">DOM</span>{\" \"}\n                together\n            </h2>\n        </div>\n        <div className=\"App-instructions App-flex\">\n            <BlockchainContext.Consumer>\n                {({ getWholeChain = () => [] }) => (\n                    There are {getWholeChain().length} nodes on the chain\n                )}\n            </BlockchainContext.Consumer>\n</pre>\n<p>We wrap a paragraph in a <code>BlockchainContext.Consumer</code>, which takes a function as children. That function gets the context <code>value</code> as its argument, which lets us call <code>getWholeChain()</code> on our blockchain to read its length.</p>\n<p>Another approach would be the traditional connected component pattern. We&#8217;d make a new <code>BlockchainLength</code> component, subscribe it to blockchain changes, and render values.</p>\n<p>Just like Redux ðŸ¤“</p>\n<h3>Adding to the chain</h3>\n<p>Adding new benchmark values to the chain works via action dispatchers. Just like Redux.</p>\n<p><code>&lt;VanillaBenchmark&gt;</code> (and soon all the others) takes an <code>addToBenchmark</code> function as props and calls it after updating its own benchmark display.</p>\n<pre lang=\"javascript\">\n// benchmarks/VanillaBenchmark.js\n\nupdateValues() {\n    // render stuff\n \n    this.props.addToBenchmark({\n        name: this.props.name,\n        value: end - start,\n        type\n    });\n}\n</pre>\n<p>Name is the name of this benchmark&nbsp;(<code>vanilla</code>), value is the result, and type tells us which button you clicked.</p>\n<p>The overall <code>&lt;Benchmarks /&gt;</code> component takes this callback and dispatches an action on the blockchain.</p>\n<pre lang=\"javascript\">\naddToBenchmark = ({ name, type, value }) => {\n    this.props.blockchain.dispatch({\n        actionType: \"ADD_BENCHMARK\",\n        name,\n        type,\n        value\n    });\n};\n</pre>\n<p>Looks familiar, doesn&#8217;t it? It&#8217;s just like Redux. You dispatch an action and reducers handle calculating the new state.</p>\n<p>Our reducer for this example doesn&#8217;t do much more than concat values to arrays. Like this:</p>\n<pre lang=\"javascript\">\nconst benchmarkReducer = function(name) {\n    return function(state = defaultState, action) {\n        if (name !== action.name) {\n            return state;\n        }\n\n        switch (action.actionType) {\n            case \"ADD_BENCHMARK\":\n                return Object.assign(state, {\n                    [action.type]: [...state[action.type], action.value]\n                });\n            default:\n                return state;\n        }\n    };\n};\n\nexport default combineReducers({\n    vanilla: benchmarkReducer(\"vanilla\"),\n    smart: benchmarkReducer(\"smart\"),\n    react: benchmarkReducer(\"react\"),\n    preact: benchmarkReducer(\"preact\"),\n    vue: benchmarkReducer(\"vue\")\n});\n</pre>\n<p>All our reducers are the same, but they use different names. <code>benchmarkReducer</code> is a function that takes a name and returns a generic benchmark reducer. It appends values to the specified type&#8217;s list of measurements.</p>\n<p>Just like Redux ðŸ¤“</p>\n<h3>Just like Redux, but more ðŸ¤“</h3>\n<p>Unlike just Redux, magic happens, and a new block is added to the blockchain.</p>\n<img class=\"alignnone size-full wp-image-8310\" src=\"https://swizec.com/blog/wp-content/uploads/2018/04/screenshot-gif.gif\" width=\"1280\" height=\"720\" />\n<p>And you thought it wasn&#8217;t useful. Ha!</p>\n<h2>What next?</h2>\n<p>Next step for this particular example is to render some graphs and launch the collaborative benchmark. We&#8217;ll see what happens.</p>\n<p>On the <a href=\"https://github.com/Swizec/blockchain-redux\">blockchain-redux</a> front, I&#8217;m most probably giving a lightning talk about it at <a href=\"https://www.frontiersf.com/\">Frontier Conf</a> in April and a more proper talk at <a href=\"wearedevelopers.com/congress/\">WeAreDevelopers</a> in May.</p>\n<p>Fun times. No pressure. ðŸ˜…</p>\n<p><em>This is a Livecoding Recap â€“ an almost-weekly post about interesting things discovered while livecoding. Usually shorter than 500 words. Often with pictures. Livecoding happens almost <strong>every Sunday at 2pm PDT</strong> on multiple channels. You should subscribe to <a href=\"https://www.youtube.com/TheSwizec\">My Youtube</a> channel to catch me live.</em></p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"1f10dfc6-29bb-56ac-b512-4a51ea83c7bf"}}