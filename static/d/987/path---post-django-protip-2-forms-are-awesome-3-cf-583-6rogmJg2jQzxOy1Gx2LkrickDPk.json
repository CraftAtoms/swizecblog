{"data":{"wordpressPost":{"title":"Django protip #2: Forms are awesome","content":"<div class=\"zemanta-img\" style=\"margin: 1em; display: block;\">\n<div>\n<dl class=\"wp-caption alignright\" style=\"width: 170px;\">\n<dt class=\"wp-caption-dt\"><a href=\"http://www.flickr.com/photos/50811886@N00/2686845422\"><img title=\"Moss\" src=\"http://swizec.com/blog/wp-content/uploads/2010/08/2686845422_d924cc453e_m.jpg\" alt=\"Moss\" width=\"160\" height=\"240\" /></a></dt>\n<dd class=\"wp-caption-dd zemanta-img-attribution\" style=\"font-size: 0.8em;\">Image by <a href=\"http://www.flickr.com/photos/50811886@N00/2686845422\">warrenski</a> via Flickr</dd>\n</dl>\n</div>\n</div>\n<p>Welcome to another installment of Swizec&#8217;s <a class=\"zem_slink freebase/en/django_web_framework\" title=\"Django (web framework)\" rel=\"homepage\" href=\"http://www.djangoproject.com\">Django</a> protip. Previously we discussed a better way to <a href=\"http://swizec.com/blog/django-protip-1-a-better-app-structure/swizec/1386\">structure your django apps</a>, but nobody cared about that because everybody is rather silly. This time we&#8217;ll be talking about how awesome forms are and why you should be using them for pretty much everything. At the end, I&#8217;ll show you some neat <a class=\"zem_slink freebase/en/tips_tricks\" title=\"Tips &amp; Tricks\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Tips_%26_Tricks\">tips and tricks</a> I discovered during my Django Epiphany.</p>\n<h3>Why forms</h3>\n<p>When you look at code a lot of web developers produce (and yes, even I did it plenty of times back in the day) you will notice a lot of work goes into retrieving data from GET and POST parameters. Now despite most developers simply ignoring GET parameters as anything really special or dangerous and just handling them as if they were regular variables, because hey, what could go wrong about retrieving a page number right? At best you&#8217;ll see code having a bunch of lines sort of like this:</p>\n<pre lang=\"php\">$page = (isset($_GET['page'])) ? intval($_GET['page']) : 0;</pre>\n<p>Anyone notice a security flaw? Then think of this, what happens if the page is set to -1? Sure, if errors aren&#8217;t being displayed right to the user nothing too important. But if they get shown an <a class=\"zem_slink freebase/en/sql\" title=\"SQL\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/SQL\">SQL</a> error &#8230; or worse &#8230;</p>\n<p>However people are usually at least a little bit more careful about POST data because they realise that hey, this is something a person filled in a <a class=\"zem_slink freebase/guid/9202a8c04000641f8000000000955540\" title=\"Form (web)\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Form_%28web%29\">web form</a> and perhaps the data should go through a series of a little bit more stringent tests before it gets chucked into the <a class=\"zem_slink freebase/en/database\" title=\"Database\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Database\">database</a>. Hell, maybe we could even tell the user where they screwed up and if the planets are in constelation, why not also make sure those required fields are actually filled out &#8230; you know, so we don&#8217;t get any weird inconsistencies in our database.</p>\n<p>But still, it&#8217;s a lot of work to do all of that by hand every god damn time. If only there were something easier, more transparent and plain old automagical &#8230;</p>\n<h3>Cue Django Forms</h3>\n<p>In django, all of this comes automagically. There is this thing called a &#8220;form&#8221;, which basically lets you define what parameters a request needs, be it GET or POST based, what they should validate against and most importantly, what&#8217;s required and what is not.</p>\n<p>If you&#8217;re into that sort of stuff you even get building the form in a html, so the users can use it, completely for free and magically with all the required &#8220;Hey bozo, you filled so and so field wrong. Fix it!&#8221;. For every field! Magic.</p>\n<p>But since most of my time is spent on developing <a class=\"zem_slink freebase/guid/9202a8c04000641f80000000163b3ef7\" title=\"Application programming interface\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Application_programming_interface\">API</a>&#8216;s rather than user-facing <a class=\"zem_slink freebase/en/website\" title=\"Website\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Website\">websites</a> let me show you how to use forms effectively in that sort of environment. For the html stuff just go check out the <a href=\"http://docs.djangoproject.com/en/dev/topics/forms/\" target=\"_blank\">django form docs</a>.</p>\n<p>The basic use of forms goes a little bit like this (hopefully your forms are in a separate file from your views, this is just an example :P)</p>\n<pre lang=\"python\">from django import forms\r\n\r\nclass ListForm(forms.Form):\r\n    feed = forms.IntegerField(required=False)\r\n    category = forms.IntegerField(required=False)\r\n    since = forms.DateTimeField(required=False)\r\n    count = forms.IntegerField(required=False)\r\n    page = forms.IntegerField(required=False)\r\n    include_content = forms.BooleanField(required=False)\r\n\r\ndef list(request, format='json'):\r\n    form = ListForm(request.user, request.GET)\r\n\r\n    if form.is_valid():\r\n       articles = Article.objects.filter(feed__in=form.cleaned_data['feeds']\r\n                                                  ).order_by('-time')[page*count:page*count+count]\r\n       return HttpResponse(json.dumps({'status': 'OK',\r\n                                        'count': len(articles),\r\n                                        'articles': articles}))\r\n    else:\r\n\treturn HttpResponseBadRequest(json.dumps({'status': 'ERROR'}))</pre>\n<p>Well something along those lines anyhow. What you can see is that I basically define a form and check that it&#8217;s valid. Once I know it&#8217;s valid I can go on using its cleaned_data without much regard for anything.</p>\n<h3>Some tips&amp;tricks</h3>\n<p>And now let&#8217;s get onto some tips&amp;tricks ðŸ™‚</p>\n<p>First thing you&#8217;ll notice once you start using forms like you properly should is that all of your views follow this pattern: get form; validate form; do something; or do something else;</p>\n<p>So I wrote up a descriptor for that, now I can be certain that when I&#8217;m in my view the form is valid and I can use the data.</p>\n<pre lang=\"python\">def form_valid(form_type, data_type):\r\n    def inner(view_func):\r\n        def wrapper(request, *args, **kwargs):\r\n            form = form_type(request.__getattribute__(data_type))\r\n\r\n            if form.is_valid():\r\n                request.form = form\r\n                return view_func(request, *args, **kwargs)\r\n            else:\r\n                return HttpResponseBadRequest(json.dumps({'status': 'ERROR'}))\r\n        return wraps(view_func)(wrapper)\r\n    return inner\r\n\r\n## the usage goes like so\r\n@form_valid(ImageForm, 'GET')\r\ndef image(request):\r\n    blob = BlobInfo.gql(\"WHERE filename='%s' LIMIT 1\" % request.form.cleaned_data['id'])[0]\r\n\r\n    return HttpResponse(BlobReader(blob.key()).read(),\r\n                        content_type=blob.content_type)</pre>\n<p>Using the decorator thus makes for much much cleaner code.</p>\n<p>Now let&#8217;s look at some magic done with custom clean functions inside forms ðŸ˜›</p>\n<pre lang=\"python\">## this enables us to handle <a class=\"zem_slink freebase/en/comma-separated_values\" title=\"Comma-separated values\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">comma separated values</a> seamlessly\r\n    def clean_feed(self):\r\n        try:\r\n            feed = [int(id) for id in str(self.cleaned_data['feed']).split(',')]\r\n        except (AttributeError, ValueError, KeyError):\r\n            feed = None\r\n        return feed\r\n\r\n## automagically parsing json parameters can be done too\r\n    def clean_feeds(self):\r\n        feeds = json.loads(self.cleaned_data['feeds'])\r\n        if type(feeds) != list:\r\n            raise forms.ValidationError(\"list of feeds expected\")\r\n        return feeds\r\n\r\n## or how about logging in the user while we're checking the user/pass is correct\r\n## don't manually log in users unless you know at least somewhat what you're doing, usually django handles this\r\n    def clean(self):\r\n        cleaned_data = self.cleaned_data\r\n\r\n        if len(self.errors) != 0:\r\n            return cleaned_data\r\n\r\n        user = authenticate(username=cleaned_data['email'],\r\n                            password=cleaned_data['password'])\r\n        if user is None:\r\n            del cleaned_data['email']\r\n            del cleaned_data['password']\r\n            raise forms.ValidationError('Bad login')\r\n        else:\r\n            cleaned_data['user'] = user\r\n\r\n        return cleaned_data\r\n\r\n## now the strangest thing, when you have to handle grabbing data by different parameters\r\n##(like being given a set of feed ids, or a feed category id, you can do this by returning\r\n## a QuerySet in the form's cleaned_data\r\ndef clean(self):\r\n        cleaned_data = self.cleaned_data\r\n\r\n        if not (cleaned_data.get('feed', None) != None or cleaned_data.get('category', None) != None):\r\n            raise forms.ValidationError(\"feed or category required\")\r\n\r\n        if cleaned_data['feed'] != None:\r\n            user_feeds = UserFeed.objects.filter(user=self.user,\r\n                                                 id__in=cleaned_data['feed'])\r\n        else:\r\n            user_feeds = UserFeed.objects.filter(user=self.user,\r\n                                                 categories__contains=\"'%d'\" % cleaned_data['category'])\r\n\r\n        cleaned_data['feeds'] = map(lambda f: f.id,\r\n                                    Feed.objects.filter(id__in=map(lambda f: f.feed, user_feeds)))\r\n\r\n        reverse_feeds = {}\r\n        for feed in user_feeds:\r\n            reverse_feeds[feed.feed] = feed.id\r\n        cleaned_data['reverse_feeds'] = reverse_feeds\r\n\r\n        return cleaned_data</pre>\n<h3>Conclusion</h3>\n<p>Anyhow, that&#8217;s it as far as forms are concerned. Do sound off in the comments or on twitter if I fucked up somewhere. I know geeks like to argue. Come back next week when I&#8217;ll be talking about different magical things you can do with decorators and why they are uber awesome to use in django (or well any other type of python development really)</p>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles by Zemanta</h6>\n<ul class=\"zemanta-article-ul\">\n<li class=\"zemanta-article-ul-li\"><a href=\"http://swizec.com/blog/django-protip-1-a-better-app-structure/swizec/1386\">Django protip #1: A better App structure</a> (swizec.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://swizec.com/blog/small-trick-for-seamless-base64-password-storage-in-django/swizec/1378\">Small trick for seamless base64 password storage in django</a> (swizec.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://tidbids.posterous.com/saas-with-django-and-postgresql\">Django and SaaS</a> (tidbids.posterous.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://almirkaric.com/2010/5/2/things-i-hate-in-django/\">Things i hate in django</a> (almirkaric.com)</li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=c1b237d5-fb11-4a02-a61d-ebecc9071b07\" alt=\"Enhanced by Zemanta\" /></a><span class=\"zem-script more-related more-info pretty-attribution\"><script src=\"http://static.zemanta.com/readside/loader.js\" type=\"text/javascript\"></script></span></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"21a296ed-6d00-5e7d-bc47-d6f3d2f0fa65"}}