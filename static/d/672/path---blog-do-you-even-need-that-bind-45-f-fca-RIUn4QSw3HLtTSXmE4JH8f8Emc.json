{"data":{"wordpressPost":{"title":"Do you even need that bind?","content":"<p><strong>Codereviewer:</strong> <em>&#8220;Why is this binding necessary?&#8221;</em></p>\n<pre><code>&lt;Modal show={viewStore.modal.show}\n       closeOnOuterClick={true}\n       onClose={viewStore.closeModal.bind(viewStore)}\n</code></pre>\n<blockquote><p>This code follows my <a href=\"https://swizec.com/blog/simple-mobx-driven-modals/swizec/7166\">Simple MobX-driven modals</a> approach.</p></blockquote>\n<p><strong>Swiz:</strong> <em>&#8220;Without binding, the callback would bind to Modal object when called, if I&#8217;m not mistaken.&#8221;</em></p>\n<p><strong>Codereviewer:</strong> <em>&#8220;Would it? That doesn&#8217;t seem very intuitive.&#8221;</em></p>\n<p><strong>Swiz:</strong> <em>&#8220;Welcome to JavaScript&#8217;s dynamic scoping. Where have you been the past few years?…</em></p>\n<p><em>But you&#8217;re right, it does seem to work. I think MobX&#8217;s <code>@action</code> does a bind for us. It definitely wouldn&#8217;t work with vanilla functions. I&#8217;ll change the code code.&#8221;</em></p>\n<img class=\"alignnone size-full wp-image-7244\" src=\"https://swizec.com/blog/wp-content/uploads/2016/11/3_hours_later.jpg\" width=\"800\" height=\"600\" srcset=\"https://swizec.com/blog/wp-content/uploads/2016/11/3_hours_later.jpg 800w, https://swizec.com/blog/wp-content/uploads/2016/11/3_hours_later-300x225.jpg 300w, https://swizec.com/blog/wp-content/uploads/2016/11/3_hours_later-768x576.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" />\n<p>Nope, no, nah. I should not have done that. That did not work. <code>@action</code> does not do any binding. Wrapping a function in a function does not create a closure with the correct local scope.</p>\n<p>But it <em>did</em> work in that one case I tried. Just not in the other. ?</p>\n<h2>Let&#8217;s investigate.</h2>\n<p>Here&#8217;s a self-contained example in Codepen &#8211; a clicker.</p>\n<p class='codepen'  data-height='265' data-theme-id='light' data-slug-hash='XNeENX' data-default-tab='result' data-animations='run' data-editable='true' data-embed-version='2'>\nSee the Pen <a href=\"http://codepen.io/swizec/pen/XNeENX/\">React, mobx, bind example</a> by Swizec Teller (<a href=\"http://codepen.io/swizec\">@swizec</a>) on <a href=\"http://codepen.io\">CodePen</a>.light</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n<p>We have a <code>Store</code> that holds the number of <code>clicks</code> and contains an <code>inc</code> action to increase the count.</p>\n<pre lang=\"javascript\">class Store {\n  @observable clicks = 0;\n\n  @action inc() {\n    this.clicks += 1;\n  }\n}\n</pre>\n<p>A not-very-smart functional stateless component renders the current count and a link to click. We use <code>onClick</code> with a bounded action to detect clicks.</p>\n<pre lang=\"javascript\">\nconst Clicky = observer(({ store }) => (\n  <div>\n    Clicks: {store.clicks}\n    <br />\n    <a href=\"#\" onClick={store.inc.bind(store)}>+1</a>\n  </div>\n));\n</pre>\n<img class=\"alignnone size-full wp-image-7246\" src=\"https://swizec.com/blog/wp-content/uploads/2016/11/clicker.gif\" width=\"470\" height=\"241\" />\n<p>Click the link, number goes up. 14 lines of actual code.</p>\n<p>Ok, we know it works with a <code>.bind</code>. Will it work without one?</p>\n<p class='codepen'  data-height='265' data-theme-id='light' data-slug-hash='LbzdBO' data-default-tab='js,result' data-animations='run' data-editable='true' data-embed-version='2'>\nSee the Pen <a href=\"http://codepen.io/swizec/pen/LbzdBO/\">React, mobx, bind example, pt2</a> by Swizec Teller (<a href=\"http://codepen.io/swizec\">@swizec</a>) on <a href=\"http://codepen.io\">CodePen</a>.light</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n<p>We expanded our <code>Clicky</code> component with a link that uses an unbounded <code>store.inc</code> action call as the <code>onClick</code> callback.</p>\n<pre lang=\"javascript\">\nconst Clicky = observer(({ store }) => (\n  <div>\n    Clicks: {store.clicks}\n    <br />\n    <a href=\"#\" onClick={store.inc.bind(store)}>+1 bound</a>\n    <br />\n    <a href=\"#\" onClick={store.inc}>+1 unbound</a>\n  </div>\n));\n</pre>\n<img class=\"alignnone size-full wp-image-7245\" src=\"https://swizec.com/blog/wp-content/uploads/2016/11/clicker2.gif\" width=\"470\" height=\"241\" />\n<p>Well, that didn&#8217;t work. ?</p>\n<p>The error reads <code>Uncaught TypeError: Cannot read property 'clicks' of undefined</code>. Looks like <code>this</code> isn&#8217;t defined inside our callback.</p>\n<p>Good ol&#8217; <a href=\"https://en.wikipedia.org/wiki/Scope_(computer_science)#Dynamic_scoping\">dynamic scoping</a>, unintuitive as always. If that Wikipedia article doesn&#8217;t tell you much, don&#8217;t worry. It&#8217;s <em>basically</em> comp sci soup.</p>\n<p>The gist of their 800-word explanation is this: with dynamic scoping, functions are scoped to where they&#8217;re called, not where they&#8217;re defined. It doesn&#8217;t matter that <code>inc</code> is defined inside <code>Store</code>; it matters how React calls it.</p>\n<p>So how <em>does</em> React call our click callback? Let&#8217;s see.</p>\n<h2>A spelunk through a React event</h2>\n<img class=\"alignnone size-full wp-image-7243\" src=\"https://swizec.com/blog/wp-content/uploads/2016/11/Screen-Shot-2016-11-29-at-00.29.37.png\" width=\"851\" height=\"517\" srcset=\"https://swizec.com/blog/wp-content/uploads/2016/11/Screen-Shot-2016-11-29-at-00.29.37.png 851w, https://swizec.com/blog/wp-content/uploads/2016/11/Screen-Shot-2016-11-29-at-00.29.37-300x182.png 300w, https://swizec.com/blog/wp-content/uploads/2016/11/Screen-Shot-2016-11-29-at-00.29.37-768x467.png 768w\" sizes=\"(max-width: 851px) 100vw, 851px\" />\n<p>It starts with <code>dispatchEvent</code>.</p>\n<pre lang=\"javascript\">dispatchEvent: function (topLevelType, nativeEvent) {\n    if (!ReactEventListener._enabled) {\n      return;\n    }\n\n    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);\n    try {\n      // Event queue being processed in the same cycle allows\n      // `preventDefault`.\n      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);\n    } finally {\n      TopLevelCallbackBookKeeping.release(bookKeeping);\n    }\n  }\n</pre>\n<p>Looks like a function that takes native events from the browser and emits them into React&#8217;s engine in batches. That&#8217;s good for performance, great for debugging, and makes everyone&#8217;s lives easier.</p>\n<p>Our next step in the chain is <code>batchedUpdates</code>.</p>\n<pre lang=\"javascript\">var transaction = new ReactDefaultBatchingStrategyTransaction();\n\nvar ReactDefaultBatchingStrategy = {\n  isBatchingUpdates: false,\n\n  /**\n   * Call the provided function in a context within which calls to `setState`\n   * and friends are batched such that components aren't updated unnecessarily.\n   */\n  batchedUpdates: function (callback, a, b, c, d, e) {\n    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;\n\n    ReactDefaultBatchingStrategy.isBatchingUpdates = true;\n\n    // The code is written this way to avoid extra allocations\n    if (alreadyBatchingUpdates) {\n      callback(a, b, c, d, e);\n    } else {\n      transaction.perform(callback, null, a, b, c, d, e);\n    }\n  }\n};\n</pre>\n<p>Told ya it was good for performance. Just look at that comment – <em>&#8220;components aren&#8217;t updated unnecessarily&#8221;</em>.</p>\n<p>I have no idea how this thing works. It smells like some sort of <a href=\"https://en.wikipedia.org/wiki/Currying\">currying</a>.</p>\n<p>But we know our next step, eventually, is <code>transaction.perform</code>.</p>\n<pre lang=\"javascript\">\nperform: function (method, scope, a, b, c, d, e, f) {\n    !!this.isInTransaction() ? \"development\" !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;\n    var errorThrown;\n    var ret;\n    try {\n      this._isInTransaction = true;\n      // Catching errors makes debugging more difficult, so we start with\n      // errorThrown set to true before setting it to false after calling\n      // close -- if it's still set to true in the finally block, it means\n      // one of these calls threw.\n      errorThrown = true;\n      this.initializeAll(0);\n      ret = method.call(scope, a, b, c, d, e, f);\n      errorThrown = false;\n    } finally {\n      try {\n        if (errorThrown) {\n          // If `method` throws, prefer to show that stack trace over any thrown\n          // by invoking `closeAll`.\n          try {\n            this.closeAll(0);\n          } catch (err) {}\n        } else {\n          // Since `method` didn't throw, we don't want to silence the exception\n          // here.\n          this.closeAll(0);\n        }\n      } finally {\n        this._isInTransaction = false;\n      }\n    }\n    return ret;\n  },\n\n</pre>\n<p>?</p>\n<p>That&#8217;s a lot of code. Let&#8217;s focus on the bits that matter:</p>\n<pre lang=\"javascript\">\nperform: function (method, scope, a, b, c, d, e, f) {\n// ...\n      ret = method.call(scope, a, b, c, d, e, f);\n// ...\n</pre>\n<p>A-ha! The second argument is <code>scope</code>. React specifically set that to <code>null</code> when calling <code>transaction.perform</code>, and <code>function.call</code> is a JavaScript way to define a function&#8217;s scope at point of invocation.</p>\n<blockquote><p>The <code>call()</code> method calls a function with a given <code>this</code> value and arguments provided individually.</p></blockquote>\n<p>I don&#8217;t know <em>why</em> React goes out of its way to set callback scope to <code>null</code>, but I&#8217;m sure it has something to do with correctness. Better to throw an explicit error and tell the engineer to fix their code than to get the wrong <code>this</code> by accident and fuck shit up.</p>\n<p>And I&#8217;m not sure when, if ever, that <code>scope</code> argument would be something other than <code>null</code>.</p>\n<p>¯&#95;(ツ)_/¯</p>\n<h2>What did we learn</h2>\n<p>Bind your callbacks.</p>\n<p>Add a <code>.bind</code> or a fat arrow wrap -&gt; <code>() =&gt; callback()</code>. Both work.</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"f2ff538b-c2f6-58b3-a7c3-34a5f798979c"}}