{"data":{"wordpressPost":{"title":"Backbone with ES6","content":"<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">I donâ€™t know about you but Iâ€™m amazed by how many solutions there are for writing maintainable apps these days. Remember 7 years ago.</p>\n<p>&mdash; Dan Abramov (@dan_abramov) <a href=\"https://twitter.com/dan_abramov/status/770684302568849408\">August 30, 2016</a></p></blockquote>\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n<p>Ah yes, Dan Abramov. How right he is! Building maintainable apps for the browser has never been easier or more fun. Life is great.</p>\n<p>That is, if you&#8217;re Dan Abramov and you spend your days building the future of web technology. I don&#8217;t know how he built that life, but I&#8217;m impressed.</p>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/dan_abramov\">@dan_abramov</a> and here I am in the real world, looking at all these solutions, and thinking &quot;Man, 7 years from now is gonna be nice&quot;</p>\n<p>&mdash; Swizec (@Swizec) <a href=\"https://twitter.com/Swizec/status/770686430427291648\">August 30, 2016</a></p></blockquote>\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n<p>The real world is not like that. For us, building <em>businesses</em> is the important part, not building technologies. Weâ€™re building technology in the service of <em>business</em> innovation.</p>\n<p>Unless it&#8217;s a weekend hack project, or a fun toy for the soul, we don&#8217;t get to throw everything away and re-engineer from scratch every 6 months when new libraries become available. We don&#8217;t even get to do it every year.</p>\n<p>If you can&#8217;t make a business case for it, it doesn&#8217;t happen.</p>\n<p>But we do what we can. We evolve rather than rewrite. Baby step after baby step, our tech stacks become better and more fun to use. They are driven by business needs rather than creature comforts.</p>\n<p>We&#8217;re highly paid professionals, after all. You wouldn&#8217;t expect a race car driver to only drive cars with air conditioning, would you? (Hint: Thereâ€™s no such thing as AC in race cars. Itâ€™s too heavy.)</p>\n<p>All that to say that if you&#8217;re still using Backbone, you too can use ES6 classes! ?</p>\n<p>/giphy partyhard</p>\n<h2>Here&#8217;s how you do it</h2>\n<p>Let&#8217;s take a basic Backbone View. It renders as a <code>div</code> element, uses a template, and responds to user events. A click counter, for example.</p>\n<p>In traditional Backbone, it would look like this:</p>\n<pre lang=\"javascript\">\r\nvar Counter = Backbone.View.extend({\r\n\ttagName: 'div',\r\n\t\r\n\tmodel: new Backbone.Model(),\r\n\t\r\n\ttemplate: Handlebars.compile('{count} <button>++</button>'),\r\n\t\r\n\tevents: {\r\n\t\t'click button': 'buttonClick'\r\n\t},\r\n\t\r\n\tinitialize: function () {\r\n\t\tthis.model.set({count: 0});\r\n\t\t\r\n\t\tthis.listenTo(this.model, 'change', this.render);\r\n\t},\r\n\t\r\n\trender: function () {\r\n\t\tthis.$el.html(this.template(this.model.attributes));\r\n\t},\r\n\t\r\n\tbuttonClick: function () {\r\n\t\tthis.model.set({count: this.model.get('count')+1});\r\n\t}\r\n});\r\n</pre>\n<p>Cool, huh? Don&#8217;t worry if you don&#8217;t know what any of that means; you&#8217;re just not the target audience for this article. ðŸ™‚</p>\n<p>The quick explanation is that we create a View backed by an anonymous Model. The <code>model</code> holds a <code>count</code> value, we listen for <code>click</code> events on the <code>button</code> element, and we increase the <code>count</code> when they happen. And we listen for <code>change</code> events on the model to decide when to re-render.</p>\n<p>If this sounds similar to React, thatâ€™s because it is. Backbone was, and still is, very close to React in its core ideas. React just happens to implement them better and make it easier to better architect your app.</p>\n<p>That same View would look like this in ES6:</p>\n<pre lang=\"javascript\">\r\nclass Counter extends Backbone.View {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\t\r\n\t\tthis.model = new Backbone.Model({count: 0});\r\n\t\tthis.tagName = 'div';\r\n\t\tthis.template = ({ count }) => `${count} <button>++</button>`;\r\n\t\tthis.events = {\r\n\t\t\t'click button': 'buttonClick'\r\n\t\t};\r\n\t\tthis.listenTo(this.model, 'change', this.render);\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tthis.$el.html(this.template(this.model.attributes));\r\n\t}\r\n\t\r\n\tbuttonClick() {\r\n\t\tthis.model.set({count: this.model.get('count')+1});\r\n\t}\r\n}\r\n</pre>\n<p>We used <code>constructor</code> instead of <code>initialize</code>, and we moved all of the properties into that function. We also used ES6 template strings instead of Handlebars for templating, and we didn&#8217;t have to write <code>function</code> even once.</p>\n<p>Itâ€™s the same amount of code, the same amount of logic, a marginal improvement in styling, and the dubious usefulness of subclassing. Big whoop.</p>\n<p>Every other part of your codebase, new or old, can use this View the same as a traditional ES5 Backbone View. Or it can subclass. That part is easier.</p>\n<h2>But&#8230; why do this?</h2>\n<p>It feels good.</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"901e45a4-d4f2-5023-8583-8abcd105ecca"}}