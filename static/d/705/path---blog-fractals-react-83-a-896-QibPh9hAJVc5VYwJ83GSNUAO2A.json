{"data":{"wordpressPost":{"title":"Fractals in React","content":"<p>So… this started as an article about why recursion doesn&#39;t work in React. <a href=\"https://swizec.com/blog/simple-mobx-driven-modals/swizec/7166\">It <em>looks</em> like it works</a>, then you <code>npm run build</code>, and it stops working.</p>\n<p>Curious, right? Worth looking into, eh?</p>\n<p>That&#39;s not the article you&#39;re getting. It <em>started</em> as that article, then I spent 3 hours building a Pythagoras tree fractal. It&#39;s 2:30am, and is my life even real?</p>\n<p>Who the hell accidentally spends all night building fractals? Me… I guess.</p>\n<img class=\"alignnone size-full wp-image-7231\" src=\"https://swizec.com/blog/wp-content/uploads/2016/11/growing-pythagoras-tree.gif\" width=\"786\" height=\"484\" />\n<p>Pretty, innit? Built with React, and it&#39;s going to stop working when I <code>npm run build</code>. Still don&#39;t know why. I&#39;ll figure <em>that</em> out next week.</p>\n<p>Here&#39;s how the <a href=\"https://en.wikipedia.org/wiki/Pythagoras_tree_(fractal)\">Pythagoras tree</a> works:</p>\n<blockquote><p>\nThe construction of the Pythagoras tree begins with a square. Upon this square are constructed two squares, each scaled down by a linear factor of ½√2, such that the corners of the squares coincide pairwise. The same procedure is then applied recursively to the two smaller squares, ad infinitum.\n</p></blockquote>\n<p>?</p>\n<p>That becomes four bullet points:</p>\n<ul>\n<li>1 component called <code>&lt;Pythagoras &gt;</code></li>\n<li>draws rectangle</li>\n<li>calculates props for next 2 rectangles</li>\n<li><code>&lt;Pythagoras&gt;&lt;Pythagoras&gt;</code></li>\n</ul>\n<p>Which turns into some 30 lines of code:</p>\n<pre lang=\"javascript\">\nimport React from 'react';\nimport { interpolateViridis } from 'd3-scale';\n\nconst Factor = .5*Math.sqrt(2);\n\nconst Pythagoras = ({ maxlvl, w, x, y, lvl, left, right }) => {\n    if (lvl > maxlvl || w < 1) {\n        return null;\n    }\n\n    const nextLeft = Factor*w,\n          nextRight = Factor*w,\n          d = nextLeft + nextRight + w,\n          A = 45,\n          B = 45;\n\n    let rotate = '';\n\n    if (left) {\n        rotate = `rotate(${-A} 0 ${w})`;\n    }else if (right) {\n        rotate = `rotate(${B} ${w} ${w})`;\n    }\n\n    return (\n        <g transform={`translate(${x} ${y}) ${rotate}`}>\n            <rect width={w} height={w}\n                  x={0} y={0}\n                  style={{fill: interpolateViridis(lvl/maxlvl)}} />\n\n            <Pythagoras w={nextLeft}\n                        x={w-nextLeft} y={-nextLeft} lvl={lvl+1} maxlvl={maxlvl}\n                        right />\n\n            <Pythagoras w={nextRight}\n                        x={0} y={-nextRight} lvl={lvl+1} maxlvl={maxlvl}\n                        left />\n        </g>\n    );\n};\n\n\nexport default Pythagoras;\n</pre>\n<p>Beautiful. Let me explain.</p>\n<p><code>interpolateViridis</code> is a <a href=\"https://github.com/d3/d3-scale\">d3-scale</a> that gives beautiful colors. Call it with an argument in <code>[0, 1]</code> and it returns a color.</p>\n<p><code>Factor</code> is the constant linear factor. We use it to calculate the sides of future rectangles.</p>\n<p><code>d</code> is the diameter of the triangle formed by the current square and two future squares. More on that later.</p>\n<p><code>A</code> and <code>B</code> are angles for each future rectangle. Set to 45 degrees statically.</p>\n<h2>Then we start drawing.</h2>\n<p>If we&#39;re in a <code>left</code> rectangle, we set up a left rotation; if <code>right</code> then a right rotation. <code>rotate()</code> is an SVG transformation that rotates the current coordinate system.</p>\n<p>To draw the rectangle, we:</p>\n<ul>\n<li><code>translate</code> to <code>(x, y</code>), that means &quot;move there&quot;</li>\n<li>add the rotation</li>\n<li>now our coordinate system is moved and rotate</li>\n<li>draw a rectangle at <code>(0, 0)</code></li>\n<li>add two <code>&lt;Pythagoras&gt;</code> with new parameters</li>\n</ul>\n<p>And that&#39;s how you build a fractal in React. It won&#39;t work in production, but it sure looks pretty on your localhost.</p>\n<img class=\"alignnone size-full wp-image-7228\" src=\"https://swizec.com/blog/wp-content/uploads/2016/11/growing-pythagoras-tree-1.gif\" width=\"786\" height=\"484\" />\n<p>The animation is done in <a href=\"https://github.com/Swizec/react-fractals/blob/master/src/App.js\">App.js</a> with a timer that updates the <code>maxlvl</code> prop every 500ms. Calling the root node of <code>Pythagoras</code> looks like this:</p>\n<pre lang=\"javascript\">\n   <Pythagoras w={100}\n               x={320-50}\n               y={480-100}\n               lvl={0}\n               maxlvl={this.state.currentMax}/>\n</pre>\n<p>Start <code>lvl</code> at <code>0</code> and set the <code>maxlvl</code>. Those are important. At <code>maxlvl</code> past 12 or 13, it stops working. It takes too much CPU power to ever render.</p>\n<p>Yes, I tried. The naive algorithm isn&#39;t good enough. You could optimize by taking calculations out of recursion and preparing them in advance.</p>\n<h2>The part I can&#39;t figure out</h2>\n<p>Look at <a href=\"http://andrew-hoyer.com/experiments/fractals/\">Andrew Hoyer&#39;s</a> Pythagoras tree. That thing is beautiful and flexible and dances like tree-shaped worm.</p>\n<img class=\"alignnone size-full wp-image-7232\" src=\"https://swizec.com/blog/wp-content/uploads/2016/11/andrew-hoyer-tree.gif\" width=\"786\" height=\"484\" />\n<p>?</p>\n<p>I can&#39;t figure out how to calculate those angles and rectangle sizes. I know that using <code>.5</code> in the <code>Factor</code> is for <code>45</code> degree angles.</p>\n<p>You can change the ratio by using a <code>.3</code> and <code>.7</code> factor for each side. Then it stops working with <code>45</code> degree angles yeah.</p>\n<img class=\"alignnone size-full wp-image-7230\" src=\"https://swizec.com/blog/wp-content/uploads/2016/11/broken-tree.gif\" width=\"786\" height=\"484\" />\n<p>Ok, that was expected. Since you know all the sides, you should be able to apply the <a href=\"https://en.wikipedia.org/wiki/Law_of_sines\">Law of Sines</a> to calculate the angle.</p>\n<pre lang=\"javascript\">\n const nextLeft = .3*Factor*w,\n          nextRight = .7*Factor*w,\n          d = nextLeft + nextRight + w,\n          A = Math.degrees(Math.asin(nextRight/d)),\n          B = Math.degrees(Math.asin(nextLeft/d));\n</pre>\n<img class=\"alignnone size-full wp-image-7229\" src=\"https://swizec.com/blog/wp-content/uploads/2016/11/broken-tree2.gif\" width=\"786\" height=\"484\" />\n<p>I can&#39;t figure it out. I&#39;m pretty sure I&#39;m applying the Law of Sines correctly, but the numbers it throws out are wrong.</p>\n<p>Halp ?</p>\n<p>PS: Here&#39;s a paper that describes <a href=\"https://pdfs.semanticscholar.org/08dd/831514db573cb9fd2b993a5814007888117a.pdf\">using Pythagoras trees as data structures</a>. Sort of.</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"13ecded8-c087-538d-8cbc-9202aca9c69a"}}