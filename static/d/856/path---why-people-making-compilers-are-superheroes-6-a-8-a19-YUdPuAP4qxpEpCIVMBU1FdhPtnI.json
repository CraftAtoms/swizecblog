{"data":{"wordpressPost":{"title":"Why people making compilers are superheroes","content":"<p>So you want to create a <a class=\"zem_slink\" title=\"Programming language\" href=\"http://en.wikipedia.org/wiki/Programming_language\" rel=\"wikipedia\" target=\"_blank\">programming language</a>? Awesome!</p>\n<div style=\"width: 310px\" class=\"wp-caption alignright\"><a href=\"http://commons.wikipedia.org/wiki/File:Placeholder_male_superhero_c.png\" target=\"_blank\"><img class=\"zemanta-img-inserted zemanta-img-configured\" title=\"English: Male superhero placeholder with copyr...\" src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/c/cd/Placeholder_male_superhero_c.png/300px-Placeholder_male_superhero_c.png\" alt=\"English: Male superhero placeholder with copyr...\" width=\"300\" height=\"355\" /></a><p class=\"wp-caption-text\">English: Male superhero placeholder with copyright symbol (Photo credit: Wikipedia)</p></div>\n<p>Should you do it? Definitely not. Better yet, go ahead, but don&#8217;t take it lightly.</p>\n<p>When I created my first programming (scripting? is there even a difference?) language I was about 17 &#8211; a lovely templating language that through a series of regexes was transformed into PHP code. Had everything from variables to functions and loops. Wonderful.</p>\n<p>My next foray into language creation was about two years ago. Older and wiser, I knew I wanted to create <em>&#8220;a lisp without parentheses&#8221;</em>. Cool huh?</p>\n<p>Failed as soon as I realized I don&#8217;t know how to parse &#8220;if this then if this then that else that&#8221;</p>\n<p>Remember, no parentheses.</p>\n<h2>Building a real compiler</h2>\n<p>This semester I <em>jumped</em> at the chance to take a compilers class &#8211; we built a compiler for a stripped down version of Pascal. Practically from scratch.</p>\n<p>Turns out that <em>&#8220;if this then if this then that else that&#8221; </em>cannot be parsed with a linear grammar &#8211; you need an &#8220;elif&#8221; construct or parentheses. Using a recursive grammar would be too slow.</p>\n<p>Writing a compiler is fun! And by fun I mean it makes you feel like driving a metal rod through your brain. It&#8217;s fun in that rewarding <em>Holy crap, did I just survive that!? I survived _that_? Damn.</em></p>\n<div style=\"width: 310px\" class=\"wp-caption alignright\"><a href=\"http://en.wikipedia.org/wiki/File:Python_add5_parse.png\" target=\"_blank\"><img class=\"zemanta-img-inserted zemanta-img-configured\" title=\"Parse tree of Python code with inset tokenization\" src=\"http://upload.wikimedia.org/wikipedia/en/thumb/a/ac/Python_add5_parse.png/300px-Python_add5_parse.png\" alt=\"Parse tree of Python code with inset tokenization\" width=\"300\" height=\"230\" /></a><p class=\"wp-caption-text\">Parse tree of Python code with inset tokenization (Photo credit: Wikipedia)</p></div>\n<p>The complexity is immense. The difficulty of discovering there&#8217;s a problem at all &#8230; even immenser.</p>\n<p>A compiler works in several stages:</p>\n<ol>\n<li><strong>Lexical analysis</strong> &#8211; parses out comments and whitespace, unifies the language used (a list of lexemes, you use JFlex or something)</li>\n<li><strong><a class=\"zem_slink\" title=\"Parsing\" href=\"http://en.wikipedia.org/wiki/Parsing\" rel=\"wikipedia\" target=\"_blank\">Syntactical analysis</a></strong> &#8211; checks the syntax is correct and builds the <a class=\"zem_slink\" title=\"Abstract syntax tree\" href=\"http://en.wikipedia.org/wiki/Abstract_syntax_tree\" rel=\"wikipedia\" target=\"_blank\">Abstract Syntax Tree</a> (using a linear grammar with a tool like java_cup)</li>\n<li><strong><a class=\"zem_slink\" title=\"Compiler\" href=\"http://en.wikipedia.org/wiki/Compiler\" rel=\"wikipedia\" target=\"_blank\">Semantic analysis</a></strong> &#8211; takes care of the semantics of the language (only call functions, supply correct parameters etc. &#8211; type checking)</li>\n<li><strong>Frames</strong> &#8211; essentially memory management. Give functions some breathing space, pointers to their memory and so on.</li>\n<li><strong><a class=\"zem_slink\" title=\"Code generation (compiler)\" href=\"http://en.wikipedia.org/wiki/Code_generation_%28compiler%29\" rel=\"wikipedia\" target=\"_blank\">Intermediate code generation</a></strong> &#8211; this stage turns the AST into a tree of assembler-like instructions</li>\n<li><strong>Code linearization</strong> &#8211; next step is to change that tree into a linear set of instructions, make sure registers are used well and so on. At this point you can run an interpreter.</li>\n<li>There are a few more stages before reaching <a class=\"zem_slink\" title=\"Machine code\" href=\"http://en.wikipedia.org/wiki/Machine_code\" rel=\"wikipedia\" target=\"_blank\">machine code</a>; luckily we stopped here.</li>\n</ol>\n<p>The really fun part is that, given a random issue, any of those stages can be the problem. Even though separately they all look like they&#8217;re working perfectly.</p>\n<h2>The debugging</h2>\n<p>The debugging &#8230; oh god the debugging. This relatively simple compiler is beyond a doubt the toughest little bastard I have ever had the pleasure of fixing.</p>\n<p>For starters, you don&#8217;t even know if there is or isn&#8217;t a bug. Your only chance at debugging (and finding the bugs in the first place) is to write code in the target language and hope they break something.</p>\n<ol>\n<li>Compile the compiler, see Java devours it and all is well</li>\n<li>Run the compiler, there are no runtime errors</li>\n<li>Write some code in the target language</li>\n<li>Compile+run with your compiler/interpreter</li>\n</ol>\n<p>One of two things will happen. The code will run smoothly and output the correct result.</p>\n<div style=\"width: 310px\" class=\"wp-caption alignright\"><a href=\"http://commons.wikipedia.org/wiki/File:FPGARetrocomputing.jpg\" target=\"_blank\"><img class=\"zemanta-img-inserted zemanta-img-configured\" title=\"FPGARetrocomputing\" src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/c/c9/FPGARetrocomputing.jpg/300px-FPGARetrocomputing.jpg\" alt=\"FPGARetrocomputing\" width=\"300\" height=\"343\" /></a><p class=\"wp-caption-text\">FPGARetrocomputing (Photo credit: Wikipedia)</p></div>\n<p>Or there will be a syntax error. Or a semantic error. Or the result will be simply <em>wrong</em>.</p>\n<p>You now have to carefully look through the example code and decide that it is in fact correct, written properly and <em>should</em> work. Remember, you cannot test it anywhere else, because you are creating the compiler. In a class setting, your mates can help with their compilers (which are also be buggy), if you&#8217;re creating a new language &#8211; you&#8217;re on your own.</p>\n<p>Once you&#8217;ve decided the target code is correct it&#8217;s time to look through your compiler.</p>\n<p>In the case of syntax/semantic errors the task is simple &#8211; look at the output of the appropriate stage and decide that after several months of everything working, hey your grammar is actually wrong. Or hey, your <a class=\"zem_slink\" title=\"Type system\" href=\"http://en.wikipedia.org/wiki/Type_system\" rel=\"wikipedia\" target=\"_blank\">type checker</a> is actually doing that one thing wrong. Or maybe your name checker is being silly &#8230; whatever.</p>\n<p>Easily fixed.</p>\n<p>The really nasty buggers are those logical errors &#8211; the code didn&#8217;t come up with the right result. There is no real symptom to look at. Your only hope of success is carefully inspecting the <a class=\"zem_slink\" title=\"Bytecode\" href=\"http://en.wikipedia.org/wiki/Bytecode\" rel=\"wikipedia\" target=\"_blank\">intermediate code</a> and seeing if anything looks wrong.</p>\n<p>Even once you&#8217;ve found the problem, there&#8217;s still the issue of what&#8217;s actually causing it.</p>\n<p>For instance: I was chasing a bug for <em>days</em>. Arrays were overwriting their neighbours in a record &#8230; turns out my sample code wasn&#8217;t properly reserving memory and shouldn&#8217;t be working anyway. That was fun.</p>\n<h2>Superheroes</h2>\n<p>And keep in mind that finding the bugs in the first place is <strong>really hard<em>. </em></strong>The professor gave my very buggy compiler a 100%. Simply because every program <em>he</em> ran worked.</p>\n<p>That&#8217;s why it can take decades to discover a bug in a compiler used by millions of people. And how many buggy compilers are out there when people just assume their code is the problem and change it?</p>\n<p>Seriously, the people out there who make compilers and languages used by millions of people are <em>superheroes.</em> I can&#8217;t imagine doing that and keep even a semblance of my fragile sanity.</p>\n<img class=\"alignnone\" title=\"Superheroes\" src=\"http://1.bp.blogspot.com/--bZymaKlKOg/T6fxqifZAcI/AAAAAAAAudI/fGph9nXdrrY/s1600/20090528_Marvel_Superheroes-742088.jpg\" alt=\"Superheroes\" width=\"500\" height=\"330\" />\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles</h6>\n<ul class=\"zemanta-article-ul zemanta-article-ul-image\" style=\"margin-left: 0; display: inline-block; list-style-type: none;\">\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"display: inline-block; vertical-align: top; text-align: left; font-size: 12px; width: 80px; height: 240px; margin: 10px 40px 20px 0px; zoom: 1; *display: inline;\"><a href=\"http://scientopia.org/blogs/goodmath/2012/06/10/a-neat-trick-with-partial-evalutors/\" target=\"_blank\"><img style=\"padding: 0; margin: 0 10px 10px 0; border: 0; display: block; box-shadow: 1px 1px 3px #999;\" src=\"http://i.zemanta.com/noimg_09_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; width: 80px; height: 90px; overflow: hidden; text-decoration: none; line-height: 14pt;\" href=\"http://scientopia.org/blogs/goodmath/2012/06/10/a-neat-trick-with-partial-evalutors/\" target=\"_blank\">A Neat Trick with Partial Evalutors</a>\n<div style=\"clear: both; margin: 10px 0 10px 0;\">\n<hr style=\"margin: 0;\" />\n</div>\n</li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"display: inline-block; vertical-align: top; text-align: left; font-size: 12px; width: 80px; height: 240px; margin: 10px 40px 20px 0px; zoom: 1; *display: inline;\"><a href=\"http://www.drdobbs.com/architecture-and-design/240001128\" target=\"_blank\"><img style=\"padding: 0; margin: 0 10px 10px 0; border: 0; display: block; box-shadow: 1px 1px 3px #999;\" src=\"http://i.zemanta.com/91459884_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; width: 80px; height: 90px; overflow: hidden; text-decoration: none; line-height: 14pt;\" href=\"http://www.drdobbs.com/architecture-and-design/240001128\" target=\"_blank\">The Design of LLVM</a>\n<div style=\"clear: both; margin: 10px 0 10px 0;\">\n<hr style=\"margin: 0;\" />\n</div>\n</li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"display: inline-block; vertical-align: top; text-align: left; font-size: 12px; width: 80px; height: 240px; margin: 10px 40px 20px 0px; zoom: 1; *display: inline;\"><a href=\"http://theindustry.cc/2012/05/14/helvetica-superheros-seriously/\" target=\"_blank\"><img style=\"padding: 0; margin: 0 10px 10px 0; border: 0; display: block; box-shadow: 1px 1px 3px #999;\" src=\"http://i.zemanta.com/88904330_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; width: 80px; height: 90px; overflow: hidden; text-decoration: none; line-height: 14pt;\" href=\"http://theindustry.cc/2012/05/14/helvetica-superheros-seriously/\" target=\"_blank\">Helvetica Superheros, Seriously</a>\n<div style=\"clear: both; margin: 10px 0 10px 0;\">\n<hr style=\"margin: 0;\" />\n</div>\n</li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"display: inline-block; vertical-align: top; text-align: left; font-size: 12px; width: 80px; height: 240px; margin: 10px 40px 20px 0px; zoom: 1; *display: inline;\"><a href=\"http://nearfetching.wordpress.com/2012/04/28/compilers/\" target=\"_blank\"><img style=\"padding: 0; margin: 0 10px 10px 0; border: 0; display: block; box-shadow: 1px 1px 3px #999;\" src=\"http://i.zemanta.com/noimg_11_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; width: 80px; height: 90px; overflow: hidden; text-decoration: none; line-height: 14pt;\" href=\"http://nearfetching.wordpress.com/2012/04/28/compilers/\" target=\"_blank\">Compilers</a>\n<div style=\"clear: both; margin: 10px 0 10px 0;\">\n<hr style=\"margin: 0;\" />\n</div>\n</li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"display: inline-block; vertical-align: top; text-align: left; font-size: 12px; width: 80px; height: 240px; margin: 10px 40px 20px 0px; zoom: 1; *display: inline;\"><a href=\"https://www.ibm.com/developerworks/mydeveloperworks/blogs/a9ba1efe-b731-4317-9724-a181d6155e3a/entry/maximo_scripting_script_compilation_and_caching1\" target=\"_blank\"><img style=\"padding: 0; margin: 0 10px 10px 0; border: 0; display: block; box-shadow: 1px 1px 3px #999;\" src=\"http://i.zemanta.com/noimg_10_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; width: 80px; height: 90px; overflow: hidden; text-decoration: none; line-height: 14pt;\" href=\"https://www.ibm.com/developerworks/mydeveloperworks/blogs/a9ba1efe-b731-4317-9724-a181d6155e3a/entry/maximo_scripting_script_compilation_and_caching1\" target=\"_blank\">Maximo Scripting: Script compilation and caching</a>\n<div style=\"clear: both; margin: 10px 0 10px 0;\">\n<hr style=\"margin: 0;\" />\n</div>\n</li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/?px\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=ceb2ae57-e933-4cb7-9d1f-9a630885c8d1\" alt=\"Enhanced by Zemanta\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"f06f4736-3196-54f0-a213-650c962fa5ba"}}