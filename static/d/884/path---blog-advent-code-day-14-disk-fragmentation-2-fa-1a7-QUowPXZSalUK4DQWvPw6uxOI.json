{"data":{"wordpressPost":{"title":"Advent of Code Day 14 ‚Äì¬†Disk Fragmentation","content":"<figure><div style=\"width: 610px\" class=\"wp-caption\"><img src=\"https://swizec.com/blog/wp-content/uploads/2017/12/carbon-day14-star1-1024x602.png\" alt=\"Day 14 was trivial after I solved Day 10\" width=\"600\"/><p class=\"wp-caption-text\">Day 14 was trivial after I solved Day 10</p></div></figure>\n<p><iframe width=\"580\" height=\"326\" src=\"https://www.youtube.com/embed/e9duNOVdHFk?feature=oembed\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen></iframe></p>\n<p>Advent of Code Day 14 was a strange, strange thing. At first, it made no sense. Something about disk fragmentation and encoding addresses as knot hashes and whatnot.</p>\n<p>What the hell is a knot hash? O.o</p>\n<p>Turns out it&#8217;s from Advent of Code Day 10. Conveniently called &#8220;knot hash&#8221;. On Day 10, you build a general hashing function following this schema üëá</p>\n<img class=\"alignnone size-full wp-image-7968\" src=\"https://swizec.com/blog/wp-content/uploads/2017/12/screen_shot_2017-12-14_at_08.50.05.png\" alt=\"\" srcset=\"https://swizec.com/blog/wp-content/uploads/2017/12/screen_shot_2017-12-14_at_08.50.05.png 898w, https://swizec.com/blog/wp-content/uploads/2017/12/screen_shot_2017-12-14_at_08.50.05-300x84.png 300w, https://swizec.com/blog/wp-content/uploads/2017/12/screen_shot_2017-12-14_at_08.50.05-768x216.png 768w\" sizes=\"(max-width: 898px) 100vw, 898px\" />\n<p>Don&#8217;t worry, that image didn&#8217;t tell me anything either.</p>\n<p>AoC&#8217;s description of the process makes more sense</p>\n<blockquote><p>To achieve this, begin with a list of numbers from 0 to 255, a current position which begins at 0 (the first element in the list), a skip size (which starts at 0), and a sequence of lengths (your puzzle input). Then, for each length:</p></blockquote>\n<blockquote><p>Reverse the order of that length of elements in the list, starting with the element at the current position.</p>\n<p>Move the current position forward by that length plus the skip size.</p>\n<p>Increase the skip size by one.</p>\n<p>The list is circular; if the current position and the length try to reverse elements beyond the end of the list, the operation reverses using as many extra elements as it needs from the front of the list. If the current position moves past the end of the list, it wraps around to the front. Lengths larger than the size of the list are invalid.</p></blockquote>\n<p>Okay. So that&#8217;s difficult to follow, and it&#8217;s kind of annoying to build, but Day 10 boils down to what we do best in our day-to-day programming: Follow instructions to implement a random piece of business logic.</p>\n<h2>Day 10, star 1</h2>\n<p>The puzzle is the instructions. We just gotta write the correct code. In Python, mine looks like this:</p>\n<pre lang=\"python\">def knot_1round(pos, skip, lengths, input):\n    for length in lengths:\n        if pos+length &gt; len(input):\n            wrap = (pos+length)%len(input)\n        else:\n            wrap = 0\n\n        nums = input[pos:pos+length] + input[:wrap]\n        nums = list(reversed(nums))\n        \n        if wrap &gt; 0:\n            input = nums[-wrap:] + input[wrap:pos] + nums[:-wrap] + input[pos+length:]\n        else:\n            input = input[:pos] + nums + input[pos+length:]\n\n        pos = (pos+length+skip)%len(input)\n        skip += 1\n\n    return pos, skip, input\n</pre>\n<p>Boring, predictable, nothing special. Go through the list of [0 .. 255] numbers, use input lengths, do the knot hashing. The neat part of this code is Python&#8217;s spectacular support for list slicing and dicing.</p>\n<p>You can use the <code>:</code> operator to get different parts of a list. Left side means &#8220;up to&#8221; and right side means &#8220;after&#8221;. You can use negative numbers.</p>\n<p>Dealing with the circular wraparound part was mindbendy and a bit tedious. You can&#8217;t just cut the list and put it together. You have to use a bunch of different bits and sections.</p>\n<h2>Day 10, star 2</h2>\n<p>For the second part, we assembled 64 single rounds of knot hashing into a full knot hash. Again, just following instructions and most of the hard work coming down to understanding those instructions.</p>\n<p>No fun insights needed üò¥</p>\n<pre lang=\"python\">def knot(input):\n    lengths = [ord(str(c)) for c in input] + [17, 31, 73, 47, 23]\n\n    pos = 0\n    skip = 0\n    numbers = range(0, 256)\n    \n    for i in xrange(64):\n        pos, skip, numbers = knot_1round(pos, skip, lengths, numbers)\n        \n    blocks = [reduce(lambda b, n: b^n, numbers[i:i+16]) for i in xrange(0, len(numbers), 16)]\n\n    print numbers[0:16]\n\n    return \"\".join([\"%0.2X\" % c for c in blocks])\n</pre>\n<p>You take the input, turn each character into its ASCII number, add a static salt thing <code>[17, 31, 73, 47, 23]</code>, then run the knot round 64 times. Make sure each round feeds the current position and skip size into the next one.</p>\n<p>In the end, you take that result and parse it back into a hexadecimal string.</p>\n<p>So an empty string input produces <code>a2582a3a0e66e6e86e3812dcb672a272</code>, for example.</p>\n<p><em>shrug emoji</em></p>\n<h2>Day 14, star 1</h2>\n<p>With our general knot hashing function in hand, we could take on Day 14. Only took me 70 minutes to get here üòÇ</p>\n<p>But Day 14, the first part at least, was trivial now that the hashing made sense.</p>\n<p>The goal is to figure out how many blocks of a disk space are occupied. You are given an input string, and you compute it into 128 knot hashes, then you transform those knot hashes into binary, and count how many 1&#8217;s there are.</p>\n<p>Again, in Python, it looks like this üëá</p>\n<pre lang=\"python\">inputs = [input+\"-\"+str(i) for i in xrange(128)]\n\ndef star1(inputs):\n    used = 0\n\n    for input in inputs:\n        hash = knot(input)\n        used += sum(bin(int(c, 16))[2:].count('1') for c in hash)\n\n    return used\n</pre>\n<p>Make a list of 128 inputs, walk through it, calculate hashes, transform them into binary, count the 1&#8217;s and sum it up. Done.</p>\n<p>That was easy.</p>\n<p>Then <strong>Star 2</strong> came along, and it asked to count <em>regions</em>. That is adjacent 1&#8217;s that are touching.</p>\n<p>So I said, ‚ÄúScrew this, I&#8217;m tired,‚Äù and went to bed. üò¥</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"c7442d93-36a2-5dca-ab15-7a43fffbcac6"}}