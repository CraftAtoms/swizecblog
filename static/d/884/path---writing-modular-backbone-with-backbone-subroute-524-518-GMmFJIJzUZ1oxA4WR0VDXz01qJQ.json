{"data":{"wordpressPost":{"title":"Writing modular Backbone with Backbone.SubRoute","content":"<p>Working on a complicated frontend web app, Backbone soon becomes unwieldy. Routes definitions grow and grow, views steal each other&#8217;s actions and parts of the code try to become independent modules.</p>\n<p>This is the problem I faced a few weeks ago while working on the fanciest signup funnel I ever helped create. Visitors would see the splash page, create their cart, revise it, sign up, add billing and shipping info, and finally checkout without ever refreshing the page.</p>\n<p>A daunting challenge only made worse by the complexity of components involved. We needed a full-blown inventory listing, a full-blown cart editor and we even added some shiny bits to the billing and shipping forms. The funnel changes into an accordion after the first step.</p>\n<p>Oh and the user can refresh at any point in the funnel without losing their place.</p>\n<p>To divide work among the team, we took a straight-forward modular approach: a module handles the whole funnel, submodules take care of each step. This way everyone can focus on their own piece of the funnel and the javascript code can be reused when making the standalone versions of each step for signed-in users.</p>\n<h2>The skeleton</h2>\n<p><a href=\"http://geekdave.com/2012/04/05/module-specific-subroutes-in-backbone/\">Backbone.SubRoute</a> makes this approach possible by letting you create Backbone routers attached at a certain path in the URL. By doing something like <code>var bla = new SubBla(\"/bla\", â€¦)</code> you create a self-contained Backbone app that handles everything under <code>/bla</code> and doesn&#8217;t care about the outside world.</p>\n<p>We didn&#8217;t like how the official docs recommend going about this, so we made it automagical-er.</p>\n<p>A simple <code>app_skeleton.js</code> file holds the entire application together and loads modules when they&#8217;re needed.</p>\n<pre lang=\"javascript\">var YourApp = window.YourApp = {Routers: {}};\r\n\r\nYourApp.Router = Backbone.Router.extend({\r\n    routes: {\r\n        \"\": \"invokeRootModule\",\r\n        \":module(/*subroute)\" : \"invokeModule\"\r\n    },\r\n\r\n    invokeRootModule: function () {\r\n        this.invokeModule(\"root\");\r\n    },\r\n\r\n    invokeModule: function (module, subroute) {\r\n        module = module.toLowerCase().capitalize();\r\n\r\n        if (!YourApp.Routers[module]) {\r\n            YourApp.Routers[module] = \r\n                new YourApp[module].Router(module.toLowerCase()+\"/\",\r\n                                           {createTrailingSlashRoutes: true});\r\n        }\r\n    }\r\n});</pre>\n<p>We agree to register all our modules as <code>window.YourApp.Module.Router</code>. This lets us put every module in its own file and creates a predictable interface for creating instances of sub routers.</p>\n<p>That was easy, now all we need is a submodule.</p>\n<h2>A module</h2>\n<p>Modules work the same as standalone Backbone applications. They have views and collections and models and everything is held together by a router. You just have to conform to what app skeleton expects.</p>\n<p>A simple module might look like this:</p>\n<pre lang=\"javascript\">(function ($) {\r\n    YourApp.Root = {};\r\n\r\n    YourApp.Root.Router = Backbone.SubRoute.extend({\r\n        routes: {\r\n            \"(:step)\": \"step\"\r\n        },\r\n\r\n        initialize: function () {\r\n            // do stuff\r\n        },\r\n\r\n        step: function () {\r\n            // something for this step\r\n        }\r\n    });\r\n\r\n})(jQuery);</pre>\n<p><code>Router</code> is the only necessary part. Everything else is added to taste. We rely on the router&#8217;s initialize function as the entry point into the module, so all initialization should happen in there.</p>\n<h2>Sub sub modules</h2>\n<p>Let&#8217;s make things interesting; the module is called <code>Root</code> because it&#8217;s going to handle submodules of its own &#8211; funnel steps in our case. <code>Root</code> loads them on the home page, <code>app_skeleton</code> loads them on standalone pages.</p>\n<p>For some reason dynamically instantiating submodules was not an option in this case. Not sure why, but it probably had to do with listening to events between submodules. Yes, unclean, but there&#8217;s no reason to go overboard with architecture principles. Sometimes you just have to get shit done.</p>\n<p>Root&#8217;s initialize becomes something like this:</p>\n<pre lang=\"javascript\">        initialize: function () {\r\n            this.subrouters = {};\r\n\r\n            this.subrouters.step1 = new YourApp.Step1.Router(\"base/step1/\");\r\n            this.subrouters.step2 = new YourApp.Step2.Router(\"base/step2/\");\r\n            // ...\r\n\r\n            this.__listenToSubrouters();\r\n\r\n            // other stuff\r\n        },</pre>\n<p>Every subrouter is instantiated on initialize. If we want to change our views when particular submodules are active, we have to listen to their <code>route</code> events because they steal routing from their parent. For instance, we had to make sure the accordion was visible, splash step was hidden and so on.</p>\n<pre lang=\"javascript\">        __listenToSubrouters: function () {\r\n            _.keys(this.subrouters).map(_.bind(function (router) {\r\n                this.listenTo(this.subrouters[router], \r\n                              \"route\", \r\n                              _.bind(function () { \r\n                                  this.step(router, \"\", \r\n                                                 {dont_navigate: true}); \r\n                              }, this));\r\n            }, this));\r\n        },</pre>\n<p><code>__listenToSubrouters</code> goes through all the instantiated routers and makes sure to call the <code>step</code> function when a submodule does something.</p>\n<p>The <code>step</code> function becomes something like this:</p>\n<pre lang=\"javascript\">        step: function(step, subpath, options) {\r\n            // do view stuff here\r\n\r\n            subpath = subpath || \"\";\r\n\r\n            if (this.subrouters[step] &amp;&amp; !(options &amp;&amp; options.dont_navigate)) {\r\n                this.subrouters[step].navigate(subpath, {trigger: true});\r\n            }\r\n        }</pre>\n<p>This makes sure to <code>.navigate</code> subrouters when it&#8217;s appropriate and avoid doing so when the code is reacting to a subrouter&#8217;s <code>route</code> event. I&#8217;ve left out the view stuff because that isn&#8217;t very interesting.</p>\n<h2>Win</h2>\n<p>And there you go. Backbone with a modular design that keeps modules neat, encapsulated and reusable.</p>\n<p>To make things even smoother I also added an event that triggers only when a certain step is fully visible. This helps submodules activate/deactivate their views properly because things like <a href=\"http://imakewebthings.com/jquery-waypoints/\">jQuery Waypoints</a> don&#8217;t initialize well when elements aren&#8217;t at their final positions.</p>\n<p>As for the super fancy signup process &#8211; you&#8217;ll be able to see it when <a href=\"http://www.dwellers.com/\">Dwellers</a> launches. It&#8217;s pretty great.</p>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/?px\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" alt=\"Enhanced by Zemanta\" src=\"http://img.zemanta.com/zemified_e.png?x-id=80eafc50-068a-4f40-acaf-a20b7ce2ed15\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"aa8a5078-6701-533b-a157-d71e95d6199c"}}