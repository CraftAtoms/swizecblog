{"data":{"wordpressPost":{"title":"Livecoding Recap #44: Dipping my toes in AR.js","content":"<p><em>This is a Livecoding Recap ‚Äì an almost-weekly post about interesting things discovered while livecoding. Usually shorter than 500 words. Often with pictures. Livecoding happens almost <strong>every Sunday at 2pm PDT</strong> on multiple channels. You should follow <a href=\"https://www.youtube.com/TheSwizec\">My Youtube</a> channel to catch me live.</em></p>\n<p><iframe width=\"580\" height=\"326\" src=\"https://www.youtube.com/embed/N6PvDbyvj48?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe></p>\n<p>This Sunday, we dipped our toes in <a href=\"https://github.com/jeromeetienne/AR.js\">AR.js</a>. We didn&#8217;t get very far with anything real, but fun was had and things were learned.</p>\n<blockquote class=\"imgur-embed-pub\" lang=\"en\" data-id=\"a/TGatk\"><p><a href=\"//imgur.com/TGatk\"></a></p></blockquote>\n<p><script async src=\"//s.imgur.com/min/embed.js\" charset=\"utf-8\"></script></p>\n<p>AR.js is an open source library by <a href=\"https://twitter.com/jerome_etienne\">Jerome Etienne</a> that promises to bring <em>&#8220;Efficient Augmented Reality for the Web &#8211; 60fps on mobile!&#8221;</em>. And it did. Right after I updated my phone to a beta version of iOS11.</p>\n<p>Why iOS11?</p>\n<p>Because <a href=\"https://en.wikipedia.org/wiki/Augmented_reality\">augmented reality</a> requires access to your camera. To get access to your camera, AR.js uses <a href=\"https://en.wikipedia.org/wiki/WebRTC\">WebRTC</a>. iOS doesn&#8217;t support WebRTC in any browser until iOS11, which is meant to come out in the next 3 months.</p>\n<p>You can get the beta version until it&#8217;s ready. So I did. Now I can AR üòÅ AR.js in the browser, ARKit in native. Gonna have to play with that, too.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/IOS_11\">iOS11</a> looks great btw! My iPhone 5SE is a little small for the new fluffy design, but I can appreciate that things are easier to see. Does that mean I&#8217;m getting old? ü§î</p>\n<h2>Here&#8217;s what we did to get a basic demo running</h2>\n<p>We used <code>create-react-app</code> to bootstrap an app. This proved more trouble than it was worth because AR.js doesn&#8217;t work well with <code>import</code> or <code>require()</code> statements. There&#8217;s been some work to modularize it, but it hasn&#8217;t landed yet.</p>\n<blockquote class=\"twitter-tweet\" data-width=\"550\">\n<p lang=\"en\" dir=\"ltr\">not that i know of, i do &lt;script&gt;. there is a npm contrib, but im not sure how it helps &#8211; <a href=\"https://t.co/cvZkRE3G94\">https://t.co/cvZkRE3G94</a></p>\n<p>&mdash; Jerome Etienne #ARjs (@jerome_etienne) <a href=\"https://twitter.com/jerome_etienne/status/901932703070736384\">August 27, 2017</a></p></blockquote>\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script><br />\nTo get around this, we imported AR.js and <a href=\"https://aframe.io/\">aframe</a> as <code>&lt;script&gt;</code> tags in <code>public/index.html</code>. This works well enough, but discards all the optimizations Webpack can do for us.</p>\n<pre lang=\"html\">\n<!-- public/index.html -->\n    <script src=\"https://aframe.io/releases/0.6.1/aframe.min.js\"></script>\n    <script src=\"https://jeromeetienne.github.io/AR.js/aframe/build/aframe-ar.js\"></script>\n    <script src=\"%PUBLIC_URL%/aframe-minecraft.min.js\"></script>\n    <title>React App</title>\n</pre>\n<p><code>aframe</code> gives us WebVR support. I think it creates special HTML elements we can use to build VR and AR scenes. Not sure if they count as web components or not.</p>\n<p><code>AR.js</code> gives us‚Ä¶ I&#8217;m still not sure where aframe ends and AR starts. But all the demo code we used comes from the AR.js project, so I&#8217;m sure it&#8217;s doing a lot üôÇ</p>\n<p><code>aframe-minecraft</code> is a demo of a dancing minecraft figure that Jerome uses in some of his videos. We aaaalmost got it working.</p>\n<p>We render the scene in <code>src/App.js</code> using strange HTML elements I have never seen before.</p>\n<pre lang=\"javascript\">\nimport { Scene, Entity } from 'aframe-react';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Scene artoolkit={{sourceType: 'webcam', trackingMethod: 'best'}}>\n\n                    <a-anchor hit-testing-enabled=\"true\">\n                        <a-entity minecraft minecraft-head-anim=\"yes\" minecraft-body-anim=\"hiwave\" material='opacity: 0.5' />\n                        <a-box position='0 0 0.5' material='opacity: 0.5;'></a-box>\n                    </a-anchor>\n                    <a-camera-static preset=\"hiro\" />\n                </Scene>\n            </div>\n        );\n    }\n}\n</pre>\n<p><code>App</code> is a React component that renders stuff. We&#8217;ll add more functionality next Sunday.</p>\n<p>Inside the render function, we use a combination of <code>aframe-react</code>, which is a thing wrapper on Aframe, and custom HTML elements coming from, I guess, AR.js.</p>\n<p><code>&lt;Scene&gt;</code> creates a new WebAR/WebVR scene. <code>a-entity</code> is some sort of AR entity, whatever that means. In this case, a waving Minecraft figure that is supposed to be colorful and fun, but is instead pure black.</p>\n<p>Now that I think of it, we&#8217;re probably missing texture files ü§î</p>\n<p><code>a-box</code> creates a white semi transparent box. For some reason, this was necessary to make the Minecraft figure visible. I don&#8217;t know why‚Ä¶ maybe something to do with those textures.</p>\n<p><code>a-camera-static</code> renders a full screen webcam view using the <code>\"hiro\"</code> image as an AR marker.</p>\n<p>AR.js is a marker-based augmented reality engine, which means it needs a recognizable image to attach itself to the real world. This means you can&#8217;t render your stuff on top of any random object the camera sees. You need a specific marker.</p>\n<p>Like this ‚Üí</p>\n<img src=\"https://jeromeetienne.github.io/AR.js/data/images/HIRO.jpg\" />\n<p>The experiment <a href=\"https://github.com/Swizec/ar-js-experiment\">code is on Github</a>.</p>\n<h2>Here&#8217;s what we learned about AR.js</h2>\n<p>AR.js is great, but it&#8217;s early days for WebAR and augmented reality on the web. The experience was hacky and cool.</p>\n<p>You need markers, which limits usability. We can potentially improve this with on-the-spot deep learning that turns recognized objects into markers on the fly.</p>\n<p>You need a desktop browser, which doesn&#8217;t need AR because why would it. Are you going to move your laptop around to look at augmented reality? Prob not.</p>\n<p>You need either an Android phone or iOS11. In a few months, everybody&#8217;s phone is going to support AR.js. This is huge.</p>\n<p>WebRTC requires https. This makes development annoying because <code>localhost</code> doesn&#8217;t have https, so you have to deploy on a real server if you want to test on your phone.</p>\n<p>5/7 would hack again.</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"04e8f98b-cae5-5251-a13c-20600a472b91"}}