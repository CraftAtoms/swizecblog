{"data":{"wordpressPost":{"title":"I broke AJAX in Chrome 52 ?","content":"<p><a href=\"https://swizec.com/blog/js-object-optimization-bug-in-chrome-52/swizec/6908\">This strange bug from yesterday</a> won&#8217;t let me sleep. <em>Why</em> does Chrome 52 sometimes behave like different instances of a class are the same object?</p>\n<p>Backbone&#8217;s fetch method triggers the bug. But maybe that&#8217;s not the real issue? I&#8217;d hate to submit a bug report to Chrome project only to be told <em>&#8220;Fool, that&#8217;s a Backbone issue.&#8221;</em></p>\n<p>It&#8217;s terrifying to tell the Chrome team they made a mistake.</p>\n<p>This is what yesterday&#8217;s repro code looks like:</p>\n<pre lang=\"javascript\">\r\nvar BugModel = Backbone.Model.extend({\r\n    url: \"bla.json\"\r\n});\r\n\r\nlet bug = new BugModel();\r\nbug.fetch({\r\n    success: () => {\r\n        console.log('fetch 1'); // prints\r\n        doWeirdness(bug);\r\n    }\r\n});\r\n\r\nfunction doWeirdness(bug) {\r\n    let newBug = new BugModel({id: 1});\r\n\r\n    console.log('about to re-fetch'); // prings\r\n\r\n    newBug.fetch({\r\n        success: () => console.log('fetch 2', newBug), // doesn't print\r\n        error: () => console.log('error')\r\n    });\r\n    newBug.fetch({\r\n       success: () => console.log('fetch 3') // prints\r\n       });\r\n}\r\n</pre>\n<img src=\"http://swizec.com/blog/wp-content/uploads/2016/08/chrome-eats-objects.gif\" alt=\"2 fetches, 1 callback\" class=\"alignnone size-full wp-image-6909\" />\n<p>If you press Cmd+R, the bug happens. If you press Cmd+Shift+R, it does not. That&#8217;s a new clue that points at either Chrome&#8217;s speed optimizations, or worse, the network stack. Can we call it a network stack? I guess Chrome <em>is</em> almost an operating system at this point …</p>\n<p>Adding <code>console.log(newBug == bug)</code> prints <code>false</code>, which implies that Chrome does <em>not</em> think both instances are the same object. This invalidates my original hypothesis. ?</p>\n<p>So what does Backbone&#8217;s <code>Model.fetch</code> method do?</p>\n<pre lang=\"javascript\">\r\nfetch: function(options) {\r\n      options = _.extend({parse: true}, options);\r\n      var model = this;\r\n      var success = options.success;\r\n      options.success = function(resp) {\r\n        var serverAttrs = options.parse ? model.parse(resp, options) : resp;\r\n        if (!model.set(serverAttrs, options)) return false;\r\n        if (success) success.call(options.context, model, resp, options);\r\n        model.trigger('sync', model, resp, options);\r\n      };\r\n      wrapError(this, options);\r\n      return this.sync('read', this, options);\r\n    },\r\n</pre>\n<p>A lot of this stuff is unnecessary in ES6, but Backbone is from the before times.</p>\n<p>We start with a default value for options &#8211; <code>{parse: true}</code>, then use the <code>var = this</code> trick because we don&#8217;t have arrow functions. Then we copy the <code>options.success</code> callback to a variable and define our own. You can think of it as a wrapper.</p>\n<p>Inside the success wrapper, we parse data returned from the server and set new values on our model. Then we trigger a <code>sync</code> event. This could be where the bug happens.</p>\n<p>Outside the wrapper, we defer to <code>sync</code> to actually talk to the server.</p>\n<p>If I copy this method to my own model definition, we can inspect where it fails.</p>\n<img src=\"http://swizec.com/blog/wp-content/uploads/2016/08/success-wrapper.gif\" alt=\"Success wrapper doesn&#039;t fire\" class=\"alignnone size-full wp-image-6915\" />\n<p>The success wrapper doesn&#8217;t fire. ?</p>\n<p>Let&#8217;s see what happens inside <code>sync</code> … ugh, it&#8217;s a long function. I&#8217;m not pasting it here. It does some setup, then defers to <code>$.ajax</code> to perform an ajax request to the server.</p>\n<p>Can we make the same bug happen without Backbone, then?</p>\n<pre lang=\"javascript\">\r\n$.ajax({\r\n    url: 'bla.json',\r\n    complete: () => {\r\n        console.log('done 1st request');\r\n        $.ajax({\r\n            url: 'bla.json',\r\n            complete: () => {\r\n                console.log('done 2nd request');\r\n            }\r\n        });\r\n    }\r\n});\r\n</pre>\n<img src=\"http://swizec.com/blog/wp-content/uploads/2016/08/purer-bug.gif\" alt=\"Bug without Backbone\" class=\"alignnone size-full wp-image-6916\" />\n<p>? It worked! 8 lines of code reproduce the bug. ?</p>\n<p>And yes, both requests happen without error.</p>\n<img src=\"http://swizec.com/blog/wp-content/uploads/2016/08/bug-network.gif\" alt=\"Network calls do happen\" class=\"alignnone size-full wp-image-6917\" />\n<p>It might be safe to say that jQuery is battle tested enough that this couldn&#8217;t be a jQuery bug. But let&#8217;s try superagent to make sure. It&#8217;s a great library for making requests and it&#8217;s implemented independently of jQuery.</p>\n<p>Does the bug still happen?</p>\n<pre lang=\"javascript\">\r\nrequest.get('bla.json')\r\n       .end(() => {\r\n           console.log('1st success');\r\n           request.get('bla.json')\r\n                  .end(() => {\r\n                      console.log('2nd success');\r\n                  });\r\n       });\r\n</pre>\n<img src=\"http://swizec.com/blog/wp-content/uploads/2016/08/superagent-bug.gif\" alt=\"Superagent repros too\" class=\"alignnone size-full wp-image-6918\" />\n<p>Yeeeeep.</p>\n<p>Now you might think: <em>&#8220;A-ha! Every even Ajax call to the same URL fails.&#8221;</em> I tried that, too -&gt; it doesn&#8217;t. If you make requests in a loop, they all work.</p>\n<p>The bug only happens, if you make the same AJAX request in the callback. You can extend a chain like this forever:</p>\n<pre lang=\"javascript\">\r\nrequest.get('bla.json')\r\n       .end(() => {\r\n           console.log('1st success');\r\n           request.get('bla.json')\r\n                  .end(() => {\r\n                      console.log('2nd success');\r\n                  });\r\n\r\n           request.get('bla.json')\r\n                  .end(() => {\r\n                      console.log('3rd success');\r\n\r\n                      request.get('bla.json')\r\n                             .end(() => {\r\n                                 console.log('4th success');\r\n                             });\r\n                  });\r\n       });\r\n</pre>\n<p>And it only prints the odd numbered console.logs.</p>\n<p>Guess it&#8217;s time to submit my first bug report to a big open source project. Yay I&#8217;m helping!</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"ef8254a1-1eeb-5c7e-bb43-a923e50ad64a"}}