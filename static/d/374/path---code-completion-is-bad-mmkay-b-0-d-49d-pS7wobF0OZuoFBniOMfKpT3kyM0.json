{"data":{"wordpressPost":{"title":"Code completion is bad mmkay","content":"<p>Everybody loves <a class=\"zem_slink\" title=\"Autocomplete\" href=\"http://en.wikipedia.org/wiki/Autocomplete\" target=\"_blank\" rel=\"wikipedia\">code completion</a>. You type three characters instead of ten and save some time.</p>\n<p>Like, almost a second.</p>\n<p>Being glued to a keyboard most of your life means you can type at some 100 <a class=\"zem_slink\" title=\"Words per minute\" href=\"http://en.wikipedia.org/wiki/Words_per_minute\" target=\"_blank\" rel=\"wikipedia\">words per minute</a>. With the average English word&#8217;s length of 5.1 characters, this gives you 8.5 characters a second</p>\n<p>That&#8217;s pretty fast. If you&#8217;re a gamer, you&#8217;re even faster. Hundreds of actions per second.</p>\n<p>Maaaaaaybe code completion adds up to <em>minutes</em> a day. But you&#8217;re spending most of your time thinking about and reading code, not typing. You are not a typist.</p>\n<p>But fine, code completion is cool. Except when it wastes <strong>massive</strong> amounts of time.</p>\n<p>On Sunday I was adding some <a class=\"zem_slink\" title=\"JavaScript\" href=\"http://en.wikipedia.org/wiki/JavaScript\" target=\"_blank\" rel=\"wikipedia\">JavaScript</a> to a webpage using an <a class=\"zem_slink\" title=\"Emacs\" href=\"http://www.gnu.org/software/emacs\" target=\"_blank\" rel=\"homepage\">Emacs</a> mode that does simple code completion. When you write <code>&lt;/</code> it fills out the rest.</p>\n<pre lang=\"html\">\r\n<scrpt src=\"/js/some.js\"></scrpt>\r\n<script type=\"text/javascript\">\r\n    do_something();\r\n</script></pre>\n<p>Refresh the page. Nothing happens.</p>\n<p>Hmm &#8230; right.</p>\n<p>Add an alert into <code>some.js</code> to make sure it loads. Nothing.</p>\n<p>Huh path is correct, I can see my code in the generated HTML. But it&#8217;s not working.</p>\n<p>20 minutes pass.</p>\n<p>Idiot! <code>script</code> not <code>scrpt</code>!</p>\n<p>Change tag, file loads. YES!</p>\n<p>But the code in functions doesn&#8217;t execute. The more alerts and console.logs I added, the more confused I was. No matter what I tried, code didn&#8217;t execute. It was all there and there were no JavaScript errors.</p>\n<p>It just did not want to work.</p>\n<p>After an hour of this nonsense I was ready to throw my computer out the window and pick up gardening. Fuck everything.</p>\n<p>Ugh, the stupid close tag! <code>&lt;script&gt;</code> and <code>&lt;/scrpt&gt;</code> don&#8217;t match so <em>obviously</em> the browser eats that whole embedded script tag.</p>\n<p>I am an idiot and I should feel bad. This was a stupid thing, but it wasted a lot of time and the code completion trained me never to think about closing tags.</p>\n<p>But this was silly. A much bigger code completion fuck up happened on a different project last week.</p>\n<p>Without giving too much detail, another programmer on the team implemented some new widgets and in a different part of the codebase I had to decide if a particular element was a widget or not.</p>\n<p>Something like having a class <code>widget_this</code> or <code>widget_that</code>.</p>\n<p>And then there was <code>wdiget_that_too</code>.</p>\n<p><em>Wdiget</em>. A <a class=\"zem_slink\" title=\"Typographical error\" href=\"http://en.wikipedia.org/wiki/Typographical_error\" target=\"_blank\" rel=\"wikipedia\">typo.</a> Honest mistake, happens all the time. But code completion replicated the typo all over the place.</p>\n<p>He didn&#8217;t even realise there was a typo because, hey, code completion. It&#8217;s automagically doing the right thing is it not?</p>\n<p>Cleaning that up was a nuisance. But find&amp;replace did the job.</p>\n<p>Except where it was now a data problem. We&#8217;re saving that stuff to a database and aren&#8217;t using proper enumerators. Tech stack doesn&#8217;t make it easy and strings are Good Enough &#8482;.</p>\n<p>Now I suddenly can&#8217;t reliably make the problem go away. It could have made it into any of the production databases, god knows when the typo will go away on customer facing deployments, and I sure as hell don&#8217;t want to go through all the objects in all the mongo databases to fix the data.</p>\n<p>I resort to a <code>if (something == 'widget' || something == 'wdiget')</code> and sob tears of despair.</p>\n<p>Eventually I will move on, but the codebase will not. That ugly if clause is going to be there forever. Every time somebody finds it, they will look into it, waste half an hour to an hour, decide the problem cannot be fixed reliably and leave it alone for the next schmuck to stumble into.</p>\n<p><strong>Hours will be wasted</strong>Â for the lifetime of the project because some guy was too lazy to type 5 extra characters.</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"721d1112-15fd-5484-b6a8-9e03dbe020eb"}}