{"data":{"wordpressPost":{"title":"My brain can&#8217;t handle OOP anymore","content":"<p>[tweet https://twitter.com/Swizec/status/196543519446409216]</p>\n<p>The other week I was working on my compilers homework &#8211; the <a class=\"zem_slink\" title=\"Compiler\" href=\"http://en.wikipedia.org/wiki/Compiler\" rel=\"wikipedia\" target=\"_blank\">semantic analysis</a> part is an object-oriented nightmare. Something called the <a class=\"zem_slink\" title=\"Visitor pattern\" href=\"http://en.wikipedia.org/wiki/Visitor_pattern\" rel=\"wikipedia\" target=\"_blank\">visitor pattern</a> to traverse trees and do weird stuff.</p>\n<p>It made me want to curl up in a fetal position in the corner, rocking back and forth in a padded room, while mumbling tongues at myself. As <a class=\"zem_slink\" title=\"List of Firefly characters\" href=\"http://en.wikipedia.org/wiki/List_of_Firefly_characters\" rel=\"wikipedia\" target=\"_blank\">River Tam</a> would say before running out of the room in panicÂ <em>&#8220;Too crowded!&#8221;</em></p>\n<h2>What <a class=\"zem_slink\" title=\"Object-oriented programming\" href=\"http://en.wikipedia.org/wiki/Object-oriented_programming\" rel=\"wikipedia\" target=\"_blank\">OOP</a> feels like</h2>\n<div id=\"attachment_4326\" style=\"width: 310px\" class=\"wp-caption alignright\"><a href=\"http://swizec.com/blog/wp-content/uploads/2012/05/Summer_Glau_as_River_Tam_in_Serenity_Wallpaper__yvt2.jpg\"><img class=\"size-medium wp-image-4326\" title=\"Schizophrenic?\" src=\"http://swizec.com/blog/wp-content/uploads/2012/05/Summer_Glau_as_River_Tam_in_Serenity_Wallpaper__yvt2-300x225.jpg\" alt=\"Schizophrenic?\" width=\"300\" height=\"225\" srcset=\"https://swizec.com/blog/wp-content/uploads/2012/05/Summer_Glau_as_River_Tam_in_Serenity_Wallpaper__yvt2-300x225.jpg 300w, https://swizec.com/blog/wp-content/uploads/2012/05/Summer_Glau_as_River_Tam_in_Serenity_Wallpaper__yvt2.jpg 1024w\" sizes=\"(max-width: 300px) 100vw, 300px\" /></a><p class=\"wp-caption-text\">Schizophrenic?</p></div>\n<p>In object-oriented programmingÂ everything gets muddled together. Functions are bundled with data, everything is codependent and there&#8217;s no telling what a <a class=\"zem_slink\" title=\"Function (mathematics)\" href=\"http://en.wikipedia.org/wiki/Function_%28mathematics%29\" rel=\"wikipedia\" target=\"_blank\">function</a> might do when you call it.</p>\n<p>And that&#8217;s assuming there are no side-effects outside the object monad. Otherwise, who knows, the world might explode!</p>\n<p>This creates software that isÂ <em>impossible</em>Â to understand. I used to think I could, but after a few months of functional-style programming I realized that I simply don&#8217;t have the brainpower to understand object oriented code. It&#8217;s too messy.</p>\n<p>When you put singletons into the picture and objects using other objects it all just gets &#8230; let me give you a simple example:</p>\n<pre lang=\"ruby\">foo: object {\r\n   i: private integer = 0;\r\n   add: function (a:integer) {\r\n      i += a;\r\n      return i;\r\n   }\r\n}\r\n\r\n/* lots of code happens here, foo has been passed around, things happened */\r\n/* foo is not a singleton though, just used a lot */\r\n\r\na:integer = foo.add(5);\r\n\r\n// What is the value of a?</pre>\n<p>Answering this simple question requires knowing <em><strong>everything</strong></em>. The whole execution history of <em>foo</em>. The whole codebase. You name it, you have to keep it in your head.</p>\n<p>Oh and did I mention classÂ <em>bar</em>?Â It depends onÂ <em>foo</em>Â for a lot of its stuff. Oh yeah, they got into a little friends with benefits situation last year. It all gets pretty interesting.Â I thinkÂ <em>bar</em>Â cheated on <em>foo</em>Â with <em><a class=\"zem_slink\" title=\"Foobar\" href=\"http://en.wikipedia.org/wiki/Foobar\" rel=\"wikipedia\" target=\"_blank\">baz</a></em>Â once, though.Â There&#8217;s no telling howÂ <em>foo</em>Â might react to that!</p>\n<h2>Functional programming</h2>\n<div id=\"attachment_4329\" style=\"width: 379px\" class=\"wp-caption alignright\"><a href=\"http://www.okeefecreations.com/\"><img class=\" wp-image-4329  \" title=\"fp, by okeef creations\" src=\"http://swizec.com/blog/wp-content/uploads/2012/05/fp1.png\" alt=\"fp, by okeef creations\" width=\"369\" height=\"178\" srcset=\"https://swizec.com/blog/wp-content/uploads/2012/05/fp1.png 768w, https://swizec.com/blog/wp-content/uploads/2012/05/fp1-300x144.png 300w\" sizes=\"(max-width: 369px) 100vw, 369px\" /></a><p class=\"wp-caption-text\">fp, by okeef creations</p></div>\n<p>With a lot of gentle poking and prodding from <a href=\"http://twitter.com/sbelak\">@sbelak</a>, I started learning <a class=\"zem_slink\" title=\"Functional programming\" href=\"http://en.wikipedia.org/wiki/Functional_programming\" rel=\"wikipedia\" target=\"_blank\">functional programming</a> about two years ago.</p>\n<p>I was promised easy scalability, working with multiple processors without cost, expressive code, things that Just Work &#8482; and software with less bugs that is easier to maintain and shorter/quicker to write.</p>\n<p>I may not have gotten all that, but I <em>did</em>Â get a whole new way of thinking about my craft. An easier way to <em>understand.</em></p>\n<p>At first functional programming felt like performing a lobotomy on myself by sticking hot pokers into my feet.Â <em>Are you <strong>sure</strong>Â I don&#8217;t need loops? But I do need variables don&#8217;t I? At least a bit of mutability? Really? I don&#8217;t? This is some sort of hazing ritual isn&#8217;t it, any moment now you&#8217;re all going to jump up, shout &#8220;surprise&#8221; and start laughing at me.</em></p>\n<p><em></em>Â But I kept at it. And even though my code looked horrible, I fell in love.</p>\n<p>The first attraction of functinal style code was writing python functions that just pass data around. No storing in intermediate variables, just passing one function&#8217;s result directly into the arguments of the next function in the chain.</p>\n<p>Because who cares about reading intermediate steps? All I care for is thatÂ this chunk of code createsÂ <em>X</em>. Not that it first does <em>Y</em>, then <em>Z,</em>Â then pulls in <em>A</em>Â and <em>B</em>Â and combines them into <em>X.</em></p>\n<p>Sure, you could define a function called <em>X</em>Â that combines <em>Y, Z, A </em>and <em>B, </em>but why create a new function for something that only gets called once? Much better to just do something like <em>X = A+B(Y(Z))</em>Â isn&#8217;t it?</p>\n<h2>A waterfall of data</h2>\n<div id=\"attachment_4322\" style=\"width: 360px\" class=\"wp-caption alignright\"><a href=\"http://swizec.com/blog/wp-content/uploads/2012/05/waterfall-of-data.jpg\"><img class=\" wp-image-4322 \" title=\"Plitvice falls\" src=\"http://swizec.com/blog/wp-content/uploads/2012/05/waterfall-of-data.jpg\" alt=\"Plitvice falls\" width=\"350\" height=\"233\" srcset=\"https://swizec.com/blog/wp-content/uploads/2012/05/waterfall-of-data.jpg 500w, https://swizec.com/blog/wp-content/uploads/2012/05/waterfall-of-data-300x199.jpg 300w\" sizes=\"(max-width: 350px) 100vw, 350px\" /></a><p class=\"wp-caption-text\">Plitvice falls</p></div>\n<p>The way I think about code now is a waterfall of data.</p>\n<p>You have data and every function in the chain is a ledge. The data stops falling, changes course a bit, perhaps even changes some properties, and falls onward to the next function.</p>\n<p>In the end you have a pool. This is where your data ends up after falling through many functions and being changed. But then it flows onward to the next function, or wherever you might need it.</p>\n<p>You might say this is really <a class=\"zem_slink\" title=\"Procedural programming\" href=\"http://en.wikipedia.org/wiki/Procedural_programming\" rel=\"wikipedia\" target=\"_blank\">procedural programming</a>, but I don&#8217;t like side-effects, imperative bits of code and so on. It&#8217;s still functional programming, but this is how my brain understands code. Your mileage might vary.</p>\n<h2>Fin</h2>\n<p>Whatever way you think about your code, whatever way you visualise execution in your head &#8230;Â hat&#8217;s off to you, if you can handle the inherent complexity of object-oriented programming. You are a better man than I am.</p>\n<p>I think you should give &#8220;<em>this functional programming fad&#8221;</em>Â a try anyway. You Â might like it ðŸ˜‰</p>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles</h6>\n<ul class=\"zemanta-article-ul\">\n<li class=\"zemanta-article-ul-li\"><a href=\"http://restreaming.wordpress.com/2012/03/16/functional-programming-in-practice/\" target=\"_blank\">Functional programming in practice</a> (restreaming.wordpress.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://swizec.com/blog/closure-and-currying-magic-for-cleaner-javascript/swizec/3981\" target=\"_blank\">Closure and currying magic for cleaner javascript</a> (swizec.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://teknonics.wordpress.com/2012/05/04/objects-and-php-a-brief-evolutionary-history/\" target=\"_blank\">Objects and PHP: A brief evolutionary history</a> (teknonics.wordpress.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://normansoven.com/blog/still-trying-to-wrap-my-head-around-functional-programming/\" target=\"_blank\">Still trying to wrap my head around functional programming.</a> (normansoven.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://bulldozer00.com/2012/05/05/the-old-is-new-again/\" target=\"_blank\">The Old Is New Again</a> (bulldozer00.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://www.altdevblogaday.com/2012/04/26/functional-programming-in-c/\" target=\"_blank\">Functional Programming in C++</a> (altdevblogaday.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://slidetocode.com/2012/05/06/the-perfect-programming-language/\" target=\"_blank\">The genesis of the perfect programming language</a> (slidetocode.com)</li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=6209c6cc-944f-4b49-b45c-5467e35073f2\" alt=\"Enhanced by Zemanta\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"086cf7a7-7b22-5d79-9164-d4de6373994f"}}