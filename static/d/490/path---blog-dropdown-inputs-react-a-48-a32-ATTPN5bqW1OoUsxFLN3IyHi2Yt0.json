{"data":{"wordpressPost":{"title":"Fast, searchable dropdown inputs with React","content":"<p>Input fields that are limited to one of 6,000 possible values… That’s a usability nightmare, right? ?</p>\n<p>Dump it in a dropdown, and you overwhelm your users. How many even know vanilla dropdowns support search? And besides, you can&#39;t style those. Your designer will throw a shit fit. Default browser crap in his beautiful design? No, no, that won&#39;t do.</p>\n<img class=\"alignnone size-full wp-image-7222\" src=\"https://swizec.com/blog/wp-content/uploads/2016/11/vanilla-dropdown.gif\" width=\"526\" height=\"345\" />\n<p>Looks vanilla, works vanilla. First open is slow, but search is fast if you know it exists. If you don&#39;t, you&#39;re screwed.</p>\n<p>You <em>could</em> give users an input field and validate against the list of possible entries… no way <em>that&#39;s</em> going to be a nightmare, eh? Is it <code>stanford</code>, <code>Stanford</code>, <code>stanford university</code>, <code>Stanford university</code>, or <code>Stanford University</code>? Some people will enter <code>stnraofd</code>.</p>\n<p>No, no, the answer is <strong>both</strong>. You need an input field <em>and</em> a dropdown. Input filters dropdown, dropdown guides users.</p>\n<h2>Step 1: react-select</h2>\n<p>Jed Watson&#39;s <a href=\"https://github.com/JedWatson/react-select\">react-select</a> library gives you input fields with dropdowns. Users can use the input field or use the dropdown.</p>\n<p>Implementation looks like this:</p>\n<pre lang=\"javascript\">\nimport Select from 'react-select';\nimport 'react-select/dist/react-select.css';\n\nconst options = [\n    // ...\n    { value: 'Stanford University', label: 'Stanford' },\n    // ...\n];\n\nconst field = ({ options }) => (\n    <Select\n        name=\"university\"\n        value=\"one\"\n        options={options}\n        onChange={val => console.log(val)}\n    />\n);\n</pre>\n<p>The <code>&lt;Select&gt;</code> component does everything: input field, styled non-vanilla dropdown, mouse interaction, keyboard shortcuts, filtering. The only gotcha is that options have to be an array of <code>{ value, label }</code> objects. Even if both <code>value</code> and <code>label</code> are the same, I tried.</p>\n<img class=\"alignnone size-full wp-image-7223\" src=\"https://swizec.com/blog/wp-content/uploads/2016/11/react-select.gif\" width=\"526\" height=\"345\" />\n<p>A few seconds to render the dropdown. A few seconds to filter. The browser&#39;s UI thread blocked, and you can&#39;t even see what you&#39;re typing.</p>\n<p>5,258 entries is a lot of entries ?</p>\n<h2>Step 2: react-virtualized-select</h2>\n<p>Brian Vaughn&#39;s <a href=\"https://github.com/bvaughn/react-virtualized-select\">react-virtualized-select</a> solves the first problem – opening the dropdown. It&#39;s a higher order component that does a thing and then your thing works better.</p>\n<p>I think it implements paging and hides it behind scroll events. Only a few elements render at a time, and everyone&#39;s life is better.</p>\n<p>Here&#39;s how you use it:</p>\n<pre lang=\"javascript\">\nimport Select from 'react-virtualized-select';\nimport 'react-select/dist/react-select.css';\nimport 'react-virtualized/styles.css'\nimport 'react-virtualized-select/styles.css'\n\nconst options = [\n    // ...\n    { value: 'Stanford University', label: 'Stanford' },\n    // ...\n];\n\nconst field = ({ options }) => (\n    <Select\n        name=\"university\"\n        value=\"one\"\n        options={options}\n        onChange={val => console.log(val)}\n    />\n);\n</pre>\n<p>We changed the <code>import Select from</code> to use <code>react-virtualized-select</code> and… that&#39;s all. ?</p>\n<img class=\"alignnone size-full wp-image-7221\" src=\"https://swizec.com/blog/wp-content/uploads/2016/11/react-virtualized-select.gif\" width=\"526\" height=\"345\" />\n<p>It opens quickly, and I was typing that whole time that nothing was happening. Browser&#39;s UI thread still blocking.</p>\n<h2>Step 3: react-select-fast-filter-options</h2>\n<p>Brian Vaughn&#39;s <a href=\"https://github.com/bvaughn/react-select-fast-filter-options\">react-select-fast-filter-options</a> is practically too long to mention in a tweet, and  it solves the second problem: fast search.</p>\n<p>It builds an index of your options and uses advanced computer sciencey algorithms discovered some time in the 60&#39;s, probably. We rarely have enough data to worry about actual computer science on the front end, but sometimes we do.</p>\n<p>Here&#39;s how you use it:</p>\n<pre lang=\"javascript\">\nimport Select from 'react-virtualized-select';\nimport createFilterOptions from 'react-select-fast-filter-options';\nimport 'react-select/dist/react-select.css';\nimport 'react-virtualized/styles.css'\nimport 'react-virtualized-select/styles.css'\n\nconst options = [\n    // ...\n    { value: 'Stanford University', label: 'Stanford' },\n    // ...\n];\n\nconst filterOptions = createFilterOptions({ options });\n\nconst field = ({ options }) => (\n    <Select\n        name=\"university\"\n        value=\"one\"\n        options={options}\n        filterOptions={filterOptions}\n        onChange={val => console.log(val)}\n    />\n);\n</pre>\n<p>We added a <code>filterOptions</code> prop to <code>Select</code>, which specifies a custom filter implementation, and we used <code>createFilterOptions</code> to instantiate that implementation. No need to worry about how it actually works because It Just Works™.</p>\n<img class=\"alignnone size-full wp-image-7220\" src=\"https://swizec.com/blog/wp-content/uploads/2016/11/react-virtualized-select-fast.gif\" width=\"526\" height=\"345\" />\n<p>Looks good, works good. Faster even than the vanilla browser implementation ?</p>\n<p>The only gotcha is that you have to pass the same options to both <code>Select</code> and <code>createFilterOptions</code>. Dynamically generating <code>{ value, label }</code> objects from an array won&#39;t work.</p>\n<p>The good news is that the memoization MobX does for <code>@computed</code> values is good enough, so you can do something like this:</p>\n<pre lang=\"javascript\">\nclass FormData {\n    @observable universities = ['Stanford', 'UVA', ...];\n \n    @computed get options() {\n        return this.universities.map(name => ({ value: name, label: name }));\n    }\n \n    @computed get filterOptions() {\n        const options = this.options;\n        return createFilterOptions({ options });\n    }\n}\n</pre>\n<p>I don&#39;t know if it would work with Redux. As long as you&#39;re careful about the reference thing, you should be fine.</p>\n<h2>But is it a good idea?</h2>\n<p>Yes. Use this approach for all select fields. Even the small ones! There&#39;s no harm, and it&#39;s faster. Winning.</p>\n<img src=\"http://www.vomzi.com/wp-content/uploads/2016/02/cute-winning-gif-333.gif\" />\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"6dc2b2bd-462e-59a8-a5a5-401c58c3ed23"}}