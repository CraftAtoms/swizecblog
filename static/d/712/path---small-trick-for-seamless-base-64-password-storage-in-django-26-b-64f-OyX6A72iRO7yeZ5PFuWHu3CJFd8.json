{"data":{"wordpressPost":{"title":"Small trick for seamless base64 password storage in django","content":"<div class=\"zemanta-img\" style=\"margin: 1em; display: block;\">\n<div>\n<dl class=\"wp-caption alignright\" style=\"width: 310px;\">\n<dt class=\"wp-caption-dt\"><a href=\"http://commons.wikipedia.org/wiki/File:Oauth_logo.svg\"><img title=\"OAuth logo\" src=\"http://swizec.com/blog/wp-content/uploads/2010/08/300px-Oauth_logo.svg_.png\" alt=\"OAuth logo\" width=\"300\" height=\"301\" /></a></dt>\n<dd class=\"wp-caption-dd zemanta-img-attribution\" style=\"font-size: 0.8em;\">Image via <a href=\"http://commons.wikipedia.org/wiki/File:Oauth_logo.svg\">Wikipedia</a></dd>\n</dl>\n</div>\n</div>\n<p>These days even the noobiest of the noobs know that <a class=\"zem_slink freebase/guid/9202a8c04000641f80000000000308d9\" title=\"Password\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Password\">passwords</a> should never be stored in plain-tect on the <a class=\"zem_slink freebase/guid/9202a8c04000641f8000000000054790\" title=\"Server (computing)\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Server_%28computing%29\">server</a>. For various good and bad reasons, but the gist of it is <a class=\"zem_slink freebase/guid/9202a8c04000641f8000000000039975\" title=\"Security through obscurity\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Security_through_obscurity\">security through obscurity</a>.</p>\n<p>What a few less people know is that <a class=\"zem_slink freebase/guid/9202a8c04000641f800000000016c05b\" title=\"Base64\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Base64\">base64</a> is the same as <a class=\"zem_slink freebase/guid/9202a8c04000641f800000000012648f\" title=\"Plaintext\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Plaintext\">plaintext</a>. Not only is it a very simple two way hashing function, if it can be called that, it&#8217;s certainly not <a class=\"zem_slink freebase/guid/9202a8c04000641f80000000000162b1\" title=\"Encryption\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Encryption\">encryption</a>, what&#8217;s worse is that any coder worth their salt can recognise base64 encoding at a glance. Decoding it is trivial, many tools online can do it.</p>\n<p>On top of all of that, django already stores its user&#8217;s passwords very securily with one-way hashing AND <a class=\"zem_slink freebase/guid/9202a8c04000641f800000000031fdf5\" title=\"Salt (cryptography)\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Salt_%28cryptography%29\">salting</a>.</p>\n<p>So what the fuck am I doing trying to save passwords in base64?</p>\n<h3>Problem</h3>\n<p>The reason is in fact quite simple: External <a class=\"zem_slink freebase/guid/9202a8c04000641f80000000000078b4\" title=\"Application programming interface\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Application_programming_interface\">API</a>&#8216;s.</p>\n<p>Here&#8217;s the problem: what do you do when your service is accessing a third party API, which doesn&#8217;t support <a class=\"zem_slink\" title=\"OAuth\" rel=\"homepage\" href=\"http://oauth.net\">OAuth</a> or OAuth is impractical in your situation for various reasons and the API doesn&#8217;t support some other means of <a class=\"zem_slink freebase/guid/9202a8c04000641f80000000055d5879\" title=\"Login\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Login\">logging in</a> with a hashed password. Basically, the only way you can access this API is if you know the user&#8217;s password?</p>\n<p>The obvious solution is to fuck it and store plain-text passwords. Nothing you can do right? Hopefully nobody will hack your database and get to the passwords.</p>\n<p>Sure. But what when you&#8217;re browsing around for debugging purposes? How do you prevent yourself from accidentally reading someone&#8217;s password?</p>\n<h3>Solution</h3>\n<p>That&#8217;s where base64 comes in.</p>\n<p>But since we don&#8217;t want to make our code silly, here&#8217;s a simple way of achieving this without ever having to worry about it again.</p>\n<pre lang=\"python\">class PasswordManager(models.Manager):\r\n    use_for_related_fields = True\r\n\r\n    def create(self, *args, **kwargs):\r\n        try:\r\n            kwargs['password'] = base64.encodestring(kwargs['password'])\r\n        except KeyError:\r\n            pass\r\n\r\n        return super(PasswordManager, self).create(*args, **kwargs)\r\n\r\n    def get(self, *args, **kwargs):\r\n        data = super(PasswordManager, self).get(*args, **kwargs)\r\n        try:\r\n            data.password = base64.decodestring(data.password)\r\n        except AttributeError:\r\n            pass\r\n        return data\r\n\r\nclass GoogleAccount(models.Model):\r\n    user = models.ForeignKey(User, unique=True)\r\n    email = models.CharField(max_length=255)\r\n    password = models.CharField(max_length=255)\r\n\r\n    objects = PasswordManager()</pre>\n<p>Basically we write a module manager that encodes all passwords in insert queries to base64 and decodes them again on select queries. For completeness sake it&#8217;s also good to define a <em>filter</em> function where we perform the decoding on the whole set of returned entries. But for this sort of thing that&#8217;s rarely needed because you&#8217;re rarely going to be performing third party actions for miriads of users at once.</p>\n<p>This way we achieve perfectly seamless base64 storage of passwords. Nice and easy.</p>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=eded0a7d-aadf-4552-a54d-328c43c8a709\" alt=\"Enhanced by Zemanta\" /></a><span class=\"zem-script more-related more-info pretty-attribution\"><script src=\"http://static.zemanta.com/readside/loader.js\" type=\"text/javascript\"></script></span></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"b5296c98-d9de-5172-8c15-7b647ba2eeab"}}