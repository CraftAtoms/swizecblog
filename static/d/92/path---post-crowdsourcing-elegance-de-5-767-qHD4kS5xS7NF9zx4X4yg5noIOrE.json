{"data":{"wordpressPost":{"title":"Crowdsourcing elegance","content":"<div class=\"zemanta-img\" style=\"margin: 1em; display: block;\">\n<div style=\"width: 250px\" class=\"wp-caption alignright\"><a href=\"http://www.flickr.com/photos/17291033@N00/6229977151\"><img title=\"soba fest 095\" src=\"http://swizec.com/blog/wp-content/uploads/2011/10/6229977151_4f39755c38_m1.jpg\" alt=\"soba fest 095\" width=\"240\" height=\"155\" /></a><p class=\"wp-caption-text\">Image by ijiwaru jimbo via Flickr</p></div>\n</div>\n<p>On Friday I said that <a title=\"Functional isn’t always better\" href=\"http://swizec.com/blog/functional-isnt-always-better/swizec/2591\">Functional isn&#8217;t always better</a>, but really it was a post about my failings as a functional programmer in finding an elegant solution to the problem of transforming a list of values into a list of pairs.</p>\n<p>Originally I described the problem like so:</p>\n<blockquote><p>The problem is one of turning a list of values, say, <em>[A, B, C, D]</em> into a list of pairs with itself, like so <em>[[A,B], [A,C], [A,D], [B, C], [B,D], [C,D]].</em></p>\n<p>Should be simple enough right? You just make another list shifted by one to the left, make a zip, then repeat until the second list is empty. This solution turns out to be horrible, looks ugly and I’m not even going to show it. So here’s my second functional solution … it’s a lot cleaner.</p></blockquote>\n<p>Turns out the internet is <em>super awesome</em> and was more than willing to put me in my place. You guys posted a cumulative of 49 comments (on hackernews and this blog) and <a href=\"http://exampler.com/\" target=\"_blank\">Brian Marick</a> even posted a tutorial on approaching functional programming on this example, entitled <em><a href=\"http://www.exampler.com/blog/2011/10/07/top-down-design-in-functional-classic-programming-2/\" target=\"_blank\">Top-down design in &#8220;functional classic&#8221; programming</a>.</em></p>\n<p>Solutions were posted in <a class=\"zem_slink\" title=\"Clojure\" href=\"http://clojure.org\" rel=\"homepage\">Clojure</a>, <a class=\"zem_slink\" title=\"Haskell (programming language)\" href=\"http://haskell.org\" rel=\"homepage\">Haskell</a>, <a class=\"zem_slink\" title=\"Python (programming language)\" href=\"http://www.python.org/\" rel=\"homepage\">Python</a>, J, Scala, <a class=\"zem_slink\" title=\"JavaScript\" href=\"http://en.wikipedia.org/wiki/JavaScript\" rel=\"wikipedia\">Javascript</a>, <a class=\"zem_slink\" title=\"Erlang (programming language)\" href=\"http://www.erlang.org\" rel=\"homepage\">Erlang</a>, <a class=\"zem_slink\" title=\"Smalltalk\" href=\"http://en.wikipedia.org/wiki/Smalltalk\" rel=\"wikipedia\">SmallTalk</a>, C#, <a class=\"zem_slink\" title=\"Objective Caml\" href=\"http://caml.inria.fr/index.en.html\" rel=\"homepage\">Ocaml</a>, F#, &#8230; and some language I didn&#8217;t recognize nor did the poster specify what it was.</p>\n<h2>Clojure</h2>\n<p>They ranged from painfully obvious (<a href=\"http://twitter.com/sbelak\" target=\"_blank\">@sbelak</a>)</p>\n<pre lang=\"clojure\">(combinations '[a b c d] 2)</pre>\n<p>A saner (only core) solution in Clojure supposedly looks like this</p>\n<pre lang=\"clojure\">(defn tails [xs]\r\n  (take-while not-empty (iterate rest xs)))\r\n\r\n(defn pairs [xs]                                            \r\n  (mapcat (partial map vector) (map repeat xs) (rest (tails xs))))</pre>\n<h2>J</h2>\n<p>To what the fuck am I looking at (I think this is J)</p>\n<pre lang=\"J\">a = 'abcd'\r\n\r\ncomb=: 4 : 0\r\n k=. i.&gt;:d=.y-x\r\n z=. (d$ ,&amp;.&gt;/\\. &gt;:&amp;.&gt; z end.\r\n ; z\r\n)\r\n\r\n(2 comb #a) { a</pre>\n<p>Most people seem to have given it a shot in either Clojure or Haskell, meaning that I need to look up both of those languages a whole lot more.</p>\n<h2>Haskell</h2>\n<p>This is my favourite Haskell solution, by <a href=\"https://twitter.com/#!/purzelrakete\" target=\"_blank\">@purzelrakete</a></p>\n<pre lang=\"haskell\">[[x, y] | x &lt;- set, y &lt;- set, x &lt; y]/pre&gt;</pre>\n<h2>Javascript</h2>\n<p>A really cool Javascript solution by Shaun Gilchrist.</p>\n<pre lang=\"javascript\">function pairs(set) {\r\n    return _.isEmpty(set) ? [] : \r\n        _.map(_.rest(set), function(y){ return [_.first(set), y]})\r\n        .concat(pairs(_.rest(set)));\r\n}</pre>\n<h2>C#</h2>\n<p>For some reason I didn&#8217;t think C# would even make it to such a debate, but <a href=\"http://news.ycombinator.com/user?id=Strilanc\" target=\"_blank\">Strilanc</a> makes it quite elegant.</p>\n<pre lang=\"C\">list.SelectMany((e, i) =&gt; list.Skip(i+1).Select(f =&gt; Tuple.Create(e, f)))</pre>\n<h2>Python</h2>\n<p>Here&#8217;s a nice succint solution in Python</p>\n<pre lang=\"python\">[(x[i],x[j]) for i in range(len(x)) for j in range(i+1, len(x))]</pre>\n<h2>Ocaml</h2>\n<p>And Ocaml by the same guy (<a href=\"http://news.ycombinator.com/user?id=fab13n\">fab13n</a>)</p>\n<pre lang=\"ocaml\">let rec pairs = function\r\n    | a :: b -&gt; List.map (fun x -&gt; (a, x)) b @ (pairs b)\r\n    | [] -&gt; []</pre>\n<h2>F#</h2>\n<p>According to <a href=\"http://twitter.com/demisbellot\">@demisbellot</a> it would look like this in F#</p>\n<pre lang=\"F\">let rec pairs = function \r\n| h :: t -&gt; List.append [ for i in t -&gt; [h; i] ] (pairs t) \r\n| _ -&gt; []  \r\n\r\n[\"A\"; \"B\"; \"C\"; \"D\"] |&gt; pairs</pre>\n<h2>Scala</h2>\n<p>Scala by XxXX</p>\n<pre lang=\"scala\"> def pair(l : List[String]): List[Tuple2[String, String]] = l.size match {\r\n case 1 =&gt; Nil\r\n case _ =&gt; l.tail.flatMap { e =&gt; List((l.head, e)) } ++ pair(l.tail) \r\n}</pre>\n<h2>Erlang</h2>\n<p>By <a href=\"http://joelpm.com/\">JoelPM</a> &#8230; although I&#8217;m not sure this is elegant.</p>\n<pre lang=\"erlang\">-module(combos).\r\n\r\n-export([ combo/1 ]).\r\n\r\ncombo(List) -&gt;\r\n  combo(List,[]).\r\n\r\ncombo([],Acc) -&gt;\r\n  lists:reverse(Acc);\r\ncombo([H|T], Acc) -&gt;\r\n  combo(T,permute(H,T,Acc)).\r\n\r\npermute(X,[],Acc) -&gt;\r\n  Acc;\r\npermute(X,[H|T],Acc) -&gt;\r\n  permute(X,T,[{X,H}|Acc]).\r\nOutput:\r\n1&gt; combos:combo([a,b,c,d]).[{a,d},{a,c},{a,b},{b,d},{b,c},{c,d}]2&gt;</pre>\n<h2>More javascript</h2>\n<p>@refaktor gave it the most attempts &#8230; I think he had a boring weekend, or just got nerd sniped. Here&#8217;s his his final solution in javascript &#8230; would have expected rebol from him though.</p>\n<pre lang=\"javascript\">var f = function(a) { return a.length == 0 ? [] : (a.slice(1).map(function(x){return [a[0],x]})).concat(f(a.slice(1))); }</pre>\n<h2>Smalltalk</h2>\n<p>By Larry &#8230; he didn&#8217;t leave a link.</p>\n<pre lang=\"smalltalk\">\r\nin := #(a b c d) asOrderedCollection.out := OrderedCollection new.in size timesRepeat: [\tkey := in removeFirst.\tin do: [ :value |  out add:( Array with: key with: value). ].].\r\n</pre>\n<h2>Conclusion</h2>\n<p>There were other good solutions, but I think these are the most interesting to look at. This whole experience proves that sometimes when you ask for help on the internets Good Things &#8482; happen.</p>\n<p>It also proves that geeks <em>love</em> outdoing each other.</p>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles</h6>\n<ul class=\"zemanta-article-ul\">\n<li class=\"zemanta-article-ul-li\"><a href=\"http://www.r-bloggers.com/hipster-programming-languages/\">Hipster programming languages</a> (r-bloggers.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://mathias-biilmann.net/posts/2011/10/is-haskell-the-cure\">Is Haskell the Cure?</a> (mathias-biilmann.net)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://dave.fayr.am/posts/2011-08-19-lets-go-shopping.html\">Functional Programming Is Hard, That&#8217;s Why It&#8217;s Good</a> (dave.fayr.am)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://drknucklehead.wordpress.com/2011/10/02/what-is-clojure-who-should-use-it/\">What is Clojure? Who Should Use It?</a> (drknucklehead.wordpress.com)</li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=6bdf0ca8-ad82-4ee8-a403-c51e98c02053\" alt=\"Enhanced by Zemanta\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"282512ea-5669-5f9c-9976-f1d9ca0077ab"}}