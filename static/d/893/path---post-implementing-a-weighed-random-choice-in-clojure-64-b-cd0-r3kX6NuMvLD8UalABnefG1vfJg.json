{"data":{"wordpressPost":{"title":"Implementing a weighed random choice in Clojure","content":"<p>A while ago I wrote about my school project that involves <a title=\"Using prime numbers to generate pretty trees\" href=\"http://swizec.com/blog/using-prime-numbers-to-generate-pretty-trees/swizec/1705\">generating pretty trees</a> and concluded the post with the idea that I now have to implement some way for the branch lengths to be a bit <a class=\"zem_slink\" title=\"Randomness\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Randomness\">random</a> to add more variability.</p>\n<div class=\"zemanta-img zemanta-action-dragged\" style=\"margin: 1em; display: block;\">\n<div style=\"width: 310px\" class=\"wp-caption alignright\"><a href=\"http://commons.wikipedia.org/wiki/File:Awesome-pantallazo.png\"><img title=\"Awesome-pantallazo\" src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/2/26/Awesome-pantallazo.png/300px-Awesome-pantallazo.png\" alt=\"Awesome-pantallazo\" width=\"300\" height=\"188\" /></a><p class=\"wp-caption-text\">Image via Wikipedia</p></div>\n</div>\n<p>&nbsp;</p>\n<p>There is an easy and an awesome way to doing this. The easy way involves doing everything as usual and then simply adding a small random buzz, fuzz or whatever you could call it to the length of a branch. Â Obviously this approach would work and the branches wouldn&#8217;t be of uniform length anymore &#8230; but there&#8217;s just no fun in that. The results it produces also aren&#8217;t quite that awesome.</p>\n<p>So I chose a different way.</p>\n<p>First a little background on how branch lengths were calculated originally. Every time a branch is needed the basic brench length is multiplied with a factor chosen based on how deep inside the tree we are. So for example, if the trunk is of length 5 and we are on the third level of the tree the length would be 5*0.25, or a quarter of the trunk&#8217;s length.</p>\n<p>I wanted to expand on that by randomly selecting a multiplier from the list for every branch I&#8217;m looking at. As you can probably expect, this produced rather funny looking trees.</p>\n<div style=\"width: 745px\" class=\"wp-caption alignnone\"><img class=\" \" title=\"Random random branch lengths\" src=\"http://i.imgur.com/HmFKU.png\" alt=\"\" width=\"735\" height=\"395\" /><p class=\"wp-caption-text\">Random random branch lengths</p></div>\n<p>What&#8217;s needed is a way to randomly choose the length of a branch, but <a class=\"zem_slink\" title=\"Probability\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Probability\">probabilistically</a> making sure that branches on deeper levels of the tree are shorter than the ones before them. This leads us to the idea of needing a weighed random that has a slightly higher probability of returning a certain length over others.</p>\n<p>After a bunch of googling on how such a thing might be achieved I settled on a pretty simple solution. Basically produce a list of possible indexes, tweaked so there&#8217;s more of those that need a higher probability, and then simply picking a random one. Something like so:</p>\n<pre lang=\"lisp\">(nth choices\r\n       (rand-nth (0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 4))</pre>\n<p>This, however, isn&#8217;t very elegant or even pretty to look at. Changing it so the maximum of the <a class=\"zem_slink\" title=\"Probability distribution\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Probability_distribution\">probability distribution</a> moves down the choices depending on how deep inside the tree we are would be painful.</p>\n<p>My next step was changing the weighed random choice so it would generate such a horrible list on its own and use a provided function to calculated the weights for every specific index. This gives us a way to neatly define the probability distribution we want every time we make a random choice from a list.</p>\n<p>Here&#8217;s what the final function looks like</p>\n<pre lang=\"lisp\">(defn weighed-random-choice [choices weight]\r\n  (defn indexes []\r\n    (flatten (map #(replicate (weight %1) %1)\r\n                  (take (count choices)\r\n                        (iterate inc 0)))))\r\n\r\n  (nth choices\r\n       (rand-nth (indexes))))</pre>\n<div style=\"width: 315px\" class=\"wp-caption alignright\"><img title=\"Probability distribution\" src=\"http://i.imgur.com/4pcaV.png\" alt=\"\" width=\"305\" height=\"208\" /><p class=\"wp-caption-text\">Current probability distribution</p></div>\n<p>To be honest I still haven&#8217;t quite figured out a good probability distribution to get perfectly looking trees, but here&#8217;s my current <a class=\"zem_slink\" title=\"Weight function\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Weight_function\">weight function</a>. I like to think of it as mathematically somewhat elegant, but it might be a bit slow to calculate at times &#8230; seems to have quite an impact on generating trees when the maximum depth is big-ish. And I need it to have a bigger drop off on the left side where the longer branches are.</p>\n<pre lang=\"lisp\">  (defn weight [x pivot]\r\n  ; cos(x + sin(x)*0.9)*0.5+0.5\r\n    (let [x (* x (/ Math/PI (count lengths)))\r\n\t  pivot (* pivot (/ Math/PI (count lengths)))]\r\n      (int (Math/floor (* 10\r\n\t\t\t  (+ 0.5 (* 0.5\r\n\t\t\t\t    (Math/cos (+ (- x pivot)\r\n\t\t\t\t\t\t (* 0.9 (Math/sin (- x pivot))))))))))))</pre>\n<p>Pivot is where the highest probability density needs to be and usually denotes the current depth we are at. If you see anything wrong with my approach go ahead and tell me ðŸ™‚</p>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles</h6>\n<ul class=\"zemanta-article-ul\">\n<li class=\"zemanta-article-ul-li\"><a href=\"http://ignoranceanduncertainty.wordpress.com/2011/03/21/exploiting-randomness/\">Exploiting Randomness</a> (ignoranceanduncertainty.wordpress.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://ask.metafilter.com/182181/How-to-transform-random-variables-from-a-nonnormal-distribution-to-a-normal-distribution\">How to transform random variables from a non-normal distribution to a normal distribution?</a> (ask.metafilter.com)</li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=a8706682-511c-4755-b128-f7193a67b53b\" alt=\"Enhanced by Zemanta\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"67d392bb-1980-5fb7-8204-1d26242a8e28"}}