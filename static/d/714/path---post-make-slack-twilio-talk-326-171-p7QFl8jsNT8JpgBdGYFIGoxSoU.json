{"data":{"wordpressPost":{"title":"How to make Slack and Twilio talk to each other","content":"<p>Why? Because it&#8217;s cool.</p>\n<p>And in some cases, you can make a bot that answers the door. Like I <a href=\"https://swizec.com/blog/livecoding-22-a-door-answering-slackbot/swizec/7038\">started here</a> and <a href=\"https://swizec.com/blog/livecoding-23-slackbots-oauth/swizec/7065\">continued here</a>. This isn&#8217;t a series. Don&#8217;t worry ðŸ™‚</p>\n<p>You should start by setting up a <a href=\"https://www.twilio.com/\">Twilio account</a> and a <a href=\"https://api.slack.com/slack-apps\">Slack app</a>. We&#8217;re going to build a node.js server running <a href=\"http://expressjs.com/\">Express</a> that:</p>\n<ol>\n<li>Takes a phone call</li>\n<li>Records what the caller says</li>\n<li>Puts the caller on hold</li>\n<li>Posts a message with buttons on Slack</li>\n<li>Tells caller which button was pressed</li>\n<li>Hangs up</li>\n</ol>\n<p>Let&#8217;s assume you&#8217;ve already set up an Express project. It&#8217;s easy to do from scratch, and if you already have an existing one that you&#8217;re adding Slack and Twilio to, then you don&#8217;t need this step.</p>\n<h2>Slack OAuth</h2>\n<p>The first thing we have to take care of is Slack&#8217;s OAuth dance. We&#8217;re going to use the <code>grant-express</code> plugin to add OAuth to our server, then do the dance to get a Slack token.</p>\n<p>Run:</p>\n<pre>\n$ npm install --save grant-express express-session\n</pre>\n<p>This installs an OAuth plugin and a session middleware for Express. The first is for OAuth dancing, and the second is for storing information between API calls temporarily.</p>\n<p>To enable the dance, add this to your <code>app.js</code> file:</p>\n<pre lang=\"javascript\">\n// /app.js\nlet session = require('express-session'),\n    Grant = require('grant-express');\nlet grant = new Grant({\n    server: {\n        protocol: 'https',\n        host: 'swizec.ngrok.io', // use your domain name\n        callback: '/callback',\n        transport: 'session',\n        state: true\n    },\n    slack: {\n        key: YOUR_SLACK_KEY,\n        secret: YOUR_SLACK_SECRET,\n        scope: ['chat:write:bot', 'chat:write:user', 'channels:read', 'commands', 'incoming-webhook'],\n        callback: '/handle_slack_callback'\n    }\n});\napp.use(session({secret: 'grant',\n                 resave: false,\n                 saveUninitialized: true}));\napp.use(grant);\n</pre>\n<p><code>grant-express</code> comes half configured for Slack out of the box. You just have to tell it which scopes you&#8217;re going to use, what your access keys and secrets are (you find them in your config on Slack), and your server&#8217;s domain. For local development, I like to use <a href=\"https://ngrok.com/\">ngrok</a>, hence <code>swizec.ngrok.io</code>.</p>\n<p>Once you have that configured, you tell Express to use <code>grant</code> and <code>session</code> with two <code>app.use</code> calls.</p>\n<p>To complete the dance, you need a <code>/handle_slack_callback</code> route, which goes in your <code>routes/index.js</code> file, if you&#8217;re as careless as I am. In a bigger app, you&#8217;d want to be more organized.</p>\n<pre lang=\"javascript\">\n// /routes/index.js\nrouter.get('/handle_slack_callback', (req, res) => {\n    console.log(req.session.grant.response);\n    \n    // this is a good opportunity to save the token in a DB of some sort\n    res.end(JSON.stringify(req.session.grant.response, null, 2));\n});\n</pre>\n<p>Now you can go to <code>https://swizec.ngrok.io/connect/slack</code> and do the dance.</p>\n<img src=\"http://swizec.com/blog/wp-content/uploads/2016/10/oauth-dance.gif\" alt=\"oauth-dance\" class=\"alignnone size-full wp-image-7131\" />\n<p>Save that <code>access_token</code>. It lets you post to Slack as an app.</p>\n<p>Now that you&#8217;ve seen mine, you can make a thing that keeps posting to my test Slack channel. That would be mean of you but also kinda cool in that <em>&#8220;Whoa, the internet is humans!&#8221;</em> kind of way.</p>\n<h2>Twilio â†’ Slack â†’ Twilio</h2>\n<p>Now comes the tricky part: making Slack and Twilio talk to each other. Here&#8217;s a diagram that explains the flow of events.</p>\n<p>The key trick to reading this diagrams: the vertical line is time. Starts on top, flows down.</p>\n<figure>\n<img src=\"http://i.giphy.com/O0zzKlplE932w.gif\" alt=\"\" /><br />\n</figure>\n<p>Step-by-step in code, that gif looks like this:</p>\n<h3>Phone call from Twilio</h3>\n<pre lang=\"javascript\">\n// routes/index.js\nrouter.post('/call', function (req, res, next) {\n    const caller = req.body.Caller;\n    const callSid = req.body.CallSid;\n    const twilio = require('twilio');\n    let twiml = new twilio.TwimlResponse();\n    twiml.say('Hello! State your name, then press any key.', {voice: 'alice'});\n    twiml.record({\n        action: `/call/recording/${callSid}`,\n        maxLength: 60\n    });\n    res.type('text/xml');\n    res.send(twiml.toString());\n});\n</pre>\n<p>TwiML is Twilio&#8217;s XML format that you can use to tell their servers what to do with a phone call. In this case we&#8217;re saying a greeting and asking Twilio to record what a person says.</p>\n<h3>Get recording + send Slack</h3>\n<pre lang=\"javascript\">\n// routes/index.js\nrouter.post('/call/recording/:callSid', (req, res, next) => {\n    const callSid = req.params.callSid;\n    const twiml = new twilio.TwimlResponse();\n    const recordingUrl = req.body.RecordingUrl;\n    \n    const twilio = require('twilio'),\n          WebClient = require('@slack/client').WebClient;\n        const webSlack = new WebClient(TOKEN_FROM_BEFORE);\n        // Sets up Slack message\n    let data = {\n        attachments: [{\n            fallback: 'Somebody is at the door',\n            title: 'Somebody is at the door',\n            title_link: recordingUrl,\n            text: 'Click link to hear the recording',\n            callback_id: `door_open:${callSid}`,\n            actions: [\n                {\n                    name: 'open_door',\n                    text: 'Let them in',\n                    type: 'button',\n                    value: 'open_door'\n                },\n                {\n                    name: 'deny_access',\n                    text: 'No.',\n                    type: 'button',\n                    value: 'deny_access'\n                }\n            ]\n        }]\n    };\n    /* Post on Slack, pause Twilio phone call */\n    webSlack.chat.postMessage('#bot-testing', '', data, () => {\n        twiml.say('Thank you. Please hold.', {voice: 'alice'});\n        twiml.pause({length: 240});\n        twiml.say('Sorry, nobody pressed the button. Try calling a real human.', {voice: 'alice'});\n        res.type('text/xml');\n        res.send(twiml.toString());\n    });\n});\n</pre>\n<p>Most of this code is setting up the Slack message. We send it to Slack and in the callback, when we know it&#8217;s sent, we use TwiML to ask Twilio to pause the call for 240 seconds. </p>\n<p>If the time is up, we say something. In most cases, the pause will be interrupted by a Slack callback.</p>\n<p>The message we sent looks like this:</p>\n<figure>\n<img src=\"http://i.imgur.com/lFiUoxb.png\" alt=\"\" /><br />\n</figure>\n<h3>Slack button pressed</h3>\n<pre lang=\"javascript\">\n// router/index.js\nrouter.post('/slack/response', (req, res, next) => {\n    const payload = JSON.parse(req.body.payload);\n    const callSid = payload.callback_id.split(':')[1];\n    const action = payload.actions[0];\n    const twilio = require('twilio');\n    const client = twilio(settings.twilio.accountSid, settings.twilio.authToken); // you get these in your Twilio dashboard\n    let continueAt = '',\n        lettingIn = false;\n    if (action.value === 'open_door') {\n        continueAt = 'call/open_the_door'\n        lettingIn = true;\n    }else{\n        continueAt = 'call/dont_open_door';\n        lettingIn = false;\n    }\n    client.calls(callSid).update({\n        url: `https://swizec.ngrok.io/${continueAt}`,\n        method: 'POST'\n    }, (err, call) => {\n        res.send({\n            text: lettingIn ? \"Letting them in\" : \"Telling them to go away\"\n        });\n    });\n});\n</pre>\n<p>We find out which button was pressed in <code>payload.actions</code>. They&#8217;re the same strings as we set up earlier â€“ <code>open_door</code> is a <code>Yes</code>, anything else is a <code>No</code>.</p>\n<p><code>callSid</code> tells us which phone call we&#8217;re responding to. That&#8217;s why we put it in <code>callback_id</code> earlier ðŸ™‚</p>\n<p>With <code>client.calls(callSid)</code>, we ask Twilio to let us continue the paused phone call. For some reason, we can&#8217;t directly tell the API what to say, but instead we have to set up more routes in our server.</p>\n<p>In the callback, when we know Twilio knows what we want, we send a response to Slack, which updates the message that a user clicked on.</p>\n<h3>Finish the call</h3>\n<pre lang=\"javascript\">\n// routes/index.js\nconst twilio = require('twilio');\nrouter.post('/call/open_the_door', (req, res, next) => {\n    const twiml = new twilio.TwimlResponse();\n    twiml.say('Greetings! Come on up.', {voice: 'alice'});\n    twiml.play({digits: 9});\n    res.type('text/xml');\n    res.send(twiml.toString());\n});\nrouter.post('/call/dont_open_door', (req, res, next) => {\n    const twiml = new twilio.TwimlResponse();\n    twiml.say('Sorry, nobody pressed the button. Try calling a real human.', {voice: 'alice'});\n    res.type('text/xml');\n    res.send(twiml.toString());\n});\n</pre>\n<p>You can guess what this does, can&#8217;t you? If the <code>Yes</code> button was pressed, we tell the caller to come in and send a dial tone. If the <code>No</code> button was pressed, we ask the caller to try contacting a human.</p>\n<p>In theory, that dial tone asks the building buzzer to open the door. But I haven&#8217;t tried this in the wild yet. ?</p>\n<p>Happy slacktwillying!</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"d313ccc5-0c03-5218-90af-af3eb04c9d2c"}}