{"data":{"wordpressPost":{"title":"Declarative D3 charts with React 16.3","content":"<p>The new React 16.3 brings some changes to the ecosystem that change how we go about integrating <a href=\"https://swizec.com/reactd3js\">React and D3</a> to build data visualizations. I previously wrote about this in <a href=\"https://swizec.com/blog/declarative-d3-transitions-react/swizec/8323\">Declarative D3 transitions with React 16.3</a></p>\n<p><code>componentWillReceiveProps</code>, <code>componentWillUpdate</code> and <code>componentWillMount</code> are on their way out. They were great for making <a href=\"https://swizec.com/reactd3js\">React and D3</a> happy together, but they cause issues with async rendering that the React team is planning for React 17.</p>\n<p>You tend to use those now-deprecated lifecycle methods to update D3 objects‚Äô internal state. Things like setting scale domains and ranges, updating complex D3 layouts, setting up transitions, etc.</p>\n<p>But you don‚Äôt need to! You can do it all with the new lifecycle API.</p>\n<p>Here‚Äôs a small example of building a bar chart with React 16.3. Using only approved lifecycle callbacks üòè</p>\n<p><iframe src=\"https://www.youtube.com/embed/kH7bnSX9t4Q\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></p>\n<p>You can play with it on CodeSandbox üëá</p>\n<p><iframe style=\"width: 100%; height: 500px; border: 0; border-radius: 4px; overflow: hidden;\" src=\"https://codesandbox.io/embed/lq0yr1lnq?module=%2Fsrc%2FBarChart.js\" width=\"300\" height=\"150\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe></p>\n<h2>How it works</h2>\n<p>The core problem we&#8217;re solving is that D3 objects like to keep internal state and React doesn&#8217;t like that. We have to update D3 objects whenever our React component gets new props.</p>\n<p>You have to update a scale mapping data to x-axis pixels whenever either data or width change. Traditionally you would do that in <code>componentWillReceiveProps</code>.</p>\n<p>React docs recommend replacing <code>componentWillReceiveProps</code> with <code>componentDidUpdate</code>, but that leads to rendering stale charts. If you update your D3 scales <em>after</em> your component re-renders, that&#8217;s too late.</p>\n<p>Instead, we can move our scales into <code>state</code> and use <code>getDerivedStateFromProps</code>. ü§Ø</p>\n<img src=\"https://swizec.com/blog/wp-content/uploads/2018/04/d3react16.3-699x1024.png\" alt=\"d3 react 16.3\" class=\"aligncenter size-large wp-image-8354\" srcset=\"https://swizec.com/blog/wp-content/uploads/2018/04/d3react16.3-699x1024.png 699w, https://swizec.com/blog/wp-content/uploads/2018/04/d3react16.3-205x300.png 205w, https://swizec.com/blog/wp-content/uploads/2018/04/d3react16.3-768x1126.png 768w, https://swizec.com/blog/wp-content/uploads/2018/04/d3react16.3.png 1194w\" sizes=\"(max-width: 699px) 100vw, 699px\" />\n<p>That&#8217;s right, you can have complex objects in state now. It&#8217;s totally safe.</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p dir=\"ltr\" lang=\"en\">No that‚Äôs fine, React won‚Äôt change them, it‚Äôs one of the new ‚Äúwas bad practice but is fine now‚Äù things that comes with async. You can even mutate their properties.</p>\n<p>‚Äî Ryan Florence (@ryanflorence) <a href=\"https://twitter.com/ryanflorence/status/984513942696296448?ref_src=twsrc%5Etfw\">April 12, 2018</a></p></blockquote>\n<p>Here&#8217;s the gist of it üëá</p>\n<h3>D3 in state</h3>\n<p>Defining D3 objects as component properties used to be best. Now you should do it in your component <code>state</code>.</p>\n<pre><code>class BarChart extends React.Component {\n  state = {\n    widthScale: d3\n      .scaleBand()\n      .domain(d3.range(0, this.props.data.length))\n      .range([0, this.props.width]),\n\n    heightScale: d3\n      .scaleLinear()\n      .domain([0, d3.max(this.props.data)])\n      .range([0, this.props.height])\n  };\n</code></pre>\n<p>We define a <code>widthScale</code> and a <code>heightScale</code>. Each has a <code>domain</code> and a <code>range</code> that both depend on <code>this.props</code>. Yes you can do that in <a href=\"http://2ality.com/2017/07/class-fields.html\">JavaScript class fields</a> syntax.</p>\n<h3>Update D3 in getDerivedStateFromProps</h3>\n<p>You then use <code>getDerivedStateFromProps</code> to keep those scales up to date when your component updates.</p>\n<pre><code>  static getDerivedStateFromProps(nextProps, prevState) {\n    let { widthScale, heightScale } = prevState;\n\n    widthScale.domain(d3.range(0, nextProps.data.length));\n    heightScale.domain([0, d3.max(nextProps.data)]);\n\n    prevState = { ...prevState, widthScale, heightScale };\n    return prevState;\n  }\n</code></pre>\n<p>It&#8217;s a static method, which means no <code>this</code> keyword for you, you&#8217;re running on the class, not an instance. You get the new props and the current state.</p>\n<p>Take <code>widthScale</code> and <code>heightScale</code> out of props, update their domains, put them back. Probably should update their ranges too.</p>\n<h3>Render your chart</h3>\n<p>Now that your scales are always up to date, you can render your chart. Same as usual, D3 for props, React for rendering.</p>\n<pre><code>  render() {\n    const { x, y, data, height } = this.props,\n      { widthScale, heightScale } = this.state;\n\n    return (\n      <g transform={`translate(${x}, ${y})`}>\n        {data.map((d, i) => (\n          <rect\n            x={widthScale(i)}\n            y={height - heightScale(d)}\n            width={widthScale.bandwidth()}\n            height={heightScale(d)}\n          />\n        ))}\n      </g>\n    );\n  }\n</code></pre>\n<p>Get chart coordinates, <code>data</code>, and <code>height</code> from props. Grab <code>widthScale</code> and <code>heightScale</code>. Return a <code>&lt;g&gt;</code> element full of rectangles.</p>\n<p>Each rectangle is rendered in a loop and takes its coordinates and dimensions from our scales.</p>\n<p>The result after a splash of color: A BarChart of random numbers where height and color correlate to the value.<br />\n<a href=\"https://codesandbox.io/s/lq0yr1lnq\"><img src=\"https://swizec.com/blog/wp-content/uploads/2018/04/chart-screenshot.png\" alt=\"Simple chart in D3 and React 16.3\" class=\"aligncenter size-full wp-image-8355\" srcset=\"https://swizec.com/blog/wp-content/uploads/2018/04/chart-screenshot.png 857w, https://swizec.com/blog/wp-content/uploads/2018/04/chart-screenshot-300x252.png 300w, https://swizec.com/blog/wp-content/uploads/2018/04/chart-screenshot-768x645.png 768w\" sizes=\"(max-width: 857px) 100vw, 857px\" /></a><br />\nI also made a button that lets you add random values to the chart. That way you can see that it&#8217;s updating perfectly declaratively. Update props and the chart updates. No need to understand implementation details.</p>\n<p>You can <a href=\"https://codesandbox.io/s/lq0yr1lnq\">play with it on CodeSandbox</a>.</p>\n<h2>Pushing it too far</h2>\n<p>You can render 100,000 SVG nodes in CodeSandbox if you&#8217;re patient. Then you can&#8217;t edit your code anymore.</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">You can render 100,000 SVG elements in <a href=\"https://twitter.com/codesandboxapp?ref_src=twsrc%5Etfw\">@codesandboxapp</a> and then you can&#39;t edit your code anymore.</p>\n<p>üëâ¬†<a href=\"https://t.co/8IQCpZteAq\">https://t.co/8IQCpZteAq</a> <a href=\"https://t.co/NRjp7iVWrE\">pic.twitter.com/NRjp7iVWrE</a></p>\n<p>&mdash; Swizec (@Swizec) <a href=\"https://twitter.com/Swizec/status/989909019463630848?ref_src=twsrc%5Etfw\">April 27, 2018</a></p></blockquote>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"9bea1784-f06c-5cfa-b60c-15b6ba079b0d"}}