{"data":{"wordpressPost":{"title":"Functional isn&#8217;t always better","content":"<div class=\"zemanta-img\" style=\"margin: 1em; display: block;\">\n<div style=\"width: 310px\" class=\"wp-caption alignright\"><a href=\"http://commons.wikipedia.org/wiki/File:BDSM_collar_back.jpg\"><img title=\"A BDSM-style collar that buckles in the back. ...\" src=\"http://swizec.com/blog/wp-content/uploads/2011/10/300px-BDSM_collar_back3.jpg\" alt=\"A BDSM-style collar that buckles in the back. ...\" width=\"300\" height=\"200\" /></a><p class=\"wp-caption-text\">Image via Wikipedia</p></div>\n</div>\n<p>For a long time now I&#8217;ve been completely in love with <a class=\"zem_slink\" title=\"Functional programming\" href=\"http://en.wikipedia.org/wiki/Functional_programming\" rel=\"wikipedia\">functional programming</a> to the point that I write functional-style code even in run of the mill normal languages.</p>\n<p>There are many reasons I like functional code, the paper <em><a href=\"http://www.cse.chalmers.se/~rjmh/Papers/whyfp.html\" target=\"_blank\">Why functional programming matters</a></em>, by John Hughes sums up my opinion perfectly.</p>\n<p>A few days ago I came upon a problem that killed my idea of functional code being superior and awesome beyond belief. This might have happened because I&#8217;m not a very good functional programmer yet, or the tool I was using (javascript) just doesn&#8217;t support the right things &#8230; but I doubt I would have written it any better in clojure.</p>\n<p>The problem is one of turning a list of values, say, <em>[A, B, C, D]</em> into a list of pairs with itself, like so <em>[[A,B], [A,C], [A,D], [B, C], [B,D], [C,D]].</em></p>\n<p>Should be simple enough right? You just make another list shifted by one to the left, make a zip, then repeat until the second list is empty. This solution turns out to be horrible, looks ugly and I&#8217;m not even going to show it. So here&#8217;s my second functional solution &#8230; it&#8217;s a lot cleaner.</p>\n<pre lang=\"javascript\">function pairs_functional2(data) {\r\n    return _.reduce(_.map(_.range(1, _.size(data)),\r\n                         function (i) {\r\n                             return _.map(_.rest(data, i),\r\n                                          function (item) {\r\n                                              return [data[i-1], item];\r\n                                          });\r\n                         }),\r\n                   function (memo, pairs) {\r\n                       _.map(pairs, function (pair) {\r\n                           memo.push(pair);\r\n                       });\r\n                       return memo;\r\n                   }, []);</pre>\n<p>A little <a class=\"zem_slink\" title=\"Syntactic sugar\" href=\"http://en.wikipedia.org/wiki/Syntactic_sugar\" rel=\"wikipedia\">syntactic sugar</a> wouldn&#8217;t hurt &#8230; writing a lambda in javascript isn&#8217;t the cleanest of beasts. That final reduce down there also isn&#8217;t the best of things from a functional standpoint. I don&#8217;t like that push, but honestly I didn&#8217;t know how to do that better.</p>\n<p>Here&#8217;s an iterative solution for comparison:</p>\n<pre lang=\"javascript\">function pairs_iterative(data) {\r\n    var out = [];\r\n    for (var i=0; i < _.size(data); i++) {\r\n        for (var j=i+1; j < _.size(data); j++) {\r\n            out.push([data[i], data[j]]);\r\n        }\r\n    }\r\n    return out;\r\n}</pre>\n<p>I haven't looked at performance, but both implementations are functionally the same ... I'm feeling a bit at a loss here. Am I doing something stupid in the first implementation? Or is this just the kind of problem that fits iterative programming better than functional?</p>\n<p>I'm tempted to do an implementation in clojure just to see if this thing looks so ugly in javascript on account of the syntax ...</p>\n<p>PS: the original implementation uses underscore.js so it works in all browsers just as the iterative would. Also I don't think javascript natively has enough such functions ... it would be even uglier.</p>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles</h6>\n<ul class=\"zemanta-article-ul\">\n<li class=\"zemanta-article-ul-li\"><a href=\"http://www.exampler.com/blog/2011/09/23/further-reading-for-functional-programming-for-object-oriented-programmers/\">Exploration Through Example \" Blog Archive \" Further reading for \"Functional Programming for Object-Oriented Programmers\"</a> (exampler.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://drknucklehead.wordpress.com/2011/10/02/what-is-clojure-who-should-use-it/\">What is Clojure? Who Should Use It?</a> (drknucklehead.wordpress.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://drknucklehead.wordpress.com/2011/09/13/its-all-functional/\">It's All Functional?</a> (drknucklehead.wordpress.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"https://github.com/koush/node/wiki/%22async%22-support-in-node.js\">Fixing the callback spaghetti in node.js</a> (github.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://sqlserverbiblog.wordpress.com/2011/09/29/using-custom-code-to-synchronize-different-datasets/\">Using Custom Code to Synchronize Different Datasets</a> (sqlserverbiblog.wordpress.com)</li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=5c60557d-32ea-42be-a3e9-35af7702a974\" alt=\"Enhanced by Zemanta\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"346e0680-54c7-5686-93d8-44db3af5507f"}}