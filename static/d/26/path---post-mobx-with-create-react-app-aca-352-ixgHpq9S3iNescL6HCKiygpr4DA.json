{"data":{"wordpressPost":{"title":"How to use MobX with create-react-app","content":"<img class=\"alignnone size-full wp-image-7157\" src=\"http://swizec.com/blog/wp-content/uploads/2016/10/react-eject.png\" alt=\"\" srcset=\"https://swizec.com/blog/wp-content/uploads/2016/10/react-eject.png 460w, https://swizec.com/blog/wp-content/uploads/2016/10/react-eject-300x74.png 300w\" sizes=\"(max-width: 460px) 100vw, 460px\" />\n<p><code>create-react-app</code> is the best thing that&#8217;s happened to the React ecosystem since React 14 gave us functional components. No more messing around with random boilerplates or manual headaches around setting up your project from scratch.</p>\n<p>Instead, you run <code>create-react-app MyThing</code>, and it sets everything up.</p>\n<p>If you like MobX, there&#8217;s a crucial piece missing: decorators. You don&#8217;t have to use decorators with MobX, but that&#8217;s like saying you don&#8217;t <em>have to</em> use JSX with React. You don&#8217;t &#8220;have to”; you &#8220;want to&#8221;. Because that&#8217;s what the library was designed for.</p>\n<p>MobX is a state management competitor to Redux, by the way. I like it because there&#8217;s almost no boilerplate. We&#8217;ve been using at The Day Job™ and it&#8217;s been amaze so far.</p>\n<p>A React component that reacts to MobX data store changes would use the <code>@observer</code> decorator. Like this:</p>\n<pre lang=\"javascript\">\nimport React, { Component } from 'react';\nimport { observer } from 'mobx-react';\n@observer\nclass Hello extends Component {\n    render() {\n        return <h1>Hello {this.props.store.name}</h1>\n    }\n}\n</pre>\n<p>You can think of decorators as function wrappers. A sort of functional composition, if you will.</p>\n<p>The observer decorator automatically runs a component’s <code>render</code> method when MobX detects a change in a store value that <code>render</code> references. Yes, MobX circumvents React&#8217;s own prop and state change detection.</p>\n<p>I&#8217;m not sure yet how I feel about that, but so far, so good. Can&#8217;t complain.</p>\n<p>It&#8217;s those decorators that make working with MobX powerful and concise. But <code>create-react-app</code> doesn&#8217;t enable them because of some interesting history. They used to be in Babel 5, then Babel 6 removed them because the official spec got pushed back.</p>\n<p>There&#8217;s a Babel plugin you can use, but <code>create-react-app</code> maintainers have decided not to include it.</p>\n<h2>How to get decorators in create-react-app</h2>\n<p>Ok, so here&#8217;s what you do when setting up a new React app:</p>\n<p><strong>1)</strong> Run <code>create-react-app</code>. This creates a new app with the official configuration.</p>\n<p><strong>2)</strong> Run <code>npm run eject</code>. This moves files around and makes your app&#8217;s configuration accessible.</p>\n<p><strong>3)</strong> Run <code>npm install --saveDev babel-plugin-transform-decorators-legacy</code>. This installs the Babel plugin for decorators. It&#8217;s called <code>legacy</code> even though it&#8217;s a feature from the far future.</p>\n<p><strong>4)</strong> Open <code>package.json</code>, find the <code>\"babel\"</code> section (line 78 for me), and add 4 lines so it looks like this:</p>\n<pre><code>\"babel\": {\n\"plugins\": [\n\"transform-decorators-legacy\"\n],\n\"presets\": [\n\"react-app\"\n]\n},\n</code></pre>\n<p><strong>5)</strong> Run <code>npm install --save mobx mobx-react</code>. This installs MobX.</p>\n<p>You&#8217;re ready to go. Happy hacking! ?</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"9ca5e7ba-14af-5c73-b06c-9ced49797e28"}}