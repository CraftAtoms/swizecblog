{"data":{"wordpressPost":{"title":"How to populate react-redux-form with dynamic default values","content":"<p><iframe width=\"580\" height=\"326\" src=\"https://www.youtube.com/embed/O0P7YIiQm4Y?start=3579&#038;feature=oembed\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe></p>\n<p>Here&#8217;s a problem that took me embarrassingly long to solve: How do you populate dynamic values into a <a href=\"https://github.com/davidkpiano/react-redux-form\">react-redux-form</a>?</p>\n<p>First of all, react-redux-form is not the same as <a href=\"https://github.com/erikras/redux-form\">redux-form</a>. They&#8217;re similar but not the same. The internet is confused about this issue, and that makes googling hard.</p>\n<p>Second of all, we&#8217;re talking about a form driven by Redux. Pre-filling it with default values should be as easy as filling out its Redux state. Right?</p>\n<p>Well, forms live in their own reducers that you don&#8217;t have direct access to. They use a bunch of internal state to mark inputs as dirty and focused and whatnot. It&#8217;s a mess.</p>\n<p>Let&#8217;s start at the beginning.</p>\n<h2>A simple react-redux-form</h2>\n<p>Here&#8217;s a simple form built using react-redux-form. It has two input fields. When you Submit, it outputs your values to the console.</p>\n<p class='codepen'  data-height='265' data-theme-id='0' data-slug-hash='Wdqgrp' data-default-tab='js,result' data-animations='run' data-editable='' data-embed-version='2'>\nSee the Pen <a href='https://codepen.io/swizec/pen/Wdqgrp/'>ReactReduxForm â€“ Quick Start</a> by Swizec Teller (<a href='https://codepen.io/swizec'>@swizec</a>) on <a href='https://codepen.io'>CodePen</a>.0</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n<p>Borrowed the code straight from <a href=\"https://twitter.com/davidkpiano\">@davidkpiano&#8217;s</a> official Quick Start example.</p>\n<p>Our form starts with a model and a Redux store:</p>\n<pre lang=\"javascript\">\nconst initialUserState = {\n  firstName: '',\n  lastName: '',\n};\n\nconst store = createStore(combineForms({\n  user: initialUserState,\n}), applyMiddleware(thunk));\n</pre>\n<p><code>initialUserState</code> describes the shape of a user and <code>combineForms</code> creates a special reducer. That reducer takes care of driving the UI for our form and storing values.</p>\n<p>You&#8217;d think you could add default values to <code>initialUserState</code>, and you can. Hold that thoughtâ€¦ let&#8217;s make sure we understand react-redux-form first ðŸ™‚</p>\n<p>The form itself comes in as a React component using <code>&lt;Control&gt;</code> elements from react-redux-form.</p>\n<pre lang=\"javascript\">\nclass UserForm extends Component {\n  handleSubmit(values) {\n    console.log(values);\n  }\n  render() {\n    return (\n      <Form\n        model=\"user\"\n        onSubmit={(values) => this.handleSubmit(values)}\n      >\n        <div className=\"field\">\n          <label>First name:</label>\n          <Control.text model=\"user.firstName\"  />\n        </div>\n\n        <div className=\"field\">\n          <label>Last name:</label>\n          <Control.text model=\"user.lastName\" />\n        </div>\n\n        <button type=\"submit\">\n          Submit\n        </button>\n      </Form>\n    )\n  }\n}\n</pre>\n<p><code>handleSubmit</code> is the function we call when a user submits either by pressing the Submit button or hitting Enter. In our case, it prints values to the console.</p>\n<p>The <code>render</code> method uses a <code>&lt;Form&gt;</code> component from react-redux-form. It comes with all the necessary Redux wiring so we don&#8217;t have to worry about that.</p>\n<p>We use the children of that component to define how it renders. In our case, that&#8217;s two <code>div</code>s, some labels, a submit button, and two <code>&lt;Control.text&gt;</code> components.</p>\n<p><code>&lt;Control.X&gt;</code> components come with all the necessary wiring for our form to work. They&#8217;ll handle focus, blur, default values, matching to correct parts of our model and so on. Everything we don&#8217;t want to worry about manually.</p>\n<p>Wonderful ðŸ‘Œ</p>\n<h2>Static versus Dynamic default values</h2>\n<p>Back to that obvious thought. Why can&#8217;t you just use <code>initialUserState</code> to define default values?</p>\n<p>You can. As long as your default values are static.</p>\n<p>Let me explain.</p>\n<p>Your default form values are static, if you know them in advance. Like when you&#8217;re writing your code. This is pretty rare.</p>\n<p>What if you&#8217;re building an edit form? You can&#8217;t know values for your form until the user chooses what they&#8217;re editing.</p>\n<p>And that&#8217;s when trouble begins.</p>\n<h2>Fill react-redux-form with dynamic default values</h2>\n<p><a href=\"https://twitter.com/lukeed05\">@lukeed05</a> helped me find the solution during livecoding. Thanks, mate.</p>\n<p>Here&#8217;s how you do it:</p>\n<p><code>react-redux-form</code> comes with a bunch of model actions. Actions its reducer understands. Actions it can use to do special things. Like populate your form.</p>\n<p class='codepen'  data-height='320' data-theme-id='0' data-slug-hash='wpLEEq' data-default-tab='js,result' data-animations='run' data-editable='' data-embed-version='2'>\nSee the Pen <a href='https://codepen.io/swizec/pen/wpLEEq/'>ReactReduxForm â€“ Dynamic Default Values</a> by Swizec Teller (<a href='https://codepen.io/swizec'>@swizec</a>) on <a href='https://codepen.io'>CodePen</a>.0</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n<p>Tap the &#8220;Change Defaults&#8221; button to pick a new random user. Its name will populate the form, and you can edit to your heart&#8217;s content.</p>\n<p>To make that work, we used a Redux action generator called <code>actions.merge</code>. It lets us merge the form model with a new set of default values.</p>\n<p>First we connect our <code>UserForm</code> component to Redux.</p>\n<pre lang=\"javascript\">\nconst mapDispatchToProps = {\n  setDefaultUser: (values) => actions.merge('user', values)\n}\nconst ConnectedForm = connect(null, mapDispatchToProps)(UserForm);\n</pre>\n<p>The usual stuff. Use <code>connect</code> to connect to Redux, there&#8217;s no props we need from state, and we use <code>mapDispatchToProps</code> to add a dispatch function called <code>setDefaultUser</code>.</p>\n<p><code>setDefaultUser</code> is a curried application of <code>actions.merge</code>. Takes a value object and merges it with the <code>user</code> model in our store.</p>\n<p>I wired it to an <code>onClick</code> callback in this example so you can try it multiple times.</p>\n<pre lang=\"javascript\">\n  changeUser() {\n    this.props.setDefaultUser(\n       randomUsers[Math.floor(Math.random()*randomUsers.length)]\n    )\n  }\n</pre>\n<p>Another approach you can use is to call this action in <code>componentDidMount</code>. That gives you true defaults â€“&nbsp;a form populated as soon as a user sees it.</p>\n<p>Happy hacking ðŸ¤“</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"11845b08-6f3a-5507-80bf-37a332da5722"}}