{"data":{"wordpressPost":{"title":"Week 16: On the criteria to be used in decomposing systems into modules","content":"<p><em>[This post is part of an ongoing challenge to understand 52 papers in 52 weeks. You can read previous entries, <a href=\"http://swizec.com/blog/category/52-papers-in-52-weeks\">here</a>, or subscribe to be notified of new posts by <a href=\"http://swiz.ec/52papers-list\">email</a>]</em></p>\n<p>In December 1972, David L. Parnas published <a href=\"https://www.cs.umd.edu/class/spring2003/cmsc838p/Design/criteria.pdf\"><em>On The Criteria To Be Used In Decomposing Systems Into Modules</em></a> and set the stage for the concept of <a class=\"zem_slink\" title=\"Information hiding\" href=\"http://en.wikipedia.org/wiki/Information_hiding\" target=\"_blank\" rel=\"wikipedia\">information hiding</a> in systems design.</p>\n<p>Information hiding is one the main principles used in modern programming so this paper is one big d&#8217;oh. But remember, this was written <strong>42 years ago</strong>.</p>\n<p>Then again, I run into code that forces me to intimately understand its internals on a daily basis. Pay attention!</p>\n<h2 id=\"what-is-modularization\">What is modularization</h2>\n<p><a class=\"zem_slink\" title=\"Modularity\" href=\"http://en.wikipedia.org/wiki/Modularity\" target=\"_blank\" rel=\"wikipedia\">Modularization</a> gives us three main benefits:</p>\n<ol>\n<li>shorter dev time &#8211; teams can work in parallel</li>\n<li>flexibility &#8211; you can change parts of system without affecting others</li>\n<li>comprehensibility &#8211; you can understand one piece at a time</li>\n</ol>\n<p>Mind you, we aren&#8217;t talking about subprograms or objects or whatever. Modularization is something you have to do <em>before</em> any of that, when you&#8217;re just deciding how to split a problem into responsibilities.</p>\n<p>For example, let&#8217;s take a simple <a class=\"zem_slink\" title=\"Key Word in Context\" href=\"http://en.wikipedia.org/wiki/Key_Word_in_Context\" target=\"_blank\" rel=\"wikipedia\">KWIC index</a>. You get an ordered set of lines, which contains an ordered set of words, which are ordered sets of characters. Lines can be circularly shifted by taking the first word and placing it at the end.</p>\n<p>The KWIC system outputs a listing of all circular shifts in alphabetical order.</p>\n<p>These days, that&#8217;s not very difficult. But in 1972 this was a problem that would take a good programmer one or two weeks to solve according to Parnas. Interesting.</p>\n<p>He proposes two different modularizations:</p>\n<ol>\n<li>Input module &#8211; reads data lines, stores them in the core for further processing</li>\n<li><a class=\"zem_slink\" title=\"Circular shift\" href=\"http://en.wikipedia.org/wiki/Circular_shift\" target=\"_blank\" rel=\"wikipedia\">Circular Shift</a> module &#8211; prepares an index of circular shifts</li>\n<li>Alphabetizing module &#8211; uses the previous results to alphabetize the circular shift index</li>\n<li>Output module &#8211; uses the alphabetized index and stored lines to create a nice output</li>\n<li>Master Control module &#8211; makes sure other modules are called in the right order</li>\n</ol>\n<p>This modularization makes sense. All modules are small, have well defined interfaces, and according to Parnas this is the first design most programmers will come up with.</p>\n<ol>\n<li>Line Storage module &#8211; provides a bunch of functions to work with strings, essentially</li>\n<li>Input module &#8211; reads data, uses Line Storage to store it</li>\n<li>Circular Shifter module &#8211; has a function that builds the index, then gives similar interface to module 1, but for shifted lines</li>\n<li>Alphabetizer module &#8211; a function that alphabetizes and another that retrieves according to the index</li>\n<li>Output module &#8211; prints stuff</li>\n<li>Master Control module &#8211; as above, drives the whole process</li>\n</ol>\n<p>This modularization sounds a lot closer to what we call objects these days and generally smells like modern programming. Instead of modules doing stuff and saving data that other modules operate on, they are a collection of functions that act as an interface. Shiny.</p>\n<h2 id=\"the-criteria\">The criteria</h2>\n<p>Both of those modularizations work. The system will do what it&#8217;s told in both cases. Neither is much more complex than the other, and neither has hidden performance issues. Hell, they could both use the same algorithms!</p>\n<p>However, the second is <em>much</em> easier to work with. Let&#8217;s see.</p>\n<p><strong>Changeability</strong>. We might want to change a bunch of things at a later date. Everything from the input format to how lines are stored in memory. With the first modularization everybody needs to know how lines are stored, whereas the second hides that information from everything but <em>Line Storage</em>.</p>\n<p>This is the case with almost any change you can think of. From changing how alphabetization works to changing whether the circular index is calculated on the fly or stored. First modularization necessitates poking everything every time. The second does not.</p>\n<p>The first modularization doesn&#8217;t help much with <strong>Independent Development</strong> either. Everybody needs to agree on formats, and storing things, and whatnot. A lot of work. The second modularization is just a bunch of abstract interfaces, which is fairly quick to agree on.</p>\n<p>Subjectively, the second modularization also has greater <strong>comprehensibility</strong> because you don&#8217;t have to understand how everything else works just to read the output module. With the first, you always have to understand the whole system.</p>\n<p>You&#8217;ll quickly notice that the first system was designed out of a flowchart. Think about data flowing through the system from input to output, each step gets a big box &#8211; turn those boxes into modules.</p>\n<p>The second was designed according to information hiding. How can we decompose this problem into modules so as much of the details are hidden as possible?</p>\n<p>This creates a system that is easier to work with and can make a huge difference in how much technical debt you accumulate over the years. Parnas only warns that the second modularization could pose a performance issue if you aren&#8217;t careful about implementation. Everything keeps calling everything.</p>\n<h2 id=\"hierarchical-structure\">Hierarchical structure</h2>\n<p>There is also a hierarchy to the second modularization.</p>\n<p><em>Line Storage</em> doesn&#8217;t use any of the other modules, so it&#8217;s level 1. <em>Input</em> and <em>Circular Shifter</em> do need <em>Line Storage</em>, so they&#8217;re level 2. <em>Alphabetizer</em> and <em>Output</em> need the circular shifts so they&#8217;re level 3.</p>\n<p>But line storage and circular shifter are somewhat compatible. We could alphabetize/output just the raw lines via some sort of parametrization. Our system can run at two levels of hierarchy! Cool.</p>\n<p>What&#8217;s really cool here, though, is that this hierarchy allows us to <em>reuse</em> parts of the system. Line Storage can be used for anything that needs to store strings, for instance</p>\n<p>At any point we can prune the higher levels in the hierarchy and build something new!</p>\n<p>More importantly, those higher levels are greatly simplified by reusing the lower parts. It&#8217;s pretty nifty.</p>\n<h2 id=\"fin\">Fin</h2>\n<p>As you can see, Parnas had some really good ideas here. So good in fact we still consider software that is well designed to follow these principles.</p>\n<p>We have databases that handle our data, and servers take care of serving, and there&#8217;s a piece that talks to views, and models talk to the database, and there&#8217;s a piece that handles interactivity with the user. All the frameworks we use these days are designed with information hiding in mind.</p>\n<p>But we often forget to do that ourselves.</p>\n<p>We build tightly coupled systems just because it&#8217;s the first thing that comes to mind. Or we get sloppy and modules become more and more coupled.</p>\n<p>Code like that sucks to work with so keep information hiding in mind next time you can no longer decide where a new function is supposed to go.</p>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/?px\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" alt=\"Enhanced by Zemanta\" src=\"http://img.zemanta.com/zemified_e.png?x-id=1cd36eb5-c19b-4e2b-9e2a-90c200f1aec0\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"751f1133-883e-515d-b905-3c2dcb5dc98e"}}