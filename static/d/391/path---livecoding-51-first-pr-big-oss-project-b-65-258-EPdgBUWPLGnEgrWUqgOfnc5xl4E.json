{"data":{"wordpressPost":{"title":"Livecoding 51: I did it! My first PR to a big OSS project \\o/","content":"<p><em>This is a Livecoding Recap ‚Äì an almost-weekly post about interesting things discovered while livecoding. Usually shorter than 500 words. Often with pictures. Livecoding happens almost <strong>every Sunday at 2pm PDT</strong> on multiple channels. You should follow <a href=\"https://www.youtube.com/TheSwizec\">My Youtube</a> channel to catch me live.</em></p>\n<p><iframe width=\"580\" height=\"326\" src=\"https://www.youtube.com/embed/DFz5tHyhkw0?feature=oembed\" frameborder=\"0\" gesture=\"media\" allowfullscreen></iframe></p>\n<p>I did it! The <code>gatsby-transform-remark</code> bug I&#8217;ve been working on for a month yields to my assault o/</p>\n<p>Not because it&#8217;s <em>that</em> difficult of a bug. Oh no. Because I was doing dumb things and jumping into a large project like Gatsby is hard.</p>\n<p>Previous attempts failed first because I couldn&#8217;t get my dev environment to work and then because I made a newbie mistake with <code>yarn.lock</code> and got frustrated. üòÖ</p>\n<p>üëâ <a href=\"https://swizec.com/blog/livecoding-recap-48-why-contributing-to-big-opensource-projects/swizec/7848\">https://swizec.com/blog/livecoding-recap-48-why-contributing-to-big-opensource-projects/swizec/7848</a><br />\nüëâ <a href=\"https://swizec.com/blog/livecoding-recap-50-how-newbie-mistakes-kill-flow/swizec/7901\">https://swizec.com/blog/livecoding-recap-50-how-newbie-mistakes-kill-flow/swizec/7901</a></p>\n<p>The bug was more of a feature, really. When Remark generates a table of contents out of your markdown headers, it uses relative links. Like this üëá</p>\n<pre><code># Heading\n\n## Subheading 1\n\n## Subheading 2\n\n### Subsubheading\n\n## Subheading 3\n</code></pre>\n<p>That turns into an HTML list with <code>#heading</code>, <code>#subheading-1</code> (etc) links. Nesting at all.</p>\n<pre><code>- Heading (#heading)\n  - Subheading 1 (#subheading-1)\n  - Subheading 2 (#subheading-2)\n    - Subsubheading (#subsubheading)\n  - Subheading 3 (#subheading-3)\n</code></pre>\n<p>Imagine all of that is HTML with <code>&lt;ul&gt;</code> and <code>&lt;li&gt;</code> and <code>&lt;a&gt;</code> tags. Laying it out like this is easier to read.</p>\n<p>This works great when you&#8217;re only putting tables of contents on each individual page. Render a markdown document, put a TOC on top. Perfect.</p>\n<p>But it stops working if you want to make a main table of contents for all your documents. All those relative links stop working. <code>Subheading</code> is on an actual path now.</p>\n<p>The fix was to prepend slugs to every URL that <a href=\"https://github.com/BarryThePenguin/mdast-util-toc\"><code>mdast-util-toc</code></a> generates. Best place to do that was deep inside <code>gatsby-transform-remark</code>, in a file called <code>extend-node-type.js</code>.</p>\n<p>As far as I can tell, that file is the whole of the markdown transformer. It takes a markdown GraphQL node (flat text at this point) and extends it into something Gatsby can read to make a React-based HTML page.</p>\n<p>Our fix went into the aptly named <code>getTableOfContents</code> function.</p>\n<pre lang=\"javascript\">\n  const addSlugToUrl = function(node) {\n    if (node.url) {\n      node.url = withPrefix(`${markdownNode.fields.slug}${node.url}`)\n    }\n    if (node.children) {\n      node.children = node.children.map(node => addSlugToUrl(node))\n    }\n\n    return node\n  }\n  tocAst.map = addSlugToUrl(tocAst.map)\n</pre>\n<p>This happens after all the processing that turns a markdown file into an <a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\">abstract syntax tree (AST)</a>. Basic recursion üëá</p>\n<ul>\n<li>get node</li>\n<li>if node has <code>url</code>, change it</li>\n<li>if node has children, call <code>addSlugToUrl</code> to each</li>\n</ul>\n<p>Done üòÅ</p>\n<p>Looks simple now that it works, but it sure took a while. Large codebases are fun like that.</p>\n<p>Now just gotta figure out how to get <em>absolute</em> absolute paths working. You know, when you&#8217;re not deploying your site to <code>/</code> but to <code>/something/</code>. Something to do with the <code>--prefix-paths</code> flag when compiling.</p>\n<p>Thanks to <a href=\"https://twitter.com/lukeed05\">@lukeed05</a> for rubber ducking, and thanks to <a href=\"https://twitter.com/kylemathews\">@kylemathews</a> for answering questions when I got stuck. ‚ù§Ô∏è</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"c91283f0-f46c-5a71-8713-16690a63cba0"}}