{"data":{"wordpressPost":{"title":"How to run JavaScript tests in Chrome on Travis","content":"<div style=\"width: 636px\" class=\"wp-caption alignnone\"><img title=\"Pull request feedback\" alt=\"Pull request feedback\" src=\"https://draftin.com:443/images/26240?token=BeyDvR6IFBnB327WsEOKzB6Yk0NMhuDUEuO9mC8Qq0q77JHXxn_RbTZIQLQaObhLS0RVOjgq2S382Y2bCAmhpbE\" width=\"626\" height=\"105\" /><p class=\"wp-caption-text\">Pull request feedbackAll is well</p></div>\n<p>You test your frontend code, right? And you&#8217;ve got a continuous integration system running, right? <em>Right?</em></p>\n<p>Well you should.</p>\n<p>Code review is <em>a lot</em> easier when you have a magical system to say All Is Well. At least in principle. There are limits to testing, but that&#8217;s a whole different bag of worms.</p>\n<p>Today I want to share a little nugget that took hours of interneting to find. Thanks to everyone in <a href=\"http://stackoverflow.com/questions/19255976/how-to-make-travis-execute-angular-tests-on-chrome-please-set-env-variable-chr\">this</a> and other Stack Overflow threads for originally figuring it out.</p>\n<h2 id=\"the-moving-parts\">The moving parts</h2>\n<p>First you will need <a href=\"http://karma-runner.github.io/0.12/index.html\">karma-runner</a>. It is the single best JavaScript test runner I have ever used.</p>\n<p>Runs in the background when you&#8217;re working, re-runs tests on file change, and doesn&#8217;t care whether you&#8217;re using Jasmine, Mocha, or something else.</p>\n<p>And it&#8217;s so very very fast.</p>\n<p>Next you will need <a href=\"https://travis-ci.org/\">Travis</a>.</p>\n<p>Any continuous integration service will do really &#8211; I&#8217;ve had great success with Circle CI. But this post is about Travis in particular.</p>\n<p>You want something that replicates your environment on a server, runs the tests every time you push to a branch, and shows you the result where it matters most. In the pull request.</p>\n<h2 id=\"the-problem\">The problem</h2>\n<p>When you&#8217;re working Karma runs in the terminal. That&#8217;s where you see the output. But the tests themselves run in a browser or two.</p>\n<p>You point a browser at <code>http://localhost:9678</code> and Karma handles the rest.</p>\n<p>All fine and good. But you can&#8217;t do that on Travis. Not directly at least.</p>\n<p>People usually resort to PhantomJS. A headless browser that&#8217;s happy without a GUI. But sometimes your JavaScript doesn&#8217;t run well in PhantomJS.</p>\n<p>I&#8217;m currently using CanJS, for instance. It uses a thing that doesn&#8217;t work in current versions of PhantomJS. It&#8217;s going to work in the future when PhantomJS catches up. But it doesn&#8217;t yet.</p>\n<p><a class=\"zem_slink\" title=\"Google Chrome\" href=\"http://en.wikipedia.org/wiki/Google_Chrome\" target=\"_blank\" rel=\"wikipedia\">Chrome</a> is the only option.</p>\n<h2 id=\"the-solution\">The solution</h2>\n<p>Luckily, Travis boxes come with Chrome pre-installed. We just have to tweak our configuration to use it.</p>\n<p>First we have to use <code>.travis.yml</code> to convince the shell we&#8217;ve got a screen after all.</p>\n<pre lang=\"yaml\">before_install:\r\n  - export CHROME_BIN=chromium-browser\r\n  - export DISPLAY=:99.0\r\n  - sh -e /etc/init.d/xvfb start</pre>\n<p>We did three things:</p>\n<ul id=\"draft_check_box_list_0\">\n<li>set <code>CHROME_BIN</code> as chromium-browser, because that&#8217;s what&#8217;s installed</li>\n<li>set up a fake <code>DISPLAY</code></li>\n<li>ran <code>xvfb</code>, which is a sort of GUI environment faker thingy. I&#8217;m not certain how it works, but it always shows up in these kinds of things.</li>\n</ul>\n<p>Then we uuse <code>karma.conf.js</code> to let Karma know, we need a special browser for Travis.</p>\n<pre lang=\"javascript\">var configuration = {\r\n    // other things\r\n\r\n    customLaunchers: {\r\n        Chrome_travis_ci: {\r\n            base: 'Chrome',\r\n            flags: ['--no-sandbox']\r\n        }\r\n    },\r\n};\r\n\r\nif (process.env.TRAVIS) {\r\n    configuration.browsers = ['Chrome_travis_ci'];\r\n}\r\n\r\nconfig.set(configuration);</pre>\n<p>We created a custom browser launcher that runs Chrome with the <code>--no-sandbox</code> option. And we only use it if the tests are running in Travis.</p>\n<p>Simple.</p>\n<p>Our tests run both locally and on Travis. Rejoice!</p>\n<div style=\"width: 971px\" class=\"wp-caption alignnone\"><img title=\"Karma success\" alt=\"Karma success\" src=\"https://draftin.com:443/images/26241?token=NN0SEuMY7yQd4m5UziZ3mt5xSepSvKYUP6QAKafMAUueRqkQFJA7aNaDzIqNztZUDx-TVV1A4FX-HPS4hH3sL3c\" width=\"961\" height=\"157\" /><p class=\"wp-caption-text\">Karma success</p></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"7ef1c401-49ce-5f8b-8ac7-4dff2ad0e2a5"}}