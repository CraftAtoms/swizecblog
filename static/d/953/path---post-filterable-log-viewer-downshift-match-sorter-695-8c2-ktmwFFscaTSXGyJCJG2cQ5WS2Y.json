{"data":{"wordpressPost":{"title":"Building a filterable log viewer with Downshift and match-sorter","content":"<p>This was a fun little build, but I wish I remembered to turn on my stream. It was kinda nice to just write some code, too üòá</p>\n<p><code>&lt;LogViewer&gt;</code> takes a stream of server logs, or process logs, or any flat text file (let&#8217;s be honest) and turns it into a searchable, filterable little thing. Type in the input box, find what you&#8217;re looking for. Matched strings are highlighted so you know what you&#8217;re doing.</p>\n<blockquote class=\"twitter-tweet\" data-width=\"550\" data-dnt=\"true\">\n<p lang=\"en\" dir=\"ltr\">This was fun. Writeup tomorrow ü§ô <a href=\"https://t.co/40usRbykxR\">pic.twitter.com/40usRbykxR</a></p>\n<p>&mdash; Swizec (@Swizec) <a href=\"https://twitter.com/Swizec/status/1019501310197030912?ref_src=twsrc%5Etfw\">July 18, 2018</a></p></blockquote>\n<p><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n<p>The whole thing fits into 69 lines of beautifully rendered code and 1071 node&#95;modules dependencies. You can <a href=\"https://github.com/Swizec/log-viewer\">see the code on GitHub</a> ‚úåÔ∏è</p>\n<p><a href=\"https://dist-thnnqblnuk.now.sh/\">Try &lt;LogViewer&#62;</a></p>\n<p><iframe src=\"https://dist-thnnqblnuk.now.sh/\" width=\"120%\" height=\"500\"></iframe></p>\n<h2>Here&#8217;s how it works üëá</h2>\n<p><code>&lt;LogViewer&gt;</code> is built out of 2 main components:</p>\n<ol>\n<li><code>&lt;LogViewer&gt;</code> renders a Downshift component and munches a text file into a list of logs</li>\n<li><code>&lt;LogRow&gt;</code> takes care of individual lines and highlighting matched strings</li>\n</ol>\n<h3>LogViewer</h3>\n<p><script src=\"https://gist.github.com/willfanguy/c51b38fc25989cf2f17cff0297f3785f.js\"></script></p>\n<p>We&#8217;re using <code>getDerivedStateFromProps</code> to take our <code>logs</code>, which is a flat string, and turn it into an array of entries. Right now, that&#8217;s just splitting by newlines, but we could perform contextual parsing and understand that a single log can span multiple lines.</p>\n<p>Perhaps the parser function should come from props ü§î</p>\n<p>The <code>render</code> method takes <code>logs</code> from state and returns a <code>&lt;Downshift&gt;</code> component. Downshift takes care of driving our input field and some other tidbits that are tedious to do ourselves.</p>\n<p>Inside Downshift&#8217;s render prop, we use <code>matchSorter</code> to filter logs based on user input. I don&#8217;t know what string matching algorithm matchSorter uses, but it&#8217;s really fast.</p>\n<p>A+ library üëå</p>\n<p>Finally, we render a <code>&lt;div&gt;</code> with an <code>input</code> field controlled by Downshift, a <code>p</code> with the count of matches, and a <code>pre</code> with all our logs in a loop. We render each log entry with <code>&lt;LogRow&gt;</code>, providing the current <code>match</code> and <code>log</code> to be rendered.</p>\n<h3>LogRow</h3>\n<p>The <code>&lt;LogRow&gt;</code> component renders a string of text, potentially highlighting a part of it.</p>\n<p><script src=\"https://gist.github.com/willfanguy/63a2172701bfcc03eeb0ed5ee6e1d44b.js\"></script></p>\n<p>We convert the matched string to lower case. Gonna use it to decide which part of the log to highlight.</p>\n<p>Then we split our log on a regex using the provided match.</p>\n<p>The result is an array of log fragments like this</p>\n<pre><code>match = 'cat'\nlog = 'my cat is grumpy'\n\nchunks --&gt; ['my ', 'cat', ' is grumpy']\n</code></pre>\n<p>When you split on regex and wrap your split point in parenthesis, <code>()</code>, it&#8217;s preserved in your output. Perfect üëå for our purposes and pretty fast too.</p>\n<p>Rendering is a matter of looping through our <code>chunks</code> array and returning either a flat string or the <code>&lt;Highlighted&gt;</code> styled component.</p>\n<p>The <code>&lt;Highlighted&gt;</code> component is simplistic because I&#8217;m no designer.</p>\n<pre><code>const Highlight = styled.span`\n    color: red;\n    background: yellow;\n`;\n</code></pre>\n<p>Red color, yellow background. High contrast.</p>\n<h2>Useful?</h2>\n<p>That was an MVP. Should I make it better? Should I open source it?</p>\n<p>Anyone out there who&#8217;d use it? ü§® <a href=\"http://twitter.com/swizec\">Ping me on Twitter</a>.</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"170c69cb-3285-5ad8-b4af-6e72eb59d76d"}}