{"data":{"wordpressPost":{"title":"Silky smooth Piechart transitions with React and D3.js","content":"<div id=\"attachment_8254\" style=\"width: 1034px\" class=\"wp-caption alignnone\"><img class=\"alignnone size-full wp-image-8254\" src=\"https://swizec.com/blog/wp-content/uploads/2018/03/transition-pie.gif\" alt=\"A pie streaming in some data\" width=\"1024\" height=\"1024\" /><p class=\"wp-caption-text\">A pie streaming in some data</p></div>\n<p>Today, I finally figured out how to build smooth D3 arc transitions. 🎉</p>\n<p>Got some help from Bostock&#8217;s <a href=\"http://bl.ocks.org/mbostock/5100636\">commented arc tween</a> block and Andy Shora&#8217;s guide on <a href=\"http://andyshora.com/tweening-shapes-paths-d3-js.html\">tweening custom shapes and paths in D3.js</a>.</p>\n<blockquote><p>\nThe single most important requirement to perform interpolation in D3.js is that the structure of A must match the structure of B.</p>\n<p>~ Andy Shora\n</p></blockquote>\n<p>That quote made it click. D&#8217;oh! So obvious.</p>\n<h2>Why arc transitions are hard</h2>\n<p>You see, the problem with arc transitions is that their path definition has a funny shape. It looks like this:</p>\n<pre><code>M100.6434055594246,-99.8203632756589A8,8,0,0,1,112.2823856114007,-99.46188154973098A150,150,0,0,1,-104.56274177607584,107.54828233063364A8,8,0,0,1,-104.38099615277264,95.90520136696549L-64.39381262786019,59.38549403963366A8,8,0,0,1,-53.635344263429694,59.35696964757701A80,80,0,0,0,61.78081312913049,-50.82451307295977A8,8,0,0,1,62.30830828934212,-61.57007978883599Z\n</code></pre>\n<p>If that doesn&#8217;t make sense, don&#8217;t worry. I can&#8217;t read it either. Maybe <a href=\"https://twitter.com/sarah_edo\">Sarah Drasner</a> can, she&#8217;s an SVG goddess 🤔</p>\n<p>PS: she can 👇</p>\n<blockquote class=\"twitter-tweet\" data-width=\"550\" data-dnt=\"true\">\n<p lang=\"en\" dir=\"ltr\">I can- I mean most of this is much easier to read with a .toFixed(0) or .toFixed(1), and I&#39;ll admit the As are much more of a pain than say, Q, which are my favorite.</p>\n<p>If I wrote it by hand it would probably be more legible for you, too</p>\n<p>&mdash; Sarah Drasner (@sarah_edo) <a href=\"https://twitter.com/sarah_edo/status/971840965488119809?ref_src=twsrc%5Etfw\">March 8, 2018</a></p></blockquote>\n<p><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n<p>When you build a transition, you&#8217;re trying to smoothly move from A to B. To get from <code>0</code> to <code>1</code>, you go through <code>0.1</code>, <code>0.2</code> and so on.</p>\n<p>But a path definition is more complex.</p>\n<p>You&#8217;re dealing with a bunch of numbers that have to move just right. Change them all together, and funny things may happen like arcs flying around the screen.</p>\n<p>Or an error. 😬</p>\n<div id=\"attachment_8256\" style=\"width: 1034px\" class=\"wp-caption alignnone\"><img class=\"alignnone size-full wp-image-8256\" src=\"https://swizec.com/blog/wp-content/uploads/2018/03/naive-transition-d3-pie.gif\" alt=\"Naively implemented transition. Notice the arcs change shape sometimes\" width=\"1024\" height=\"1024\" /><p class=\"wp-caption-text\">Naively implemented transition. Notice the arcs change shape sometimes</p></div>\n<img src=\"https://media.giphy.com/media/sDZhdjNDsIq1q/giphy.gif\" />\n<h2>Tweens to the rescue</h2>\n<p>Luckily, D3 lets us define custom transitions called tweens. To smoothly animate a piechart, we&#8217;re going to build an <code>arcTween</code>. Because piecharts are made of arcs.</p>\n<p>The idea is to move from blindly transitioning path definitions to transitioning angles on a pie slice. We&#8217;re building a tween generator that takes some params and returns a tweening function.</p>\n<p>Tweening functions are what makes transitions work, by the way. They take an argument, <code>t</code>, and return the value of your prop at that specific &#8220;time&#8221; of your transition.</p>\n<img class=\"alignnone size-full wp-image-8255\" src=\"https://swizec.com/blog/wp-content/uploads/2018/03/transition-sketch.png\" width=\"800\" height=\"568\" srcset=\"https://swizec.com/blog/wp-content/uploads/2018/03/transition-sketch.png 800w, https://swizec.com/blog/wp-content/uploads/2018/03/transition-sketch-300x213.png 300w, https://swizec.com/blog/wp-content/uploads/2018/03/transition-sketch-768x545.png 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" />\n<p>Our tween generator is going to need:</p>\n<ol>\n<li><code>oldData</code>, the definition of our pie slice at the start of our transition</li>\n<li><code>newData</code>, the definition of our pie slice that we want to tween towards</li>\n<li><code>arc</code>, a <a href=\"https://github.com/d3/d3-shape/blob/master/README.md#arcs\">D3 arc generator</a></li>\n</ol>\n<p>Both <code>oldData</code> and <code>newData</code> come from a <a href=\"https://github.com/d3/d3-shape/blob/master/README.md#pies\">D3 pie generator</a>. Their <code>startAngle</code> and <code>endAngle</code> is what we&#8217;re interested in.</p>\n<p>Our <code>arcTween</code> function uses these to build a tween method that we then feed into <code>attrTween</code>.</p>\n<pre lang=\"javascript\">\n// inspired from http://bl.ocks.org/mbostock/5100636\nfunction arcTween(oldData, newData, arc) {\n    const copy = { ...oldData };\n    return function() {\n        const interpolateStartAngle = d3.interpolate(\n                oldData.startAngle,\n                newData.startAngle\n            ),\n            interpolateEndAngle = d3.interpolate(\n                oldData.endAngle,\n                newData.endAngle\n            );\n\n        return function(t) {\n            copy.startAngle = interpolateStartAngle(t);\n            copy.endAngle = interpolateEndAngle(t);\n            return arc(copy);\n        };\n    };\n}\n</pre>\n<p>We make a <code>copy</code> of <code>oldData</code> so we don&#8217;t change input data by accident, then we return a function. This function creates two interpolators with <code>d3.interpolate</code>.</p>\n<p>Each interpolator starts from an <code>oldData</code> angle and moves towards a <code>newData</code> angle. One for start, one for end.</p>\n<p>This function then returns our actual interpolation function. It takes the argument <code>t</code>, feeds it into our two interpolators, adjusts values on the <code>copy</code> object, feeds that into the <code>arc</code> generator, and returns a new path definition.</p>\n<img src=\"https://media.giphy.com/media/3o7btPCcdNniyf0ArS/giphy.gif\" />\n<p>You use it like this 👇</p>\n<pre lang=\"javascript\">\n// Piechart.js\nd3\n    .select(this.refs.elem)\n    .transition()\n    .duration(80)\n    .attrTween(\"d\", arcTween(this.state.d, newProps.d, this.arc))\n    .on(\"end\", () =>\n        this.setState({\n            d: newProps.d,\n            pathD: this.arc(newProps.d)\n        })\n    );\n</pre>\n<p>Select an element, a <code>&lt;path&gt;</code>, start a transition, make it last <code>80</code> milliseconds, <code>attrTween</code> the path definition, <code>d</code>, attribute using the tween returned from <code>arcTween</code>.</p>\n<p>Better? 🤪</p>\n<p>Let&#8217;s put it to use in a piechart. We&#8217;re using <a href=\"https://swizec.com/reactd3js\">React and D3</a> because React makes dataviz code easier to understand.</p>\n<p>We build our piechart from 2 components:</p>\n<ol>\n<li>Piechart –&nbsp;takes data, feeds into a <code>d3.pie()</code> generator, renders a bunch of arcs in a loop</li>\n<li>Arc &#8211; takes data for an arc, feeds it into a <code>d3.arc()</code> generator, renders a <code>&lt;path&gt;</code> element, handles transitions</li>\n</ol>\n<p>You can see the <a href=\"https://github.com/Swizec/react-d3-pie\">full code on GitHub</a></p>\n<h2><Piechart></h2>\n<p>The Piechart component itself is pretty simple. Takes some data, renders some arcs.</p>\n<pre lang=\"javascript\">\n// Piechart.js\nclass Piechart extends Component {\n    pie = d3\n        .pie()\n        .value(d => d.amount)\n        .sortValues(d => d.tag)\n        .padAngle(0.005);\n\n    render() {\n        const { data, groupBy, x, y, color } = this.props;\n\n        const _data = groupByFunc(data, groupBy);\n\n        return (\n            <g transform={`translate(${x}, ${y})`}>\n                {this.pie(_data).map((d, i) => (\n                    <Arc d={d} color={color(d)} />\n                ))}\n                <text x=\"0\" textAnchor=\"middle\">\n                    {data.length}\n                </text>\n                <text y=\"18\" x=\"0\" textAnchor=\"middle\">\n                    datapoints\n                </text>\n            </g>\n        );\n    }\n}\n</pre>\n<p>We define a pie generator with a value accessor <code>d =&gt; d.amount</code> that sorts arcs by <code>d.tag</code>, and adds a padding of <code>0.005</code> between arcs. To learn more about how padding works, check out this wonderful <a href=\"https://bl.ocks.org/mbostock/3e961b4c97a1b543fff2\">pie padding animation</a> by Mike Bostock.</p>\n<p>The <code>render</code> method groups <code>data</code> by a given <code>groupBy</code> function, in our case by tag, then outputs a grouping element <code>&lt;g&gt;</code> inside it.</p>\n<ol>\n<li>Loops through the output of <code>this.pie(_data)</code> and renders an <code>&lt;Arc&gt;</code> for each value</li>\n<li>Creates two <code>&lt;text&gt;</code> nodes for the center of our piechart</li>\n</ol>\n<p>How data makes it into <code>&lt;Piechart&gt;</code> is outside the scope of this tutorial. You can assume data comes as an array that changes every couple milliseconds. This triggers a re-render, which propagates into our <code>&lt;Arc&gt;</code> components.</p>\n<p>You can read that code on GitHub in <a href=\"https://github.com/Swizec/react-d3-pie/blob/master/src/App.js\">the App component</a>.</p>\n<h2><Arc></h2>\n<p>Our <code>&lt;Piechart&gt;</code> gets updated data every few milliseconds and re-renders. This change propagates into <code>&lt;Arc&gt;</code> components via props.</p>\n<p>That means <code>&lt;Arc&gt;</code> has to handle transitions. Pushing transitions into the <code>&lt;Arc&gt;</code> component means we can preserve React&#8217;s ideal of declarative rendering. Piechart just renders Arcs and gives them info. Arcs handle everything about rendering pie arcs. Even transitions.</p>\n<p>The general approach comes from my <a href=\"https://swizec.com/reactd3js\">React+D3v4 book</a>:</p>\n<ol>\n<li>Move props into state</li>\n<li>Use state to render</li>\n<li>Transition raw attributes with D3</li>\n<li>Update state when transition ends</li>\n</ol>\n<p>The outline for our <code>&lt;Arc&gt;</code> component looks like this 👇</p>\n<pre lang=\"javascript\">\n// Piechart.js\n\nclass Arc extends Component {\n    arc = d3\n        .arc()\n        .innerRadius(80)\n        .outerRadius(150)\n        .cornerRadius(8);\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            color: props.color,\n            origCol: props.color,\n            d: props.d,\n            pathD: this.arc(props.d)\n        };\n    }\n\n    componentWillReceiveProps(newProps) {\n        // transition, state update\n    }\n\n    // hover/unhover color changes via this.setState\n\n    render() {\n        const { color, pathD } = this.state;\n\n        return (\n            <path\n                d={pathD}\n                style={{\n                    fill: color\n                }}\n                onMouseOver={this.hover}\n                onMouseOut={this.unhover}\n                ref=\"elem\"\n            />\n        );\n    }\n}\n</pre>\n<p>Start with an <code>arc</code> generator that takes data and returns path definitions. Ours has an innerRadius of <code>80</code>, an outerRadius of <code>150</code>, and rounded corners.</p>\n<p>In the <code>constructor</code>, we copy important props to <code>this.state</code>. A good choice are props that we later intend to change. Color on hover/unhover, and <code>d</code> and <code>pathD</code> on input data changes.</p>\n<p><code>pathD</code> is the part we&#8217;re going to transition. It&#8217;s the output of calling <code>this.arc</code> on <code>this.state.d</code>.</p>\n<p><code>componentWillReceiveProps</code> is where that transition is going to happen.</p>\n<p><code>render</code> doesn&#8217;t do much. It outputs a <code>&lt;path&gt;</code> element with a ref of <code>elem</code>. It also defines mouse event handlers.</p>\n<h2>Adding a D3 transition to a React component</h2>\n<p>Now that <code>&lt;Arc&gt;</code> is rendering from state, we can use D3 transitions to make updates smoother. That happens inside <code>componentWillReceiveProps</code>.</p>\n<p>Our goal is to take the new props, use D3 to transition appropriate attributes on the base DOM node, then update state with the new values to ensure React&#8217;s engine knows what&#8217;s going on.</p>\n<pre lang=\"javascript\">\n// Piechart.js in <Arc>\n\n    componentWillReceiveProps(newProps) {\n        this.setState({\n            color: newProps.color\n        });\n\n        d3\n            .select(this.refs.elem)\n            .transition()\n            .duration(80)\n            .attrTween(\"d\", arcTween(this.state.d, newProps.d, this.arc))\n            .on(\"end\", () =>\n                this.setState({\n                    d: newProps.d,\n                    pathD: this.arc(newProps.d)\n                })\n            );\n    }\n</pre>\n<p>We update color state right away. This triggers a render, eventually.</p>\n<p>Then we start an 80 millisecond transition that uses the <code>arcTween</code> generator we built earlier. When the transition ends, we update React state with the new values for <code>d</code> and <code>pathD</code>. This triggers another render.</p>\n<p>That might sound like a lot of renders, but it works okay. Don&#8217;t worry about wasting resources, you&#8217;re re-rendering a single <code>&lt;path&gt;</code> element. <a href=\"https://swizec.com/blog/building-interactive-dom-benchmark-preliminary-results/swizec/8219\">The DOM is pretty fast</a> ☺️</p>\n<div id=\"attachment_8257\" style=\"width: 1034px\" class=\"wp-caption alignnone\"><img class=\"alignnone size-full wp-image-8257\" src=\"https://swizec.com/blog/wp-content/uploads/2018/03/transition-pie-1.gif\" alt=\"Our pie looks nice and smooth.\" width=\"1024\" height=\"1024\" /><p class=\"wp-caption-text\">Our pie looks nice and smooth.</p></div>\n<h2>Recap</h2>\n<p>You learned how to build a silky animated smooth piechart with React and D3! Yay! \\o/</p>\n<p>In a nutshell 👇</p>\n<ul>\n<li>Use custom tweens to transition complex shapes</li>\n<li>Render from state</li>\n<li>Always update state after transitions end</li>\n</ul>\n<p>🤘 Party hard 🤘</p>\n<p>To learn more about using React and D3 to write declarative data visualization code, read my book <a href=\"https://swizec.com/reactd3js\">React+D3v4</a>. I&#8217;m probably adding this as a new chapter.</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"c14f23a2-6e47-5a28-81b2-d9f232295a02"}}