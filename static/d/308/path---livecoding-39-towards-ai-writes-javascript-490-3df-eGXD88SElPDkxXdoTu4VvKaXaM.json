{"data":{"wordpressPost":{"title":"Livecoding #39: Towards an AI that writes JavaScript","content":"<p><em>This is a Livecoding Recap â€“ an almost-weekly post about interesting things discovered while livecoding. Usually shorter than 500 words. Often with pictures. Livecoding happens almost <strong>every Sunday at 2pm PDT</strong> on multiple channels. You should follow <a href=\"https://www.youtube.com/channel/UCoyHgaeLLI7Knp7LDHOwZMw\">My Youtube</a> channel to catch me live.</em></p>\n<p>Sound on YouTube was borked yesterday. I sounded like Mr. Robot. It all worked well on LiveEdu, but they didn&#8217;t save the video it looks like. Â¯&#92;_(ãƒ„)_/Â¯</p>\n<p><iframe src=\"https://www.youtube.com/embed/82yCEYf2q3A\" width=\"853\" height=\"480\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></p>\n<p>Anyway, we made some progress from <a href=\"https://swizec.com/blog/livecoding-38-faux-ai-writes-javascript/swizec/7607\">last time</a>. Our evolutionary approach still gets stuck in a local maximum after just a few iterations, but it no longer gets stuck on a single solution.</p>\n<p>So even though the fitness score is, say, <code>0.4545</code> and never changes, the result itself keeps changing. We achieved that by improving the pairing function.</p>\n<p>Our algorithm can now choose between two different pairing functions. Either the top 50% of the population breeds pairwise, or we take the top 30 specimens and breed each specimen with all others in the top 30.</p>\n<pre lang=\"javascript\">\nconst PAIRING_STRATEGIES = {\n    'top_half_pairs': (population) =&gt; _.chunk(_.take(population,\n                                                     population.length/2),\n                                              2),\n    'top_30_superset': (population) =&gt; {\n        const top30 = _.take(population, 30);\n\n        return _.flatten(top30.map(A =&gt; top30.map(B =&gt; [A, B])))\n    }\n}\n</pre>\n<p>This creates a lot of thrashing at the top, and it also makes our code faster to run. Thrashing is what we wanted to achieve, but unfortunately, it didn&#8217;t have the effect on fitness scores that we hoped for.</p>\n<p>Observe:</p>\n<pre lang=\"javascript\">\n16\n{ fitness: 0.45454545454545453,\n  code: '*15+',\n  fitnessLast: 0.45454545454545453,\n  codeLast: '4584',\n  size: 200 }\n17\n{ fitness: 0.45454545454545453,\n  code: '06*0',\n  fitnessLast: 0.45454545454545453,\n  codeLast: '4584',\n  size: 200 }\n18\n{ fitness: 0.45454545454545453,\n  code: '686.+9',\n  fitnessLast: 0.45454545454545453,\n  codeLast: '4584',\n  size: 200 }\n19\n{ fitness: 0.45454545454545453,\n  code: '86.+',\n  fitnessLast: 0.45454545454545453,\n  codeLast: '4584',\n  size: 200 }\n20\n{ fitness: 0.45454545454545453,\n  code: '28+',\n  fitnessLast: 0.45454545454545453,\n  codeLast: '0+*-/',\n  size: 200 }\n21\n{ fitness: 0.45454545454545453,\n  code: '800406',\n  fitnessLast: 0.45454545454545453,\n  codeLast: '092-092-',\n  size: 200 }\n22\n{ fitness: 0.45454545454545453,\n  code: '00406*',\n  fitnessLast: 0.45454545454545453,\n  codeLast: '092-092-',\n  size: 200 }\n</pre>\n<p>We achieved total randomness with no convergence. This is kind of pointless, but at least the simplified character set produces more syntactically correct solutions.</p>\n<h2>A glimmer of hope</h2>\n<p>Towards the end of my livecoding session, we found a glimmer of hope. Using Prettier.</p>\n<p><a href=\"https://github.com/prettier/prettier\">Prettier</a> can take a JavaScript AST and convert it into plain JavaScript code. This means we can go 1-up on abstraction levels and still produce readable code in the end.</p>\n<p>Prettier also pointed us towards <a href=\"https://github.com/babel/babylon\">Babylon</a>, which is a JavaScript parser that takes code and turns it into an AST. This means we can take any syntactically valid code and turn it into an AST.</p>\n<p>ASTs, by the way, are <a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\">abstract syntax trees</a>. They&#8217;re how computers read code.</p>\n<p>What&#8217;s left now is to figure out:</p>\n<ol>\n<li>How to generate an initial population of ASTs</li>\n<li>How to breed and mutate ASTs</li>\n</ol>\n<p>ðŸ¤”</p>\n<p>You can see the <a href=\"https://github.com/Swizec/faux-js-ai\">full current code on Github</a>. Not too useful yet unless you&#8217;re reading months from now. Github keeps links looking the same ðŸ™‚</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"26c0a14e-ad27-54f7-af87-1a3e2df7c4f0"}}