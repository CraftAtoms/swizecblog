{"data":{"wordpressPost":{"title":"There&#8217;s a &#8220;bug&#8221; in ES6 modules","content":"<p>After playing around with ES6 features, I found a glitch in ES6 modules. You can&#8217;t re-export your imports the way you can in other languages with native import/export support.</p>\n<p>Here&#8217;s what I mean:</p>\n<pre lang=\"javascript\">// Meta/index.jsx\r\nimport Title from './Title';\r\n\r\nexport Title;</pre>\n<p>Seems reasonable, right? Yet it throws a syntax error.</p>\n<p>Sure, it <i>could</i> be a bug in Babel.js, but I don&#8217;t think it is. If I &#8216;m reading the <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-exports\">ECMAScript2015 Specification</a> correctly, then you were never meant to do this. Which is even worse.</p>\n<p>After an hour of figuring out why Babel won&#8217;t compile my code, I spent another hour or two figuring out why I shouldn&#8217;t have expected my code to compile in the first place. Let&#8217;s take a look.</p>\n<p>Babel throws a syntax error like this:</p>\n<pre>Version: webpack 1.11.0\r\nTime: 662ms\r\n   [0] multi main 40 bytes {0} [built] [1 error]\r\n    + 7 hidden modules\r\n\r\nERROR in ./src/components/H1BGraph/Meta/index.jsx\r\nModule build failed: SyntaxError: /Users/Swizec/Documents/random-coding/react-d3js-experiment/src/components/H1BGraph/Meta/index.jsx: Unexpected token (7:18)\r\n   5 | import Title from './Title';\r\n   6 | \r\n&gt;  7 | export Title;\r\n     |             ^\r\n   8 |</pre>\n<p>This is not a helpful error. Not only is this a reasonable thing to do, it&#8217;s also a very common thing to do in other languages with native module support. For example, when your organize files into a directory.</p>\n<p>In this case, there is a <code>Title</code> and a <code>Description</code>. Both components inherit from a base component called <code>BaseMeta</code>, but are used separately. It makes sense to put these three files and some helpers in a directory called <code>Meta</code>.</p>\n<p>Forcing programmers to write <code>import Title from './Meta/Title'</code> breaks the abstraction. You shouldn&#8217;t have to know how components and classes internal to <code>Meta</code> are organized. Writing <code>import Title from './Meta‚Äô</code> should be possible.</p>\n<p>Right?</p>\n<p>Sure, one could argue that both of these components fall under a common <code>Meta</code> should be used through a parent <code>&lt;Meta&gt;</code> component. Then you could use <code>Meta</code> and not worry about importing either <code>Title</code> or <code>Description</code>. In many ways that‚Äôs true.</p>\n<p>But the <code>Meta</code> component <i>should</i> be able to expose any of its internal components for external use. If JavaScript or Babel disagree with the architecture, then they should complain about the architecture and not throw a syntax error.</p>\n<p>To make that work, we need a dirty hack like this:</p>\n<pre lang=\"javascript\">// Meta/index.jsx\r\nimport {Title as T} from './Title';\r\n\r\nexport class Title extends T {};</pre>\n<p>Ugly, right?</p>\n<p>We use an aliased import from <code>./Title</code> only to turn around and export a new <code>Title</code> component that extends <code>T</code>, but adds nothing of its own.</p>\n<p>We have to do this because ES6 imports are constants ‚Äî creating a new class with the same name as already exists would throw an error. Re-exporting <code>Title</code> with a different name would spread aliased imports through our codebase like a virus.</p>\n<p>I wish none of this silliness was necessary, but it is.</p>\n<p>Maybe the answer lies in what this code compiles to. Perhaps somewhere in the resulting ES5 code there is a deeper reason why JavaScript can&#8217;t re-export like everyone else.</p>\n<p>When Babel is done, our import‚Üíexport looks like this:</p>\n<pre lang=\"javascript\">function(module, exports, __webpack_require__) {\r\n\r\n    \r\n    // Ugly but works üòÄ\r\n\r\n    'use strict';\r\n\r\n    Object.defineProperty(exports, '__esModule', {\r\n      value: true\r\n    });\r\n\r\n    var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\r\n\r\n    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\r\n\r\n    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' &amp;&amp; superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\r\n\r\n    var _Title = __webpack_require__(8);\r\n\r\n    var Title = (function (_T) {\r\n      _inherits(Title, _T);\r\n\r\n      function Title() {\r\n        _classCallCheck(this, Title);\r\n\r\n        _get(Object.getPrototypeOf(Title.prototype), 'constructor', this).apply(this, arguments);\r\n      }\r\n\r\n      return Title;\r\n    })(_Title.Title);\r\n\r\n    exports.Title = Title;\r\n    ;\r\n/***/ }</pre>\n<p>Damn, that&#8217;s a lot of code! Remember writing all of this every time you wanted class inheritance? Me neither, screw class inheritance if this is what it takes. No wonder everyone is so excited about ES6 modules.</p>\n<p>Let&#8217;s look at the key part: where the <code>Title</code> class is defined as a featureless extension of <code>T</code>. This part:</p>\n<pre lang=\"javascript\">    var _Title = __webpack_require__(8);\r\n\r\n    var Title = (function (_T) {\r\n      _inherits(Title, _T);\r\n\r\n      function Title() {\r\n        _classCallCheck(this, Title);\r\n\r\n        _get(Object.getPrototypeOf(Title.prototype), 'constructor', this).apply(this, arguments);\r\n      }\r\n\r\n      return Title;\r\n    })(_Title.Title);\r\n\r\n    exports.Title = Title;\r\n    ;</pre>\n<p>Ok, that&#8217;s pretty familiar. If a human wrote the first line, it would be something like <code>var Foo = require('Foo‚Äô)</code>. <code>require()</code> gives a class, and we assign it to a variable.</p>\n<p>Then we create a closure, which wraps a scope around a function. Think of this function as a class factory ‚Äî it takes a class and creates a new extended class.</p>\n<p>To produce these new classes, the closure creates a function called <code>Title</code>. This function acts as an object constructor, just like functions normally do in JavaScript. It uses <code>_get</code> to perform some magic that&#8217;s beyond me. I *<i>think</i>* it calls the function on itself while also calling the superclass&#8217;s constructor, but I&#8217;m not sure.</p>\n<p>Just to keep things interesting, Babel uses this opportunity to take advantage of JavaScript&#8217;s hoisting behavior, where functions that aren&#8217;t assigned to a variable are always global inside the current scope. The code calls <code>_inherits</code> on the <code>Title</code> function, but before it&#8217;s created. From the looks of <code>_inherits</code>, it can replace the subclass&#8217;s prototype with the superclass&#8217;s object instance.</p>\n<p>It‚Äôs weird, but it works. Praise the gods of open source that Babel writes this magic for us.</p>\n<p><code>class X extends Y</code> is not only easier to write than this JavaScript soup, but also easier (read: possible) to understand.</p>\n<p>Now we know what <code>export class X extends Y {}</code> transpiles into, but we still haven&#8217;t answered the main question: Why can&#8217;t we just re-export?</p>\n<p>I don&#8217;t think it&#8217;s because JavaScript couldn&#8217;t handle something like this:</p>\n<pre lang=\"javascript\">var Title = (function (_T) {\r\n // ...\r\n})(__webpack_require__(8));</pre>\n<p>While this isn&#8217;t the cleanest code, it *<i>should</i>* work. But take a look at the last line in the earlier example, the line that says <code>exports.Title = Title</code>.</p>\n<p>If we don‚Äôt tell the code what to export as, how will it know? It won&#8217;t. Without a name, the compiled code would look like this:</p>\n<pre>exports = __webpack_require__(8);</pre>\n<p>With that, we can only re-export a single module&#8217;s worth of code. Which does work by the way, you can always write <code>export default X</code>.</p>\n<p>If you want to re-export multiple modules, then you&#8217;ll have to stick to that ugly workaround. I think it&#8217;s silly, but it&#8217;s the best JavaScript can do until gets reflection, and we&#8217;re finally able to answer the question <i>&#8220;Hey, what did the programmer name this variable?&#8221;</i></p>\n<p>I think that&#8217;s coming in ES7. We&#8217;ll see.</p>\n<p><b>PS:</b> the official way to re-export modules in ES6 looks like this:</p>\n<pre lang=\"javascript\">// to export a member\r\nexport { encrypt as en } from 'lib/crypto';\r\n// or to export everything\r\nexport * from 'lib/crypto';</pre>\n<p>But that still looks weird, doesn&#8217;t play well with default exports, and doesn&#8217;t solve the ‚Äúpreserve the name‚Äù problem.</p>\n<p><b>Thanks</b> to Jure ƒåuhalev, An≈æe Peƒçar, Will Fanguy, Coletta Teske, and David Baird for reading draft versions of this article</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"a79dace1-0be3-5d19-8aff-d32174b55578"}}