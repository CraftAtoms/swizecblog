{"data":{"wordpressPost":{"title":"Elegantly using socket.io in backbone apps","content":"<p><a href=\"http://backbonejs.org/\" target=\"_blank\">Backbone.js</a> is my favourite modern MVC framework for client-side javascript. Not that I&#8217;ve seriously tried any others &#8230; simply didn&#8217;t feel the need to.</p>\n<p>The way apps are usually organised is Backbone is that data is king. A view reacts to some user action and changes some data in a model. Everybody who&#8217;s listening for that change then reacts and does something either to their view (adding something new on the screen, say) or data gets changed. Sometimes a change in data will cause the browser <a class=\"zem_slink\" title=\"Uniform Resource Locator\" href=\"http://en.wikipedia.org/wiki/Uniform_Resource_Locator\" rel=\"wikipedia\" target=\"_blank\">URL</a> to change.</p>\n<p>Whatever, the important part is events are usually communicated through state changes.</p>\n<h2>Events</h2>\n<p>Despite the god-like status of models, most of your code goes into views. That&#8217;s where you have to react to two types of events:</p>\n<ul>\n<li>data changes</li>\n<li>user actions</li>\n</ul>\n<p>Listening to data changes is easiest done in the <em>initialize</em> function, something like so:</p>\n<pre lang=\"javascript\">    initialize: function () {\r\n        this.model.on(\"change\", this.render, this);\r\n    }</pre>\n<p>Okay, but what about user actions? Like somebody clicking on a button or entering a specific form field? Well, you could do it the old <a class=\"zem_slink\" title=\"JQuery\" href=\"http://jquery.com/\" rel=\"homepage\" target=\"_blank\">jQuery</a> way everyone&#8217;s come to love by now.</p>\n<pre lang=\"javascript\">        var that = this;\r\n        this.$el.find('a.button', function () {\r\n            that.button_clicked();\r\n        });</pre>\n<p>That can get unwieldy real quick &#8230; Backbone has us covered with the events hash:</p>\n<pre lang=\"javascript\">    events: {\r\n        \"click a.button\": \"button_clicked\"\r\n    },</pre>\n<p>Both of these approaches result in <em>this.button_clicked </em>being called when a user clicks the button. Except the second approach is much easier on the eye and significantly less convoluted when you have ten different events doing things.</p>\n<p>But what happens when you add socket.io to the mix?</p>\n<h2>Adding socket.io</h2>\n<p>Backbone doesn&#8217;t have any built-in support for a third source of events so you end up doing things the old way again. Adding listeners to a global socket in your <em>initialize</em> function. Global sockets might sound like a bad idea, but I find having a single socket communicating with the server to make things easier.</p>\n<p>I usually keep the socket in the global <em>App </em>object.</p>\n<p>But this feels dirty:</p>\n<pre lang=\"javascript\">        window.app.socket.on(\"message\", function(message) {\r\n            that.got_message(message);\r\n        });</pre>\n<p>Or worse, handling everything about the message in the callback!</p>\n<p>Instead, I started making all my views extend a common <em>MainView</em> that enables me to listen for socket events just like I would for user actions:</p>\n<pre lang=\"javascript\">var MyView = MainView.extend({\r\n\r\n    socket_events: {\r\n        \"message\": \"got_message\"\r\n    }</pre>\n<p>MainView then takes care of binding socket events to their callbacks much in the same way as Backbone&#8217;s native View does.</p>\n<pre lang=\"javascript\">var MainView = Backbone.View.extend({\r\n\r\n    initialize: function () {\r\n        this.__initialize();\r\n    },\r\n\r\n    __initialize: function () {\r\n        if (this.socket_events && _.size(this.socket_events) > 0) {\r\n            this.delegateSocketEvents(this.socket_events);\r\n        }\r\n    },\r\n\r\n    delegateSocketEvents: function (events) {\r\n        for (var key in events) {\r\n            var method = events[key];\r\n            if (!_.isFunction(method)) {\r\n                method = this[events[key]];\r\n            }\r\n\r\n            if (!method) {\r\n                throw new Error('Method \"' + events[key] + '\" does not exist');\r\n            }\r\n\r\n            method = _.bind(method, this);\r\n            window.app.socket.on(key, method);\r\n        };\r\n    }\r\n});</pre>\n<p>The reason there&#8217;s two initialize functions is that we can&#8217;t properly hook into the default View object and add some functionality. So we use initialize to do event delegation when the object is created &#8211; backbone calls initialize from the constructor &#8211; but if a child view needs their own initialize function, they should still be able to delegate socket events.</p>\n<p>Such a child view would simply call <em>this.__initialize() </em>to execute MainView&#8217;s initialize function and get things working.</p>\n<p>This is far from perfect and to get all of this really working the way I&#8217;d like &#8211; as seamlessly as user actions &#8211; I would have to make a pull request to Backbone &#8230; but it&#8217;s a good start to elegantly using socket.io in backbone apps.</p>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles</h6>\n<ul class=\"zemanta-article-ul zemanta-article-ul-image\" style=\"margin: 0; padding: 0; overflow: hidden;\">\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://stackoverflow.com/questions/13391944/why-return-a-jquery-deferred-object-inside-backbone-sync\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/noimg_50_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://stackoverflow.com/questions/13391944/why-return-a-jquery-deferred-object-inside-backbone-sync\" target=\"_blank\">why return a jquery deferred object inside backbone sync?</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://swizec.com/blog/testing-socket-io-apps/swizec/5625\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/129148469_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://swizec.com/blog/testing-socket-io-apps/swizec/5625\" target=\"_blank\">Testing socket.io apps</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://backbonejs.org/?0-9-9\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/noimg_103_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://backbonejs.org/?0-9-9\" target=\"_blank\">Backbone.js 0.9.9 Released</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://www.joezimjs.com/javascript/plugging-into-socket-io-the-basics/\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/125930383_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://www.joezimjs.com/javascript/plugging-into-socket-io-the-basics/\" target=\"_blank\">Plugging Into Socket.IO: The Basics</a></li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/?px\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=229aee28-470c-4b3b-b2bd-040326134ed5\" alt=\"Enhanced by Zemanta\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"fae86e08-b924-5b7c-b07b-74bead327499"}}