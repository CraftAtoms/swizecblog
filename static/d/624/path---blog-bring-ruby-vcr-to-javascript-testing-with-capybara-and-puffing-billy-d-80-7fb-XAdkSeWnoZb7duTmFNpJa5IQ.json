{"data":{"wordpressPost":{"title":"Bring Ruby VCR to Javascript testing with Capybara and puffing-billy","content":"<p>Let&#8217;s say you are writing an application in <a class=\"zem_slink\" title=\"Ruby (programming language)\" href=\"http://www.ruby-lang.org/\" rel=\"homepage\" target=\"_blank\">Ruby</a>. You are probably talking to every API under the sun and are happily writing tests to make sure your code isn&#8217;t failing.</p>\n<p>Because you don&#8217;t want to rely on 3rd parties or an internet connection to make your tests pass or fail you mock everything with let&#8217;s say, <a href=\"https://github.com/bblimke/webmock\" target=\"_blank\">Webmock</a>. This also makes your tests much <em>much</em> faster. After all even the fastest internet is much slower than the processor talking to its memory.</p>\n<p>If you&#8217;re too lazy to mock out every API under the sun, you might use <a href=\"https://www.relishapp.com/vcr/vcr/docs\" target=\"_blank\">VCR</a> to record requests and play them back later. The main advantage being, you don&#8217;t have to worry about meticulously reimplementing <em>everything, </em>and you can nuke the recordings at any time to make sure your code still works against the real API.</p>\n<p>Life is good.</p>\n<h2>Enter <a class=\"zem_slink\" title=\"JavaScript\" href=\"http://en.wikipedia.org/wiki/JavaScript\" rel=\"wikipedia\" target=\"_blank\">Javascript</a>, stage left</h2>\n<p>Then Javascript becomes more and more prominent. Suddenly your application&#8217;s logic is shifting from backend to browser and before you know it, most of your tests are pretty irrelevant.</p>\n<p>You&#8217;re fine for a while with Capybara or Cucumber.</p>\n<p>Launch a headless browser, click around the site from the comfort of <a class=\"zem_slink\" title=\"RSpec\" href=\"http://rspec.info/\" rel=\"homepage\" target=\"_blank\">RSpec</a>, make sure users see what they&#8217;re supposed to. Balance restored.</p>\n<p>Then you add a payment form. Or something. Suddenly your <em>frontend</em> is talking to an API. In case of Stripe or Balanced it&#8217;s even a feature. A great benefit for the user.</p>\n<pre lang=\"javascript\">jQuery(function($) {\r\n  $('#payment-form').submit(function(event) {\r\n    var $form = $(this);\r\n\r\n    // Disable the submit button to prevent repeated clicks\r\n    $form.find('button').prop('disabled', true);\r\n\r\n    Stripe.createToken($form, stripeResponseHandler);\r\n\r\n    // Prevent the form from submitting with the default action\r\n    return false;\r\n  });\r\n});</pre>\n<p>Well that sucks, you&#8217;re suddenly back to square one.</p>\n<p>Your tests take minutes to execute. Your tests fail without an internet connection. Your tests rely on some 3rd party service being up. Your tests suck.</p>\n<p>Who wants to code when running ~5 tests takes 3 minutes? Nobody.</p>\n<h2>Enter puffing-billy, stage right</h2>\n<p>The problem is that neither Webmock nor VCR can handle requests originating in a browser because they happen in a different thread and they can&#8217;t mess around with those.</p>\n<p>Luckily, a year ago <a href=\"https://github.com/oesmith\">Olly Smith</a>, created <a href=\"https://github.com/oesmith/puffing-billy\" target=\"_blank\">puffing-billy</a>.</p>\n<p>The idea was great &#8211; spin up a web proxy, tell your headless browser to use it, when your code makes a request it will go through the proxy, which will try to use a Webmock to handle it, otherwise pass it on to the vast internet.</p>\n<p>But who wants to mock everything out manually?</p>\n<p>Over the past few weeks I set upon the task of fixing this problem and restoring sanity to my life. Good tests are transparent to the application and I&#8217;ll be damned if I use any of the suggested solutions on the internet like <em>&#8220;Well you just put a switch in your code that knows if you&#8217;re in a test and then doesn&#8217;t talk to Stripe&#8221;</em></p>\n<p>Screw that.</p>\n<p>This morning I submitted <a href=\"https://github.com/oesmith/puffing-billy/pull/7\" target=\"_blank\">a pull request to puffing-billy</a>.</p>\n<p>I added the ability for puffing-billy to behave like it was VCR, but for your browser. When a request is made, it gets cached. The cache is then persisted between sessions, and requests are played back to the browser as needed.</p>\n<p>It&#8217;s not as sophisticated as VCR just yet, but it gets the job done and my test runtime has gone from 3 minutes to just under a minute. That&#8217;s a big deal in my book!</p>\n<p>The caching even understands that some URL&#8217;s are needlessly different on every request (social buttons, analytics etc.) so you can configure it to normalize those requests to a single recording that is played back every time. Your tests don&#8217;t really rely on gAnalytics working right?</p>\n<p>And the best thing is, you don&#8217;t even have to change your tests.</p>\n<p>You add something like this in your <em>spec_helper.rb</em>:</p>\n<pre lang=\"ruby\">Billy.configure do |c|\r\n  c.cache = true\r\n  c.ignore_params = [\"http://www.google-analytics.com/__utm.gif\",\r\n                     \"http://b.siftscience.com/i.gif\",\r\n                     \"https://r.twimg.com/jot\",\r\n                     \"http://p.twitter.com/t.gif\",\r\n                     \"http://p.twitter.com/f.gif\",\r\n                     \"http://www.facebook.com/plugins/like.php\",\r\n                     \"https://www.facebook.com/dialog/oauth\",\r\n                     \"http://cdn.api.twitter.com/1/urls/count.json\"]\r\n  c.persist_cache = true\r\n  c.cache_path = 'spec/req_cache/'\r\nend\r\n\r\n# need to call this because of a race condition between persist_cache\r\n# being set and the proxy being loaded for the first time\r\nBilly.proxy.restore_cache\r\n\r\nCapybara.javascript_driver = :poltergeist_billy</pre>\n<p>A test for the payment form looks the same as usual:</p>\n<pre lang=\"ruby\">    scenario \"physical product\" do\r\n      product = start_buying build(:product, :physical, user: @seller, active: true)\r\n\r\n      VCR.use_cassette('Balanced/purchase_with_cc') do\r\n        within '#new_order' do\r\n          fill_in 'order_email', with: Faker::Internet.safe_email\r\n          fill_in_address\r\n          fill_in_card\r\n\r\n          click_on 'Buy Now'\r\n        end\r\n\r\n        page.should have_css('#receipt', :visible =&gt; true)\r\n      end\r\n\r\n      validate_receipt product, @seller\r\n    end</pre>\n<p>Puffing-billy will transparently cache every requests the browser makes and VCR records any requests made by your backend logic. It&#8217;s pretty sweet.</p>\n<p>What do you guys think? I only have 20 days of Ruby experience and the internet has told me it really wants something like this, but I couldn&#8217;t find anyone who&#8217;s already made it.</p>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles</h6>\n<ul class=\"zemanta-article-ul zemanta-article-ul-image\" style=\"margin: 0; padding: 0; overflow: hidden;\">\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://blog.codeship.io/2013/02/11/Using-PhantomJS-for-backend-tests.html\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/144898901_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://blog.codeship.io/2013/02/11/Using-PhantomJS-for-backend-tests.html\" target=\"_blank\">How to make your testing awesome with PhantomJS</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://highscalability.com/blog/2013/1/30/better-browser-caching-is-more-important-than-no-javascript.html\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/noimg_26_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://highscalability.com/blog/2013/1/30/better-browser-caching-is-more-important-than-no-javascript.html\" target=\"_blank\">Better Browser Caching is More Important than No Javascript or Fast Networks for HTTP Performance</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://www.slideshare.net/jo_liss/testing-ember-apps\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/145879258_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://www.slideshare.net/jo_liss/testing-ember-apps\" target=\"_blank\">Testing Ember Apps</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://www.slideshare.net/SmartBear_Software/safe-sex-with-thirdparty-apis\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/152051710_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://www.slideshare.net/SmartBear_Software/safe-sex-with-thirdparty-apis\" target=\"_blank\">Safe Sex with Third-Party APIs</a></li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/?px\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=e69c073b-038f-4dc0-8a7f-21131f8ce412\" alt=\"Enhanced by Zemanta\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"bbc6bd61-280c-55a3-908a-18a6a4891324"}}