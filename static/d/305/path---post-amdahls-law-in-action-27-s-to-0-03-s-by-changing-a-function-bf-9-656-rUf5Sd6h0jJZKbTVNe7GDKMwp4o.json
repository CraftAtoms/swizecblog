{"data":{"wordpressPost":{"title":"Amdahl&#8217;s law in action &#8211; 27s to 0.03s by changing a function","content":"<p>Perhaps the most important lesson I&#8217;ve learned while studying computer science is that of <a class=\"zem_slink\" title=\"Amdahl's law\" href=\"http://en.wikipedia.org/wiki/Amdahl%27s_law\" rel=\"wikipedia\" target=\"_blank\">Amdahl&#8217;s law</a>.</p>\n<div style=\"width: 310px\" class=\"wp-caption alignright\"><a href=\"http://commons.wikipedia.org/wiki/File:AmdahlsLaw.png\" target=\"_blank\"><img class=\"zemanta-img-inserted zemanta-img-configured\" title=\"Graph Illustrating Amdahl's Law\" src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/AmdahlsLaw.png/300px-AmdahlsLaw.png\" alt=\"Graph Illustrating Amdahl's Law\" width=\"300\" height=\"220\" /></a><p class=\"wp-caption-text\">Graph Illustrating Amdahl&#39;s Law (Photo credit: Wikipedia)</p></div>\n<img class=\"alignnone\" title=\"Amdahl's law\" src=\"http://upload.wikimedia.org/wikipedia/en/math/8/9/6/89638a25639297d701f9298b68ee9cec.png\" alt=\"Amdahl's law\" width=\"104\" height=\"49\" />\n<p>Amdahl&#8217;s law is generally used to predict the maximum speedup by improving a single component of a system (say, a function or a database). But the implications are simple: <em>Improve the thing that will <strong>actually</strong> help.</em></p>\n<p>As programmers, however, we would rather contemplate just what is <a href=\"http://www.codinghorror.com/blog/2009/01/the-sad-tragedy-of-micro-optimization-theater.html\" target=\"_blank\">the fastest way to concatenate a string</a>. Or whether <a class=\"zem_slink\" title=\"PHP\" href=\"http://www.php.net\" rel=\"homepage\" target=\"_blank\">PHP</a> is much faster than Ruby. And just how much more traffic you can handle with 5 or 10 fcgi workers. And so on. The internet is riddled with these questions. And let&#8217;s not forget the age old debate of speed improvements by using raw <a class=\"zem_slink\" title=\"SQL\" href=\"http://www.iso.org/iso/catalogue_detail.htm?csnumber=45498\" rel=\"homepage\" target=\"_blank\">SQL</a> instead of an <a class=\"zem_slink\" title=\"Object-relational mapping\" href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\" rel=\"wikipedia\" target=\"_blank\">ORM</a>.</p>\n<p>Once upon a time I even wrote a web framework where I made sure to <em>always use the fastest pattern of doing X in PHP</em>. I knew databases were slow, so I did a lot of the work regarding JOINs and such in PHP.</p>\n<p>Yeah.</p>\n<h2>Optimizing where it matters</h2>\n<p>The other day I finally assembled all the bits and pieces for an <a class=\"zem_slink\" title=\"Evolutionary algorithm\" href=\"http://en.wikipedia.org/wiki/Evolutionary_algorithm\" rel=\"wikipedia\" target=\"_blank\">evolutionary algorithm</a> in <a class=\"zem_slink\" title=\"Haskell (programming language)\" href=\"http://haskell.org\" rel=\"homepage\" target=\"_blank\">Haskell</a>.</p>\n<p>I&#8217;m trying to print <em><a class=\"zem_slink\" title=\"Hello world program\" href=\"http://en.wikipedia.org/wiki/Hello_world_program\" rel=\"wikipedia\" target=\"_blank\">Hello World</a></em> by performing random changes on a population of strings &#8211; eventually I want to create an extensible framework for evolutionary algorithms that will let me <a href=\"http://swizec.github.com/Le-Thesis/\" target=\"_blank\">write poetry programmatically</a>.</p>\n<p>It took <strong>27 seconds</strong> to go 5 epochs. Just five generations.</p>\n<pre lang=\"log\">  INIT    time    0.00s  (  0.00s elapsed)\r\n  MUT     time   26.47s  ( 27.00s elapsed)\r\n  GC      time    0.62s  (  0.62s elapsed)\r\n  EXIT    time    0.00s  (  0.00s elapsed)\r\n  Total   time   27.08s  ( 27.62s elapsed)\r\n\r\n  %GC     time       2.3%  (2.2% elapsed)\r\n\r\n  Productivity  97.7% of total user, 95.8% of total elapsed</pre>\n<p>Okay, it&#8217;s definitely not a problem with memory access. 97.7% of the time is spent in computation, this is good, but slightly worrying. Let&#8217;s do some profiling!</p>\n<pre lang=\"log\">COST CENTRE   MODULE           %time %alloc\r\n\r\nlevenshtein   Evaluators.Basic  91.5  100.0\r\nlevenshtein.d Evaluators.Basic   8.5    0.0</pre>\n<p>The <a title=\"Levenshtein distance in Haskell\" href=\"http://swizec.com/blog/levenshtein-distance-in-haskell/swizec/4801\" target=\"_blank\">levenshtein distance function I implemented</a> costs 100% of <a class=\"zem_slink\" title=\"Time complexity\" href=\"http://en.wikipedia.org/wiki/Time_complexity\" rel=\"wikipedia\" target=\"_blank\">computation time</a>!</p>\n<p>After replacing my function with <a href=\"http://www.reddit.com/r/programming/comments/w4gs6/levenshtein_distance_in_haskell/c5a6jjz\" target=\"_blank\">the implementation suggested by Reddit</a> life instantly became much easier. It now takes just 0.03 seconds to compute 5 epochs of the algorithm.</p>\n<p><strong>27 seconds -&gt; 0.03 seconds by changing a single function.</strong></p>\n<p>The problem I have now is anything larger than ~25 epochs makes my computer decide something funny is going and kill the program, which says I&#8217;m doing something terrible with memory.</p>\n<p>Then again, there <em>are</em> 480195 population members at the 25th epoch &#8230; I probably don&#8217;t need that many.</p>\n<p>By the way, it&#8217;s still not a memory problem per se (for 20 epochs):</p>\n<pre lang=\"log\">  Total   time   10.72s  ( 10.80s elapsed)\r\n\r\n  %GC     time      23.4%  (23.3% elapsed)\r\n\r\n  Alloc rate    2,736,341,212 bytes per MUT second\r\n\r\n  Productivity  76.6% of total user, 76.0% of total elapsed\r\n\r\n-----\r\n\r\nCOST CENTRE    MODULE           %time %alloc\r\n\r\nlev'''.lev     Evaluators.Basic  61.5   58.8\r\nlev'''.levMemo Evaluators.Basic  17.3   31.4\r\nbreedTwo       Operators.Basic    2.8    2.4\r\nbreedTwo.(...) Operators.Basic    2.0    0.6\r\nbreedTwo.(...) Operators.Basic    1.3    0.6\r\nbreedTwo.(...) Operators.Basic    1.3    0.6\r\nselect.\\       Selectors.Basic    1.1    0.3\r\nlev'''.xa      Evaluators.Basic   1.1    0.6</pre>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles</h6>\n<ul class=\"zemanta-article-ul zemanta-article-ul-image\" style=\"margin: 0; padding: 0; overflow: hidden;\">\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://swizec.com/blog/levenshtein-distance-in-haskell/swizec/4801\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/98768579_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://swizec.com/blog/levenshtein-distance-in-haskell/swizec/4801\" target=\"_blank\">Levenshtein distance in Haskell</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://blog.pdark.de/2012/06/29/jazoon-2012-divideconquer-efficient-java-for-multicore-world/\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/97318522_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://blog.pdark.de/2012/06/29/jazoon-2012-divideconquer-efficient-java-for-multicore-world/\" target=\"_blank\">Jazoon 2012: Divide&amp;Conquer: Efficient Java for Multicore World</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://swizec.com/blog/an-elegant-way-to-randomly-change-every-list-member-in-haskell/swizec/5060\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/106367996_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://swizec.com/blog/an-elegant-way-to-randomly-change-every-list-member-in-haskell/swizec/5060\" target=\"_blank\">An elegant way to randomly change every list member in Haskell</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://blog.kejser.org/2012/07/16/how-vertical-partitioning-and-deep-joins-kill-parallelism/\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/100761108_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://blog.kejser.org/2012/07/16/how-vertical-partitioning-and-deep-joins-kill-parallelism/\" target=\"_blank\">How Vertical Partitioning and Deep Joins Kill Parallelism</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://plumbr.eu/blog/let-them-talk\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/97839111_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://plumbr.eu/blog/let-them-talk\" target=\"_blank\">Let them talk</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://blog.codecentric.de/en/2012/07/10-application-performance-tuning-tips/\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/noimg_116_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://blog.codecentric.de/en/2012/07/10-application-performance-tuning-tips/\" target=\"_blank\">10 Application Performance Tuning Tips</a></li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/?px\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=0ef6e9d4-09b7-4153-a0af-d9a65c1facb9\" alt=\"Enhanced by Zemanta\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"cfd9b0cd-49b4-52cd-a926-b0255283cf3a"}}