{"data":{"wordpressPost":{"title":"A puzzle in JavaScript objects","content":"<figure>\n<img src=\"https://cdn.meme.am/instances/500x/71601683.jpg\" alt=\"\" /><br />\n</figure>\n<p>This is a puzzle you can run into if you&#8217;re not careful, and sometimes, despite your best efforts, even if you <em>are</em> careful. It happened to me when I had a settings object that I passed into a view. The view then did things. When I made a new view from the settings object, it looked like the view I had just cleared. O.o</p>\n<p>Here&#8217;s a contrived example:</p>\n<p class='codepen'  data-height='265' data-theme-id='0' data-slug-hash='VKvkgj' data-default-tab='js,result' data-animations='run' data-editable='' data-embed-version='2'>\nSee the Pen <a href='http://codepen.io/swizec/pen/VKvkgj/'>Set – ES6</a> by Swizec Teller (<a href='http://codepen.io/swizec'>@swizec</a>) on <a href='http://codepen.io'>CodePen</a>.0</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n<p>You have a <code>Counter</code> class that:</p>\n<ul>\n<li>takes initial state as an argument</li>\n<li>implements the <code>inc()</code> method for <code>+1</code>-ing state</li>\n<li>returns current count on every <code>inc()</code> call</li>\n</ul>\n<p>This allows you to instantiate as many counters as you want, starting from any number you want. They can only count up. The implementation is straightforward. They’re the kind I&#8217;ve seen many times in the wild.</p>\n<p>You take initial state, save it in an instance property, then proceed to use it like it was your very own. The implementation is simple to reason about, easy to extend when further properties are needed, and quick to build.</p>\n<p>There&#8217;s just one problem: Instantiating multiple counters from settings stored in memory makes them share state.</p>\n<p>Wat? ?</p>\n<p>Look, here’s the example again. Pay close attention to the output.</p>\n<p class='codepen'  data-height='265' data-theme-id='0' data-slug-hash='VKvkgj' data-default-tab='js,result' data-animations='run' data-editable='' data-embed-version='2'>\nSee the Pen <a href='http://codepen.io/swizec/pen/VKvkgj/'>Set – ES6</a> by Swizec Teller (<a href='http://codepen.io/swizec'>@swizec</a>) on <a href='http://codepen.io'>CodePen</a>.0</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n<p><code>1, 2, 3</code>, not <code>1, 2, 1</code> as you would expect. ?</p>\n<p>The rabbit hole goes deeper: Call <code>counter.state == newCounter.state</code>, and it prints <code>true</code>. Different objects, same state. <em>Literally</em> the same. Not same value, the exact same memory address.</p>\n<p>Strange behavior, but it makes sense once you remember that in JavaScript, objects are always stored as references, not as values. And that sentence is hard to understand if you&#8217;ve never had a teacher who forced you to learn C and play with pointers.</p>\n<p>You&#8217;re about to learn something awesome and core to software engineering!</p>\n<figure>\n<img src=\"http://i.imgur.com/zw87YkR.gif\" alt=\"\" /><br />\n</figure>\n<p>We have memory with 7 addresses &#8211; <code>A1</code> through <code>A7</code>. For simplicity, we&#8217;re giving our variables the same names.</p>\n<p>When we set <code>A1</code> to <code>5</code>, a <code>5</code> appears at address <code>A1</code> in memory. Set <code>A2</code> to <code>6</code> and <code>6</code> appears at address <code>A2</code>. Simple values are stored at memory locations as the values.</p>\n<p>When we set <code>A3</code> to an array &#8211; <code>[1, 2]</code>, we need two memory locations to store that value. So we set <code>A3</code> to <em>the address</em> of our array – <code>A4</code>. At address <code>A4</code> we store the value <code>1</code>, and put <code>2</code> right next to it at <code>A5</code>.</p>\n<p>Now JavaScript can do a memory optimization. When we set <code>A6</code> to equal <code>A3</code>, it doesn&#8217;t have to create a new array at a new memory address. That would be wasteful. Instead, it gives <code>A6</code> the same address reference &#8211; <code>A4</code>.</p>\n<p>Both <code>A3</code> and <code>A6</code> point to the exact same memory location. Change one, and the other changes as well.</p>\n<p>Savvy?</p>\n<p>To avoid this problem, force JavaScript to make a copy before saving things into local object state. Use Lodash&#8217;s <code>_.copyDeep</code> if there&#8217;s a lot to copy, or explicitly set each property to build a new object from scratch.</p>\n<p>Err on the side of explicit.</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"04185e2c-da26-58c4-a05c-ff81ad5a79c4"}}