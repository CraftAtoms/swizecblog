{"data":{"wordpressPost":{"title":"Conway’s game of life in Google Docs","content":"<img src=\"http://swizec.com/blog/wp-content/uploads/2016/08/glider.gif\" alt=\"Conway glider\" class=\"aligncenter size-full wp-image-6932\" />\n<p>Why? Because.</p>\n<p>Have you really never wanted to create <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">Conway&#8217;s game of life</a> in a google doc spreadsheet? Really, never? Okay, it&#8217;s a pretty weird thing to do. And it&#8217;s not as fun as I hoped.</p>\n<p>You can play with it, <a href=\"https://docs.google.com/spreadsheets/d/1k8mT9a-Fu8x1TkvjYGtrDng8vWQAnNf01nSFCaVwqO4/edit?usp=sharing\">here</a></p>\n<p>I&#8217;m giving a 30min presentation on &#8220;<em>How to JavaScript</em>&#8221; to our not-engineers – the operations and business development teams. But how? It&#8217;s not like you can teach somebody JavaScript from scratch in 30 minutes. The most you can do is show them enough to want to learn more.</p>\n<p>That&#8217;s easier, but still … how? You can&#8217;t just show them a bunch of for loops and functions and hope it sticks. You have to get them <em>excited</em>.</p>\n<p>The answer I&#8217;m trying to answer is: <em>&#8220;How can this make my life better?&#8221;</em></p>\n<p>They all spend a lot of time in Google Docs. They run a lot of day to day processes in there. Google Docs has scripting capabilities.</p>\n<p>See where I&#8217;m getting at?</p>\n<p>Conway&#8217;s Game of Life inside Google Docs, of course. It highlights the basics of reading and manipulating properties of individual cells in spreadsheets, and the game itself is easy to explain:</p>\n<ol>\n<li>Any live cell with fewer than two live neighbours dies, as if caused by under-population.</li>\n<li>Any live cell with two or three live neighbours lives on to the next generation.</li>\n<li>Any live cell with more than three live neighbours dies, as if by over-population.</li>\n<li>Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</li>\n</ol>\n<figure>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/f/f2/Game_of_life_animated_glider.gif\" alt=\"\" /><br />\n</figure>\n<figure>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/9/95/Game_of_life_blinker.gif\" alt=\"\" /><br />\n</figure>\n<figure>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/0/07/Game_of_life_pulsar.gif\" alt=\"\" /><br />\n</figure>\n<p>I showed one of them some gifs and he said <em>&#8220;Oh dude, I&#8217;m excited! That looks so cool&#8221;</em>. All the confirmation I needed to go waste 3 hours of my life figuring out how to build this! ?</p>\n<p>Scripting Google Docs is hell.</p>\n<p>You can&#8217;t alert, there&#8217;s no console.log, everything is slow, and ES6 works only partially. You get destructuring, but no string templates. I dared not try arrow functions.</p>\n<p>Timers also don&#8217;t exist. Which means you have to manually step through the game loop by clicking a button. ?</p>\n<p>One silver lining is <a href=\"https://github.com/peterherrmann/BetterLog\">this 3rd party logger called BetterLogger</a>, which lets you <code>Logger.log</code> things to a separate sheet in your spreadsheet. It&#8217;s not very smart, but it helps a lot.</p>\n<p>And if you thought DOM was slow, wait &#8217;till you try Docs access. Naively searching through 30&#215;30 cells and counting neighbors took <em>many seconds</em>. Maybe 20 seconds per game tick.</p>\n<p>That can be optimized, though. Just access the spreadsheet less.</p>\n<p>The first step is to set global vars and add a menu:</p>\n<pre lang=\"javascript\">\r\n// global vars\r\nvar maxX = 30,\r\n    maxY = 30,\r\n    Alive = '#000000';\r\n\r\n// almost everything needs a reference to this\r\nvar Sheet = SpreadsheetApp.getActiveSheet();\r\n\r\n// add menu\r\nfunction onOpen() {\r\n  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();\r\n  var menuItems = [\r\n    {name: 'Step game', functionName: 'stepGame'},\r\n    {name: 'Clear game', functionName: 'clearGame'}\r\n  ];\r\n  spreadsheet.addMenu('Conway\\'s game of life', menuItems);\r\n}\r\n</pre>\n<p>Docs runs this code when you open your document. It adds a menu that looks like this:</p>\n<img src=\"http://swizec.com/blog/wp-content/uploads/2016/08/menu.png\" alt=\"Menu\" class=\"aligncenter size-full wp-image-6933\" srcset=\"https://swizec.com/blog/wp-content/uploads/2016/08/menu.png 488w, https://swizec.com/blog/wp-content/uploads/2016/08/menu-300x144.png 300w\" sizes=\"(max-width: 488px) 100vw, 488px\" />\n<p><code>Step Game</code> runs an iteration of the game loop, <code>Clear Game</code> clears all cells. Black background means a living cell and white background means a not-living cell.</p>\n<p>On each game step, we build a map of living cells, then run the game rules on each. Like this:</p>\n<pre lang=\"javascript\">\r\nfunction stepGame() {\r\n  var range = Sheet.getRange(1, 1, maxX, maxY);\r\n  \r\n  var numRows = range.getNumRows(),\r\n      numCols = range.getNumColumns();\r\n  \r\n  var lifeMap = [];\r\n  \r\n  for (var y = 1; y <= numRows; y++) {\r\n    lifeMap[y] = [];\r\n    \r\n    for (var x = 1; x <= numCols; x++) {\r\n      lifeMap[y][x] = range.getCell(y, x).getBackground() == Alive;\r\n    }\r\n  }\r\n  \r\n  for (var y = 1; y <= numRows; y++) {\r\n    for (var x = 1; x <= numCols; x++) {\r\n      conwayGame(lifeMap, y, x);\r\n    }\r\n  }\r\n}\r\n</pre>\n<p>You can think of the spreadsheet as 2-dimensional memory. First dimension is the row, second is the column. You can store styling information, the value itself, and notes. Docs lets you access directly on both dimension, but it&#8217;s slow.</p>\n<p>Having 2D memory also means there will be a lot of these nested for loop constructs in your code. You&#8217;re limited to O(n<sup>2</sup>) algorithms at best.</p>\n<p>Applying Conway rules to each cell looks like this:</p>\n<pre lang=\"javascript\">\r\nfunction conwayGame(lifeMap, y, x) {\r\n  var neighborPos = [y > 1 ? y-1 : 1, \r\n                     x > 1 ? x-1 : 1, \r\n                     y < maxY ? y+1 : maxY, \r\n                     x < maxX ? x+1: maxX]\r\n  \r\n  var livingNeighbors = countLife(lifeMap, neighborPos);\r\n  \r\n  if (lifeMap[y][x]) {\r\n    livingNeighbors -= 1;\r\n  }\r\n  \r\n  if ((livingNeighbors < 2 || livingNeighbors > 3) && lifeMap[y][x]) {\r\n    deactivate(Sheet.getRange(y, x));\r\n  }else if (livingNeighbors == 3) {\r\n    activate(Sheet.getRange(y, x));\r\n  }\r\n}\r\n</pre>\n<p>We count living neighbors, discount the current cell if it&#8217;s alive, then decide whether to <code>deactivate</code> or <code>activate</code> it. Counting the neighbors literally means walking through a 3x3 array around the current cell and counting cells that have a black background.</p>\n<p>Activating or deactivating is a call to <code>cell.setBackground('black')</code> and <code>cell.setBackground('white')</code>.</p>\n<p>That&#8217;s kind of it … I&#8217;m embarrassed it took me 3 hours …</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"3aa67456-132d-53a3-a4b6-7d23a76f591a"}}