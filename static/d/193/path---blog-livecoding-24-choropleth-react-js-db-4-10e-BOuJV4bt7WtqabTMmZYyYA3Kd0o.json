{"data":{"wordpressPost":{"title":"Livecoding #24: A choropleth in React.js","content":"<p><em>This is a Livecoding Recap – an almost-weekly post about interesting things discovered while livecoding ?. Always under 500 words and with pictures. You can follow my channel, <a href=\"https://livecoding.tv/swizec\">here</a>. New content almost <strong>every Sunday at 2pm PDT</strong>. There’s live chat, come say hai ?</em></p>\n<p><iframe src=\"https://www.livecoding.tv/swizec/videos/YYKW3/embed\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"true\" scrolling=\"no\"></iframe></p>\n<p>I just spent 3 hours normalizing datasets. Then I wrote a script that did it in less than 5 seconds. I am not a smart man.</p>\n<p>Did you know there were 32 states with a Washington county in the US? And there are 24 Jackson counties? 16 Wayne counties… 12 Marshalls… ?</p>\n<p>County names are only unique per-state, not per-all-of-the-country. Now you know. And now I know, too!</p>\n<p>Fixing that problem let me turn this picture from livecoding:</p>\n<figure>\n<img src=\"http://i.imgur.com/A9CQw9a.png\" alt=\"\" /><br />\n</figure>\n<p>Into this picture:</p>\n<figure>\n<img src=\"http://i.imgur.com/REu8pM0.png\" alt=\"\" /><br />\n</figure>\n<p>The latter has less gray and more blue. That&#8217;s good. It means there are fewer counties that didn&#8217;t match our dataset. Some remain. I don&#8217;t know how to fix those.</p>\n<p>You&#8217;re looking at a choropleth map of median household incomes in the United States that I built with React and D3v4.</p>\n<p>Buffalo County in South Dakota is the poorest county in the US with a median household income of $21,658. City of Falls Church County in Virginia is the richest with $125,635. Richest part of the country is about 6x richer than the poorest. ? </p>\n<p>These are medians we&#8217;re talking about, not maximums. In both cases, 90% of households fall within a few thousand dollars of the median. </p>\n<p>More about that later this week when we compare this median household data to that dataset of salaries in the software industry. That should be fun ?</p>\n<h2>Here&#8217;s how it&#8217;s built</h2>\n<p>We cribbed off of <a href=\"https://bl.ocks.org/mbostock/4060606\">Mike Bostock&#8217;s choropleth example</a> and modified it for React.</p>\n<p>After loading our datasets – a TopoJSON of US counties and states (geo info) and a table of median household incomes per county – we start with a <code>CountyMap</code> component. It draws the overall map and deals with calculating the quantize threshold scale for colors.</p>\n<p>The component is about 50 lines, so I added comments to each method.</p>\n<pre lang=\"javascript\">\r\nclass CountyMap extends Component {\r\n    // Setup default D3 objects\r\n    // projection - defines our geo projection, how the map looks\r\n    // geoPath - calculates d attribute of <path> so it looks like a map\r\n    // quantize - threshold scale with 9 buckets\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.projection = d3.geoAlbersUsa()\r\n                            .scale(1280);\r\n        this.geoPath = d3.geoPath()\r\n                         .projection(this.projection);\r\n        this.quantize = d3.scaleQuantize()\r\n                          .range(d3.range(9));\r\n\r\n        this.updateD3(props);\r\n    }\r\n\r\n    // update D3 objects when props update\r\n    componentWillReceiveProps(newProps) {\r\n        this.updateD3(newProps);\r\n    }\r\n\r\n    // Re-center the geo projection\r\n    // Update domain of quantize scale\r\n    updateD3(props) {\r\n        this.projection.translate([props.width / 2, props.height / 2]);\r\n\r\n        if (props.medianIncomes) {\r\n            this.quantize.domain([10000, 75000]);\r\n        }\r\n    }\r\n\r\n    // If no data, do nothing (we might mount before data loads into props)\r\n    render() {\r\n        if (!this.props.usTopoJson) {\r\n            return null;\r\n        }else{\r\n            // Translate topojson data into geojson data for drawing\r\n            // Prepare a mesh for states and a list of features for counties\r\n            const us = this.props.usTopoJson,\r\n                  statesMesh = topojson.mesh(us, us.objects.states, (a, b) => a !== b),\r\n                  counties = topojson.feature(us, us.objects.counties).features;\r\n\r\n            // Loop through counties and draw <County> components\r\n            // Add a single <path> for state borders\r\n            return (\r\n                <g>\r\n                    {counties.map((feature) => <County geoPath={this.geoPath}\r\n                        feature={feature}\r\n                        key={feature.id}\r\n                        quantize={this.quantize}\r\n                        data={_.find(this.props.medianIncomes, {countyId: feature.id})} />)}\r\n\r\n                     <path d={this.geoPath(statesMesh)} style={{fill: 'none',\r\n                             stroke: '#fff',\r\n                             strokeLinejoin: 'round'}} />\r\n                </g>\r\n            );\r\n        }\r\n    }\r\n}\r\n</pre>\n<p>I hope that makes sense. It follows <a href=\"http://swizec.com/reactd3js/\">my standard React+D3js approach</a>.</p>\n<p>For the counties, we can use a stateless functional component that gets all relevant data through props. It looks like this:</p>\n<pre lang=\"javascript\">\r\n// Combine array of colors and quantize scale to pick fill colo\r\n// Return a <path> element\r\nconst County = ({ data, geoPath, feature, quantize }) => {\r\n    let color = BlankColor;\r\n\r\n    if (data) {\r\n        color = ChoroplethColors[quantize(data.medianIncome)];\r\n    }\r\n\r\n    return (<path d={geoPath(feature)} style={{fill: color}} title={feature.id} />)\r\n};\r\n</pre>\n<p>With some setup and a bit of data loading, those two components create a choropleth map of median household incomes in the United States. <a href=\"https://www.livecoding.tv/swizec/videos/YYKW3-comparing-177k-software-salaries\">Watch the video</a> to see how it all fits together.</p>\n<p>P.S.: the edited and improved versions of these videos are becoming a video course. Readers of the engineer package of <a href=\"http://swizec.com/reactd3js/\">React+d3js ES6</a> get the video course for free when it’s ready.</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"3f27542d-1faf-5148-bc3b-0f82477500fc"}}