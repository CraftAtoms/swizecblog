{"data":{"wordpressPost":{"title":"How to setup Gocommerce on a new Digital Ocean droplet","content":"<a href=\"https://www.youtube.com/embed/O0P7YIiQm4Y?start=11147\"><img src=\"https://swizec.com/blog/wp-content/uploads/2018/01/Screen-Shot-on-2018-01-23-at-141356-1024x577.png\" alt=\"\" class=\"alignnone size-large wp-image-8155\" srcset=\"https://swizec.com/blog/wp-content/uploads/2018/01/Screen-Shot-on-2018-01-23-at-141356-1024x577.png 1024w, https://swizec.com/blog/wp-content/uploads/2018/01/Screen-Shot-on-2018-01-23-at-141356-300x169.png 300w, https://swizec.com/blog/wp-content/uploads/2018/01/Screen-Shot-on-2018-01-23-at-141356-768x433.png 768w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a>\n<p><a href=\"https://github.com/netlify/gocommerce\">GoCommerce</a> is Netlify&#8217;s headless e-commerce for JAMstack sites. Whatever that means.</p>\n<p>It acts as your database when you have a single page app (possibly in React) that sells stuff. Integrates through <code>&lt;script&gt;</code> tags with JSON in them.</p>\n<p>I hear Netlify is working on a fully hosted solution. It&#8217;s not ready yet.</p>\n<p><a href=\"https://www.digitalocean.com/\">Digital Ocean</a> droplets are a glorified VPS, virtual private server. I&#8217;m told it&#8217;s actually an IaaS (infrastructure as a service) and competes with Amazon&#8217;s AWS‚Ä¶</p>\n<p>Sure felt a lot like ssh-ing into a VPS and mucking about. ü§∑‚Äç‚ôÄÔ∏è</p>\n<p>Recently, I had to make these two work together. I looked for a guide, but none could be found. So here&#8217;s a collection of my notes with some explanation.</p>\n<p>The whole process takes about 10 minutes, if you know what you&#8217;re doing. Writing this will help me know what I&#8217;m doing next time üôÇ</p>\n<h2>Get a droplet, then set it up</h2>\n<p>I was given an existing droplet. This assumes you have a Digital Ocean Droplet running Ubuntu. Just the initial <em>&#8220;Here&#8217;s your VPS&#8221;</em> setup that comes out of the box.</p>\n<p>üëâ <a href=\"https://www.digitalocean.com/community/tutorials/how-to-launch-your-site-on-a-new-ubuntu-14-04-server-with-lamp-sftp-and-dns\">First step of this tutorial</a></p>\n<p>Next we have to set up a user because running things as <code>root</code> is bad. I won&#8217;t go into why it&#8217;s bad right now because it&#8217;s just something I remember from my Linux-using days many years ago. It&#8217;s bad. Don&#8217;t do it.</p>\n<p>üëâ <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-14-04\">Follow this tutorial</a></p>\n<p>The instructions boil down to:</p>\n<ol>\n<li>Login as root</li>\n<li>Create new user (I used <code>gocommerce</code>)</li>\n<li>Give it <code>sudo</code> privileges</li>\n<li>Add your personal public ssh key to the server&#8217;s authorized keys </li>\n<li>Login as new user</li>\n</ol>\n<h2>Login, install SQLite</h2>\n<p>Once you have a new user, it&#8217;s time to login and set up Gocommerce. This involves installing <code>golang</code>, <code>sqlite3</code>, and a few knickknacks.</p>\n<p>Login to your server. My user was called <code>gocommerce</code>.</p>\n<pre><code>$ ssh gocommerce@&lt;YOUR_IP&gt;\n</code></pre>\n<p>Then install <code>sqlite3</code>. <a href=\"https://sqlite.org/\">SQLite</a> is a simple database that&#8217;s easy to setup. If you want to use this for real production, I suggest opting for Postgres.</p>\n<p>üëâ <a href=\"https://www.quora.com/How-can-I-install-SQLite-in-Ubuntu-14-04-2-LTS\">Following this Quora answer</a></p>\n<pre><code>$ sudo apt-get update\n$ sudo apt-get install sqlite3 sqlite3-dev\n</code></pre>\n<p><code>apt</code> is Ubuntu&#8217;s package management system. Much like <code>npm</code> for JavaScript. <code>update</code> updates the local listing of software packages, <code>install</code> installs them. I used to know why this was <code>apt-get</code> and not just <code>apt</code>.</p>\n<p>I also used to know why you need to install <code>sqlite3-dev</code>, but I have since forgotten. Doesn&#8217;t matter.</p>\n<p>You now have SQLite and can create local database. Single file, SQL interface. Wonderful.</p>\n<h2>Install Go</h2>\n<p>Installing <a href=\"https://golang.org/\">Golang</a> is a little harder. You can&#8217;t use the default package because Gocommerce needs at least Go version 1.7.</p>\n<p>As I painfully discovered, the official version in Ubuntu packages is 1.6, and that&#8217;s not good enough.</p>\n<p>üëâ <a href=\"https://github.com/golang/go/wiki/Ubuntu\">Followed this guide to install</a></p>\n<p>üëâ <a href=\"https://medium.com/@patdhlk/how-to-install-go-1-9-1-on-ubuntu-16-04-ee64c073cd79\">And this guide to configure</a></p>\n<p>Here&#8217;s what it boils down to.</p>\n<p>You install Go with these <code>apt-get</code> incantations.</p>\n<pre><code>$ sudo add-apt-repository ppa:gophers/archive\n$ sudo apt-get update\n$ sudo apt-get install golang-1.9-go\n</code></pre>\n<p>I installed the incorrect version of Go at first, so I also had to overwrite its executable with a link to the new one. You might not have to do this, and it&#8217;s probably a bad way of doing it, but üëá</p>\n<pre><code>$ cd /usr/bin\n$ sudo rm go\n$ sudo ln -s /usr/lib/go-1.9/bin/go\n</code></pre>\n<p>When you run <code>go version</code> it should say 1.9.</p>\n<p>Then we get to create <code>$GOPATH</code> and set it up in our <code>.bashrc</code>.</p>\n<pre><code>$ vim ~/.bashrc\n</code></pre>\n<p>Add these lines at the end of that file:</p>\n<pre><code>export GOPATH=\"$HOME/go\"\nexport GOBIN=\"$GOPATH/bin\"\nexport PATH=\"$GOBIN:$PATH\"\nexport PATH=\"$PATH:/usr/local/go/bin\"\n</code></pre>\n<p>This creates your <code>$GOPATH</code> and <code>$GOBIN</code> variables then adds them to <code>$PATH</code>. Go needs these to be able to execute stuff and load itself up.</p>\n<p>Next you have to create that directory ‚Üí</p>\n<pre><code>$ mkdir -p ~/go/src\n</code></pre>\n<p>This puts a directory called <code>go</code> in your home dir and a <code>src</code> dir inside that. <code>~/go/src</code> is where all your Go code is going to live.</p>\n<h2>Build, configure, and run Gocommerce</h2>\n<p>Now that you have Go running, it&#8217;s time to set up Gocommerce.</p>\n<p>First, create the directory it&#8217;s going to live in.</p>\n<pre><code>$ mkdir ~/go/src/github.com/netlify\n</code></pre>\n<p>Next go there and clone the repo from Github. Ubuntu comes with git preinstalled, so there&#8217;s no need to worry about that.</p>\n<pre><code>$ cd ~/go/src/github.com/netlify\n$ make deps\n$ make build_linux\n</code></pre>\n<p><code>make deps</code> installs Go dependencies that Gocommerce uses and <code>make build_linux</code> builds Gocommerce itself. You have to build it for Linux because we&#8217;re running Ubuntu.</p>\n<p>On your dev machine, if it&#8217;s a Mac, you&#8217;d use <code>make build</code> to compile for a Mac. You can see what Netlify considers the default üôÇ</p>\n<h3>Configure</h3>\n<p>To configure Gocommerce, you edit a <code>.env</code> file in its dir, <code>~/go/src/github.com/netlify/gocommerce/.env</code></p>\n<p>You can see details in <a href=\"https://github.com/netlify/gocommerce\">Gocommerce README</a>. Something like this üëá</p>\n<pre><code>GOCOMMERCE_SITE_URL=http://jamcommerce.netlify.com\nGOCOMMERCE_JWT_SECRET=\"thisissupersecret\"\nGOCOMMERCE_DB_DRIVER=sqlite3\nDATABASE_URL=gotrue.db\nGOCOMMERCE_DB_AUTOMIGRATE=true\nGOCOMMERCE_API_HOST=&lt;your ip&gt;\nPORT=9111\nGOCOMMERCE_MAILER_HOST=smtp.sendgrid.net\nGOCOMMERCE_MAILER_PORT=587\nGOCOMMERCE_MAILER_USER=swizec+jamcommerce@swizec.com\nGOCOMMERCE_MAILER_PASS=&lt;mailer pass&gt;\nGOCOMMERCE_MAILER_SUBJECTS_ORDER_CONFIRMATION=\"Thank you for your order!\"\nGOCOMMERCE_MAILER_SUBJECTS_ORDER_RECEIVED=\"A new order has been placed\"\nGOCOMMERCE_PAYMENT_STRIPE_ENABLED=true\nGOCOMMERCE_PAYMENT_STRIPE_SECRET_KEY=&lt;your stripe key&gt;\n</code></pre>\n<p>The tricky one to find was that <code>GOCOMMERCE_DB_AUTOMIGRATE</code>. That keeps your database schema up to date.</p>\n<p>You&#8217;ll need Stripe (or Paypal) and some sort of SMTP service. I&#8217;m using sendgrid here.</p>\n<h3>Run</h3>\n<p>You can run Gocommerce using <code>./gocommerce</code>. This runs the service directly, and you can check that it&#8217;s running at <code>http://&lt;your ip&gt;:9111</code>.</p>\n<p>But it&#8217;s going to stop running once your ssh session times out. Not good.</p>\n<p>We have to turn <code>gocommerce</code> into a Daemon, a script that runs in the background.</p>\n<p>üëâ <a href=\"https://www.devdungeon.com/content/creating-systemd-service-files\">Follow this guide for creating a custom systemd service</a></p>\n<p>systemd is the system that Ubuntu uses to manage automatically starting scripts.</p>\n<p>To do this, you create <code>/etc/systemd/system/gocommerce.service</code>. I used vim, so <code>sudo vim /etc/systemd/system/gocommerce.service</code>.</p>\n<pre><code>[Unit]\nDescription=Gocommerce Service\nAfter=network.target\n\n[Service]\nType=simple\nUser=gocommerce\nWorkingDirectory=/home/gocommerce/go/src/github.com/netlify/gocommerce\nExecStart=/home/gocommerce/go/src/github.com/netlify/gocommerce/gocommerce\nRestart=on-abort\n\n[Install]\nWantedBy=multi-user.targer \n</code></pre>\n<p>This assumes the user you created earlier is called <code>gocommerce</code> and that you haven&#8217;t moved the <code>gocommerce</code> executable.</p>\n<p>You can now start the service.</p>\n<pre><code>$ systemctl start gocommerce\n</code></pre>\n<p>You should see a 404 error page on <code>http://&lt;your ip&gt;:9111</code>. That means gocommerce is running and serving request.</p>\n<h2>üëå</h2>\n<p>You can now close your ssh connection and <code>gocommerce</code> should keep running in the background forever.</p>\n<p>Congratz.</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"616aa773-8ab9-5277-bd45-ed27d492dd0f"}}