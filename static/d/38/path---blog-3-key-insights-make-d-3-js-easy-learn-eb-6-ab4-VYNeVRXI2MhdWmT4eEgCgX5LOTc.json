{"data":{"wordpressPost":{"title":"3 key insights that make D3.js easy to learn","content":"<p>The other day somebody asked me how to learn D3.js from scratch. I quipped that it took me writing a book to really learn it. It&#8217;s one hell ofa library.</p>\n<p>Most people don&#8217;t go that far. They don&#8217;t have to. Most people start with a problem, find similar examples, do some copy pasta, tweak until it works and end up with a working visualization they don&#8217;t understand. You&#8217;d be surprised how few people actually understand how their D3 dataviz works.</p>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">Anecdata: I wrote a book on it to learn it.</p>\n<p>Normal curve is like this ðŸ‘‡</p>\n<p>1) have problem/idea<br />2) find similar example<br />3) tweak until solve<br />4) repeat<br />5) get frustrated<br />6) learn 1 or 2 basic concepts<br />7) epiphany<br />8) lose touch with why it felt hard at first<br />9) teach</p>\n<p>&mdash; Swizec (@Swizec) <a href=\"https://twitter.com/Swizec/status/961448920600604672?ref_src=twsrc%5Etfw\">February 8, 2018</a></p></blockquote>\n<p>That was a funny tweet. It delighted 3 people, that&#8217;s my bar for success.</p>\n<p>But the idea that there&#8217;s only 1 or 2, maybe 3, key concepts you have to grok to understand every D3 example out there &#8230; it kept me up at night. What <em>are</em> those 3 key insights into D3?</p>\n<h2>1) Data manipulation vs. DOM manipulation</h2>\n<p>All D3 examples are split into two parts: Data manipulation and DOM manipulation. First you prep your values, then you render.</p>\n<p>You have to go through many examples to notice what&#8217;s going on. Inference learning is hard. Most beginners miss this pattern and it makes D3 look more confusing than it is.</p>\n<p>Let&#8217;s take an example from <a href=\"https://github.com/d3/d3/wiki/Gallery\">D3&#8217;s docs</a>, a bar chart with a hover effect.</p>\n<p><iframe src=\"https://cdn.rawgit.com/mbostock/3885304/raw/a91f37f5f4b43269df3dbabcda0090310c05285d/index.html\" width=\"640\" height=\"480\"></iframe></p>\n<p>Mike Bostock, the creator of D3, built this chart in 43 lines of code. Here they are ðŸ‘‡</p>\n<img src=\"https://swizec.com/blog/wp-content/uploads/2018/02/barchartcode.png\" alt=\"Bar Chart codea\" class=\"aligncenter size-full wp-image-8180\" srcset=\"https://swizec.com/blog/wp-content/uploads/2018/02/barchartcode.png 600w, https://swizec.com/blog/wp-content/uploads/2018/02/barchartcode-283x300.png 283w\" sizes=\"(max-width: 600px) 100vw, 600px\" />\n<p>There are two parts to this code: Data manipulation and DOM manipulation.</p>\n<a href=\"Bar\"><img src=\"https://swizec.com/blog/wp-content/uploads/2018/02/barchartcode-data.png\" alt=\"Bar chart data manipulation code\" class=\"aligncenter size-full wp-image-8181\" srcset=\"https://swizec.com/blog/wp-content/uploads/2018/02/barchartcode-data.png 600w, https://swizec.com/blog/wp-content/uploads/2018/02/barchartcode-data-283x300.png 283w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></a>\n<p>Bostock here first prepares his data: </p>\n<ul>\n<li>some sizing variables (margin, width, height)</li>\n<li>two scales to help with data-to-coordinates conversion (x, y)</li>\n<li>loads his dataset (d3.tsv) and updates his scales&#8217; domains</li>\n<li>uses scales to calculate attributes during DOM manipulation</li>\n</ul>\n<p>In the DOM manipulation part, he puts shapes and objects into an SVG. This is the part you then see in the browser.</p>\n<img src=\"https://swizec.com/blog/wp-content/uploads/2018/02/barchart-dom.png\" alt=\"Bar chart DOM manipulation code\" class=\"aligncenter size-full wp-image-8182\" srcset=\"https://swizec.com/blog/wp-content/uploads/2018/02/barchart-dom.png 600w, https://swizec.com/blog/wp-content/uploads/2018/02/barchart-dom-283x300.png 283w\" sizes=\"(max-width: 600px) 100vw, 600px\" />\n<p>DOM manipulation in D3 happens via D3 selections. They&#8217;re a lot like jQuery <code>$(something)</code>. Personally I like to do this part with React as described in my book, <a href=\"https://swizec.com/reactd3js\">React+D3v4</a>.</p>\n<p>Here Bostock does a few things</p>\n<ul>\n<li>selects the <code>&lt;svg&gt;</code> node (d3.select)</li>\n<li>appends a grouping <code>&lt;g&gt;</code> node (.append) with an SVG positioning attribute (translate)</li>\n<li>adds a bottom axis by appending a <code>&lt;g&gt;</code>, moving it, then calling <code>d3.axisBottom</code> on it. D3 has built-in axis generators</li>\n<li>adds a left axis using the same approach but rotating the ticks</li>\n<li>appends a text label &quot;Frequency&quot; to the left axis</li>\n<li>uses <code>selectAll.data</code> to make a virtual selection of <code>.bar</code> nodes and attach some data, then for every new data value (.enter), appends a <code>&lt;rect&gt;</code> node and gives it attributes</li>\n</ul>\n<p>That last part is where people get lost. It looks like magic. I&#8217;ve been using D3 for years and it still looks like magic.</p>\n<p>It&#8217;s a declarative approach to rendering data. Works great, hard to understand. That&#8217;s why I do it in React instead ðŸ™‚</p>\n<p>You can think of <code>.enter</code> as a loop over your data and everything chained after <code>.enter</code> is your loop&#8217;s body. Sort of like doing <code>data.map(d =&gt; append(rect).setManyAttributes())</code></p>\n<p>Savvy?</p>\n<h2>2) Scales</h2>\n<p>Scales are D3&#8217;s most versatile concept. They help you translate between two different spaces. Like, mathematical spaces.</p>\n<p>They&#8217;re like the mathematical functions you learned about in school. A domain maps to a range using some sort of formula.</p>\n<figure>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Function_color_example_3.svg/440px-Function_color_example_3.svg.png\" alt=\"\" /><br />\n</figure>\n<p>Colored shapes in the domain map to colors in the range. No formula for this one, which makes it an ordinal scale.</p>\n<pre><code>let shapes = d3.scaleOrdinal()\n                 .domain(['red triangle', 'orange rectangle', ...)\n                 .range(['red', 'orange', ...)\n</code></pre>\n<p>Once you have this scale, you can use it to translate from shapes to colors. <code>shapes('red triangle')</code> returns <code>'red'</code> for example.</p>\n<p>Many different types of scales exist. Linear, logarithmic, quantize, etc. Any basic transformation you can think of exists. The rest you can create by writing custom scales.</p>\n<p>You&#8217;re most often going to use scales to turn your data values into coordinates. But other usecases exist.</p>\n<h2>3) D3 layouts</h2>\n<p>Sure <code>.enter.append</code> looks like magic, but D3 layouts are the real mind=blown of the D3 ecosystem. They take your input data and return a full-featured visualization thing.</p>\n<p>Like a force layout using forces between nodes to place them on the screen.</p>\n<p><iframe src=\"https://cdn.rawgit.com/mbostock/4062045/raw/5916d145c8c048a6e3086915a6be464467391c62/index.html\" width=\"640\" height=\"480\"></iframe></p>\n<p>Or a circle packing layout that neatly packs circles.</p>\n<p><iframe src=\"https://cdn.rawgit.com/mbostock/4063530/raw/fbadda6a3eaf72521f6f45cfa8e1d119bd2b0248/index.html\" width=\"640\" height=\"480\"></iframe></p>\n<p>I don&#8217;t know how these work internally. I&#8217;ve yet to try building one for others to use. </p>\n<p>But here&#8217;s a key insight about the magic of layouts: They&#8217;re the data part.</p>\n<p>You take a <code>forceLayout</code> for example and feed it your data. It returns an object with a <code>tick</code> event callback.</p>\n<pre><code>var simulation = d3.forceSimulation()\n    .force(&quot;link&quot;, d3.forceLink().id(function(d) { return d.id; }))\n    .force(&quot;charge&quot;, d3.forceManyBody())\n    .force(&quot;center&quot;, d3.forceCenter(width / 2, height / 2));\n</code></pre>\n<p>This <code>simulation</code> now handles everything about rendering nodes. Changes their positions on every <code>tick</code> callback.</p>\n<p>But it is up to you to render them. A layout handles your dataviz in the abstract. You&#8217;re still the one in control of rendering.</p>\n<p>For a force layout, you have to update the DOM on every tick of the animation. For circle packing, you render it once.</p>\n<p>It took me a while to get this and once I did, all the fancy looking visualizations started to make sense.</p>\n<h2>Fin</h2>\n<p>To summarize, you need to grok 3 key insights for D3 to make sense. Once they click, a whole new world opens up.</p>\n<ol>\n<li>Code is split into data and DOM manipulation</li>\n<li>Scales are great and used a lot</li>\n<li>You&#8217;re always in control of rendering</li>\n</ol>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"6b67d782-33f5-5ffd-aee2-f9a69915225c"}}