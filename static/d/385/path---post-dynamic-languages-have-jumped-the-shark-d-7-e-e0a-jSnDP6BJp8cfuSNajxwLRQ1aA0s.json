{"data":{"wordpressPost":{"title":"Dynamic languages have jumped the shark","content":"<img src=\"https://www.filepicker.io/api/file/jJuq5mNjQbC0ZJrdJYms\" alt=\"Jumping the shark\" />\n<p>I still remember the heated arguments I&#8217;d have with my high school professors about dynamic languages. What do you mean python isn&#8217;t a <em>real</em> language? What&#8217;s wrong with you!? <a class=\"zem_slink\" title=\"Dynamic programming language\" href=\"http://en.wikipedia.org/wiki/Dynamic_programming_language\" rel=\"wikipedia\" target=\"_blank\">Dynamic languages</a> are the coolest thing ever!</p>\n<p>Some kids fight about curfews and school rules, I fought about <a class=\"zem_slink\" title=\"Scripting language\" href=\"http://en.wikipedia.org/wiki/Scripting_language\" rel=\"wikipedia\" target=\"_blank\">scripting languages</a> being just as &#8220;real&#8221; as the likes of C and Pascal. That was ten years ago &#8211; dynamic languages were all the rage and I just started exploring the world of programming beyond what my mentors laid out in front of me.</p>\n<p>Nimble scripting languages sounded like a promised land compared to the musky static languages of yore. No longer would you be forced to think about data types all the time, no longer would your code be littered with the <code>int</code> and <code>char</code> and <code>double</code> of the world, no more stifling constraints on using a variable once it&#8217;s been defined.</p>\n<p>Just a pure expression of thought. Programmer and problem at peace with one another, no angry compiler will get in your way.</p>\n<h2>The promised land tumbles</h2>\n<p>Yesterday I realised dynamic languages have jumped the shark. The evidence has been mounting for a while, but yesterday&#8217;s mishap with <a class=\"zem_slink\" title=\"Ruby on Rails\" href=\"http://rubyonrails.org\" rel=\"homepage\" target=\"_blank\">Ruby on Rails</a> sealed the deal.</p>\n<p>Did you know that Rails environment settings, the <code>ENV</code> hash, only accepts string settings? I wanted to make a boolean flag. The only solution was to make a string <code>'false'</code>, then do a <a class=\"zem_slink\" title=\"Comparison of programming languages (string functions)\" href=\"http://en.wikipedia.org/wiki/Comparison_of_programming_languages_%28string_functions%29\" rel=\"wikipedia\" target=\"_blank\">string comparison</a> when needed. There isn&#8217;t even a native way to cast a string to a boolean.</p>\n<p>Programmer left completely to his own devices. Out in the rain. With no chance of escape.</p>\n<p>The closest Ruby will let you to casting a string to a boolean is using something like <code>!!'blah'</code>, but all strings evaluate to <code>true</code>. Even empty strings.</p>\n<p>Useless.</p>\n<p>The situation is just as bad in other dynamic languages. <a class=\"zem_slink\" title=\"JavaScript\" href=\"http://en.wikipedia.org/wiki/JavaScript\" rel=\"wikipedia\" target=\"_blank\">JavaScript</a> is particularly famous for its weird handling of data types.</p>\n<blockquote class=\"twitter-tweet\"><p>And this, of course, evaluates to the string &#8220;fail&#8221;.(![]+[])[+[]]+(![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]];</p>\n<p>— Marcus Lagergren (@lagergren) <a href=\"https://twitter.com/lagergren/status/337484475204255744\">May 23, 2013</a></p></blockquote>\n<p>Try it. It works.</p>\n<p>Part of the code returns <code>undefined</code>, which is magically transformed into a string, then other parts of the code select particular characters from that string &#8230; the mind reels in disbelief.</p>\n<p>I don&#8217;t want to remember the atrocities I&#8217;ve committed in <a class=\"zem_slink\" title=\"PHP\" href=\"http://www.php.net\" rel=\"homepage\" target=\"_blank\">PHP</a> just to convince it that yes, I do know what I&#8217;m doing, yes I do want that variable to behave like it&#8217;s a particular type.</p>\n<p>Python&#8217;s strong typing at least ensures we can&#8217;t add a string to an integer, but there&#8217;s still the odd <code>5/float(2)</code> type of hack. Some people suggest going as far as littering your code with assert statements to ensure your team mates can&#8217;t do stupid things with your functions.</p>\n<p>This is the exact opposite of what I was promised as an aspiring 15 year old coder.</p>\n<h2>Why we wanted dynamic languages in the first place</h2>\n<img src=\"https://www.filepicker.io/api/file/8xojSjy5S9CpVtWes2dl\" alt=\"\" width=\"747\" height=\"398\" />\n<p>Dynamic languages promised an ease of development, a sense of thinking about solving the problem instead of worrying about talking to the computer. And the world fell in love.</p>\n<p>Instead, dynamic languages delivered a hodgepodge so wibbly-wobbly it always forces you to think about data types, even about the particular quirks of how this particular language handles certain conversions. Always at the worst possible moment. Nothing is true anymore, you can&#8217;t rely on a single thing; without automated tests you&#8217;re flying blind, relying on nothing but your raw coding prowess to stave off the always imminent failure.</p>\n<p>God forbid one of your team mates does something stupid.</p>\n<p>But we did get away from the whole <code>int a</code> nonsense. And we did get fancy <a class=\"zem_slink\" title=\"Read–eval–print loop\" href=\"http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" rel=\"wikipedia\" target=\"_blank\">REPL</a>&#8216;s. And we did get away from the write-compile-run cycle.</p>\n<p>But what have the Romans ever done for us!</p>\n<h2>Static is better now</h2>\n<p>Here&#8217;s the thing, though, there is now a whole new class of even awesomer languages &#8211; the modern statically strong typed languages.</p>\n<p><a class=\"zem_slink\" title=\"Scala (programming language)\" href=\"http://www.scala-lang.org/\" rel=\"homepage\" target=\"_blank\">Scala</a> and <a href=\"http://haskell.org\">Haskell</a> have everything we&#8217;ve always wanted from a dynamic language. You never have to spell out a variable&#8217;s name, the compiler often knows better than you do anyway, and there is a REPL you can use to prototype things.</p>\n<p>But unlike dynamic languages you can rely on <em>everything</em>. All the benefits of <a class=\"zem_slink\" title=\"Type system\" href=\"http://en.wikipedia.org/wiki/Type_system\" rel=\"wikipedia\" target=\"_blank\">static type</a> analysis, most of the benefits of dynamic languages. Hell, you can get rid of the write-compile-run cycle with a simple bash script that compiles your code before running it.</p>\n<p>Just remember, static languages are not just C and Java anymore. The world has moved on while we were stuck in the dynamic hell hole for the past ten years.</p>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/?px\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=83b08eef-ef3e-4b96-9d39-cf7b256a3e51\" alt=\"Enhanced by Zemanta\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"cd3351c9-bd53-5408-b451-cb56fec58569"}}