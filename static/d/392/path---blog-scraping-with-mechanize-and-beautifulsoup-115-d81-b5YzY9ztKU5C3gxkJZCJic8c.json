{"data":{"wordpressPost":{"title":"Scraping with Mechanize and BeautifulSoup","content":"<p style=\"text-align: center;\"><img class=\"aligncenter\" title=\"Scraping\" src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/0/07/Parma_-_scraping_the_deck.jpg/800px-Parma_-_scraping_the_deck.jpg\" alt=\"Scraping\" width=\"560\" height=\"391\" /></p>\n<p>Scraping is one of those annoying little things that will never be solved for the general case. Sometimes you want to <a href=\"http://www.zemanta.com/fruitblog/the-uncanny-valley-of-web-scraping/\" target=\"_blank\">extract articles</a>, other times you&#8217;re looking for data in organized tables &#8230; and sometimes it&#8217;s all hidden behind a form with <a class=\"zem_slink\" title=\"Cross-site request forgery\" href=\"http://en.wikipedia.org/wiki/Cross-site_request_forgery\" rel=\"wikipedia\" target=\"_blank\">cross-site request forgery</a>protection (csrf).</p>\n<p>And it&#8217;s never <em>actually</em> organized. Even with the best of websites, I don&#8217;t think I&#8217;ve ever encountered a scraping job that couldn&#8217;t be described as <em>&#8220;A small and simple general model with heaps upon piles of annoying little exceptions&#8221;</em></p>\n<p>At best scraping a bunch of data from a website is a somewhat fiddly job, at worst you&#8217;ll be wishing you&#8217;d done it manually and be done with it.</p>\n<p>When you&#8217;re done, you will lie awake at night, praying to the gods of the internets, hoping nobody sneezes at the <a class=\"zem_slink\" title=\"HTML\" href=\"http://en.wikipedia.org/wiki/HTML\" rel=\"wikipedia\" target=\"_blank\">HTML</a> of that page.</p>\n<h2>Mechanize</h2>\n<p>You won&#8217;t get away from the fiddliness, but there&#8217;s a lot you can do to make the job more palatable.</p>\n<p>For starters &#8211; ditch manually taking care of submitting forms, hauling cookies around, holding history, sending referrers, using a good user-agent, following redirects and so on and on.</p>\n<p>Submitting a form usually goes like this:</p>\n<ol>\n<li>Go to page</li>\n<li>View source</li>\n<li>Find form</li>\n<li>Note the <em>action</em> url</li>\n<li>Make a note of the field names</li>\n<li>Make sure honeypot fields will be handled properly</li>\n<li>Write a few lines of code to prepare data for submission</li>\n<li>Submit to the correct url</li>\n</ol>\n<p>Then you discover the website uses csrf protection and you have to make a script that will go to the form address, parse the form, find the csrf field, hold the proper cookie and so on &#8230;</p>\n<p>Pain in the ass.</p>\n<pre lang=\"python\">import urllib, urllib2\r\n\r\nreq = urllib2.Request(\"http://example.com/form/submit/url\"\r\n                      data=urllib.urlencode({'field1': 'value',\r\n                                             'field2': 'value',\r\n                                             'filed3': 'value'}),\r\n                      headers={'User-Agent': 'Mozilla something',\r\n                               'Cookie': 'name=value; name2=value2'})\r\nresponse = urllib2.urlopen(req)\r\n# do something with response</pre>\n<p>With <a href=\"http://wwwsearch.sourceforge.net/mechanize/development.html\" target=\"_blank\">Mechanize</a> the process is much simpler:</p>\n<ol>\n<li>Go to page</li>\n<li>View source</li>\n<li>Find form</li>\n<li>Note an identifier for the form</li>\n<li>Decide which fields you want to manipulate</li>\n<li>Write some code</li>\n</ol>\n<p>The beautiful thing is, mechanize will automatically handle csrf fields and most other popular forms of preventing bots doing their dirty business all over a website.</p>\n<pre lang=\"python\">import mechanize\r\n\r\nbrowser.open('http://example.com/form/')\r\nbrowser.select_form(name='the_form')\r\nbrowser['field1'] = 'value'\r\nbrowser['field2'] = 'value'\r\nbrowser['field3'] = 'value'\r\nbrowser.submit()\r\n\r\n# use browser to click on stuff\r\n# or browser.response() to get the raw response</pre>\n<p>Now isn&#8217;t that much easier and cleaner?</p>\n<p>The cool thing about Mechanize is that it also lets you do a lot of browsing around. <em>browser.links</em> gives you all the links on a page, <em>browser.forms</em> all the forms and so on. You can even use <em>browser.follow_link</em> to naturally walk around the whole website like a user might.</p>\n<p>Which is very useful when you&#8217;re handling websites that either don&#8217;t want or don&#8217;t expect bots.</p>\n<h2>BeautifulSoup</h2>\n<p>Ok, now we can get to the data. But how do we get the data itself?</p>\n<p>Unfortunately this is the fiddly part of the process and there isn&#8217;t much you can do about that. Your best bet is using BeautifulSoup to at least make the process of handling poorly written HTML without a big fuss. It will even make sure everything is unicode. Win!</p>\n<p>At least <a href=\"http://www.crummy.com/software/BeautifulSoup/\" target=\"_blank\">BeautifulSoup</a> makes browsing <a class=\"zem_slink\" title=\"Document Object Model\" href=\"http://en.wikipedia.org/wiki/Document_Object_Model\" rel=\"wikipedia\" target=\"_blank\">DOM</a> a breeze:</p>\n<pre lang=\"python\">from bs4 import BeautifulSoup\r\n\r\nsoup = BeautifulSoup(browser.response().read())\r\n\r\nbody_tag = soup.body\r\nall_paragraphs = soup.find_all('p')\r\nlogo_img = soup.find('header').find('div', id=\"logo\").img\r\n\r\n# and so on depending on what you need</pre>\n<p>That&#8217;s it.</p>\n<p>The next time you have to scrape some data off a website I suggest using Mechanize and BeautifulSoup. That way you can worry about the fiddly bits, not the infrastructure.</p>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles</h6>\n<ul class=\"zemanta-article-ul zemanta-article-ul-image\" style=\"margin: 0; padding: 0; overflow: hidden;\">\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://stackoverflow.com/questions/11284643/python-high-memory-usage-with-beautifulsoup\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/noimg_95_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://stackoverflow.com/questions/11284643/python-high-memory-usage-with-beautifulsoup\" target=\"_blank\">Python high memory usage with BeautifulSoup</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://stackoverflow.com/questions/10867253/screen-scraping-images-ie-firefox-page-info-google-images\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/92286111_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://stackoverflow.com/questions/10867253/screen-scraping-images-ie-firefox-page-info-google-images\" target=\"_blank\">Screen scraping images (ie. Firefox Page Info / Google Images)</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://coffeeonthekeyboard.com/csrf-cross-site-request-forgeries-basic-security-part-3-747/\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/noimg_50_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://coffeeonthekeyboard.com/csrf-cross-site-request-forgeries-basic-security-part-3-747/\" target=\"_blank\">James Socol: CSRF: Cross-Site Request Forgeries &#8211; Basic Security Part 3</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://www.blog.pythonlibrary.org/2012/06/08/python-101-how-to-submit-a-web-form/\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/noimg_70_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://www.blog.pythonlibrary.org/2012/06/08/python-101-how-to-submit-a-web-form/\" target=\"_blank\">Python 101: How to submit a web form</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://searchenginewatch.com/article/2197592/Extreme-Negative-SEO-Know-Your-Vulnerabilities\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/105660603_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://searchenginewatch.com/article/2197592/Extreme-Negative-SEO-Know-Your-Vulnerabilities\" target=\"_blank\">Extreme Negative SEO: Know Your Vulnerabilities</a></li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/?px\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=85cda396-14a6-4cc1-bbb8-12673fd5c287\" alt=\"Enhanced by Zemanta\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"322692bd-fd16-56a5-b685-04388245114c"}}