{"data":{"wordpressPost":{"title":"Intern process part 2 â€“ (my first) webinar, about React context","content":"<p><iframe width=\"580\" height=\"326\" src=\"https://www.youtube.com/embed/zCYuhqW2Qeo?feature=oembed\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe></p>\n<p>My first webinar! How I hate the word, but that&#8217;s what it was.</p>\n<p>The plan was to get a bunch of <a href=\"https://swizec.com/blog/tech-intern-job/swizec/8454\">prospective tech interns</a> together on a stream, teach them a React concept, and give them something to build. Sunday night, I&#8217;m seeing what they build and figuring out who I want to work with.</p>\n<p>The goal?</p>\n<p>To judge people&#8217;s <a href=\"http://qr.ae/TUphry\">slope vs. y-intercept</a>. Are they fast learners, or do they just know a lot? I want to hire someone who learns fast, not someone who&#8217;s already a pro. That way I&#8217;m working with a future pro and helping them get there.</p>\n<p>Imagine <code>y</code> is your skill and <code>x</code> is time. Slope always beats out y-intercept in the long run.</p>\n<blockquote class=\"twitter-tweet\" data-width=\"550\" data-dnt=\"true\">\n<p lang=\"en\" dir=\"ltr\">a little bit of slope makes up for a lot of y-intercept <a href=\"https://t.co/ZiJc29jyOA\">pic.twitter.com/ZiJc29jyOA</a></p>\n<p>&mdash; Swizec (@Swizec) <a href=\"https://twitter.com/Swizec/status/1007281218570711040?ref_src=twsrc%5Etfw\">June 14, 2018</a></p></blockquote>\n<p><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n<h2>What interns learned</h2>\n<p>We learned about the new React context API and built a <a href=\"https://swizec.github.io/react-context-example/\">silly little app</a> that shows off two benefits of context:<br />\n1. Shared state between components<br />\n2. No prop drilling</p>\n<a href=\"https://swizec.github.io/react-context-example/\"><img src=\"https://swizec.com/blog/wp-content/uploads/2018/06/context-app.gif\" alt=\"\" class=\"alignnone size-full wp-image-8460\" /></a>\n<p><a href=\"https://github.com/Swizec/react-context-example\">Hereâ€™s the source on GitHub.</a></p>\n<p>We used <code>React.createContext()</code> to create a context:</p>\n<pre lang=\"javascript\">\nconst LockContext = React.createContext()\n```\n\nAnd a top level component to hold the state and callback we wanted to share. It&#039;s like a Redux or MobX store, you want your state and your callbacks to travel together.\n\n```javascript\nclass ContextualThing extends React.Component {\n    state = {\n        locked: false\n    };\n\n    toggleLock = () =>\n        this.setState({\n            locked: !this.state.locked\n        });\n\n    render() {\n        const { locked } = this.state;\n\n        return (\n            <div>\n                 This is a lock \n                <p style={{ fontSize: \"2em\" }}>\n                    {locked ? <b>Locked!</b> : \"Open\"}\n                </p>\n                <LockContext.Provider\n                    value={{ locked, toggleLock: this.toggleLock }}\n                >\n                    <Table>\n                        {[1, 2, 3, 2, 1].map(n => <ToggleRow n={n} />)}\n                    </Table>\n                </LockContext.Provider>\n            </div>\n        );\n    }\n}\n</pre>\n<p>When state and callbacks go hand in hand, they&#8217;re easier to manage. Helps you think in state machines.</p>\n<p>But I forgot to mention the state machine part in the webinar ðŸ˜…</p>\n<p>Each <code>ToggleRow</code> renders as many table cells as you ask it to:</p>\n<pre lang=\"javascript\">\nconst ToggleRow = ({ n }) => (\n    <Row>\n        {new Array(n).fill(0).map(_ => (\n            <Cell>\n                <LockToggle />\n            </Cell>\n        ))}\n    </Row>\n);\n</pre>\n<p>Notice the lack of prop drilling. <code>&lt;ToggleRow&gt;</code> gets only a number, <code>n</code>. Nothing about callbacks or the locked state. It doesn&#8217;t even pass any props into <code>&lt;LockToggle&gt;</code>.</p>\n<p>That&#8217;s because <code>LockToggle</code> is a smart context component ðŸ‘‡</p>\n<pre lang=\"javascript\">\nconst LockToggle = () => (\n    <LockContext.Consumer>\n        {({ locked, toggleLock }) => (\n            <button onClick={toggleLock} style={{ fontSize: \"1.5em\" }}>\n                {locked ? \"Unlock\" : \"Lock\"}\n            </button>\n        )}\n    </LockContext.Consumer>\n);\n</pre>\n<p>LockToggle renders a context consumer, which takes a function as children render prop. This render prop gets the necessary <code>locked</code> state and <code>toggleLock</code> callback in its arguments and returns a button that flips the lock.</p>\n<p>Et voilÃ : shared lock/toggle between components without prop drilling.</p>\n<img src=\"https://media.giphy.com/media/krhB8ydCQiYZq/giphy.gif\" alt=\"\" />\n<p>I also answered a lot of questions about when you should use context versus Redux or MobX. Watch the stream ðŸ˜‰</p>\n<h2>What Swiz learned</h2>\n<p>Here&#8217;s what I got out of the experience in a nutshell<br />\n1. Waiting for people to show up is nerve wracking<br />\n2. Lightly advertise in advance and people <em>will</em> show up<br />\n3. Start the stream on time. no need to be there the first 10 minutes<br />\n4. You can wing it if you know your shit<br />\n5. Good way to practice conference talks, I think<br />\n6. Maybe have some slides<br />\n7. Drawing ideas out on paper while explaining them is a great interactive way to produce slides in real time<br />\n8. The delay between what you say and what people hear is massive<br />\n9. Giving the audience time to ask questions is nerve wracking</p>\n<h2>What&#8217;s next</h2>\n<p>More webinars I think. Great way to develop new content and a low friction approach to video production. That gives me ideas. ðŸ¤”</p>\n<p>Plus, answering questions from the audience is a great way to see what you forgot to cover. That&#8217;s slope right there!</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"dcf89a81-8495-55fe-b387-14461ed93b26"}}