{"data":{"wordpressPost":{"title":"Livecoding #15: Reaching the limits of canvas redraw speed","content":"<p><em>This is a Livecoding Recap – an almost-weekly post about interesting things discovered while livecoding. Shorter than 500 words. With pictures. You can follow my channel, <a href=\"https://livecoding.tv/swizec\">here</a>. New content almost <strong>every Sunday at 2pm PDT</strong>. There’s live chat ?</em></p>\n<p><iframe src=\"https://www.livecoding.tv/swizec/videos/MqkmK/embed\" width=\"560\" height=\"315\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"allowfullscreen\"></iframe></p>\n<p>Halp, I need an expert! It looks like we pushed the particle generator to the limits of canvas performance. But that can’t be right, can it? Surely I’m still doing something wrong.</p>\n<figure><img src=\"http://i.imgur.com/1hECepL.gif\" alt=\"Pure canvas frame redraw speed\" /><figcaption>Pure canvas frame redraw speed</figcaption></figure>\n<p>We removed everything that could possibly slow us down. There’s no more React or Konva for the main drawing part. All that’s left are the raw HTML5 canvas APIs. Despite our best efforts, it still takes almost 50 milliseconds to draw 10,000 circles.</p>\n<p>A huge improvement from <a href=\"http://swizec.com/blog/livecoding-14-mostly-smooth-animation-up-to-4000-elements-with-react-and-canvas/swizec/6864\">last time</a>, yes. But it’s not good enough. With a drawing time of 50ms per frame, the upper bound on my laptop is about 20 frames per second. Animated, but choppy.</p>\n<p>And there’s some 5ms of React and Redux overhead on top of that. Down to 18 frames per second.</p>\n<p>Ugh!</p>\n<p>The drawing code couldn’t be simpler:</p>\n<pre lang=\"javascript\">\r\ndrawParticle(particle) {\r\n    let { x, y } = particle;\r\n\r\n    this.context.beginPath();\r\n    this.context.arc(x, y, 1, 0, 2*Math.PI, false);\r\n    this.context.stroke();\r\n}\r\n\r\ncomponentDidUpdate() {\r\n    let particles = this.props.particles;\r\n\r\n    console.time('drawing');\r\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n    this.context.lineWidth = 1;\r\n    this.context.strokeStyle = 'black';\r\n\r\n    for (let i = 0; i &lt; particles.length; i++) {\r\n        this.drawParticle(particles[i]);\r\n    }\r\n    console.timeEnd('drawing');\r\n}\r\n</pre>\n<p>Even profiling confirms that drawing has become the slow part:</p>\n<figure><img src=\"http://i.imgur.com/gNnlJjf.gif\" alt=\"Profiling shows canvas operations are the bottleneck\" /></figure>\n<p>Profiling shows canvas operations are the bottleneck</p>\n<p>I am at a loss. What else is there to try? There’s no lower layer of abstraction to drop to. Canvas is the bottom. It’s the last in the chain.</p>\n<p>Well … there’s always manual bitmaps and those base64-encoded strings for images. If you knew how to manipulate those directly, you could trick the browser … no, that’s a silly idea. We’re not doing that. That’s crazy talk.</p>\n<p>A friend suggested drawing a single circle in an off-screen canvas, then using <code>drawImage</code> to copy-paste it around. But we tried that with Konva, and it didn’t quite work. Maybe it was a Konva problem, and it’s going to work better if we do it ourselves.</p>\n<p>I dunno. It <em>does</em> look like <code>stroke</code> and <code>arc</code> are the biggest bottlenecks in <code>drawCircle</code>. Sprites might help.</p>\n<p>Oh, another optimization that we made was to give Konva more context about what’s going on. Disable most transformations with <code>transformsEnabled = 'position'</code> on all shapes, and set <code>listening = false</code>. That way it knows not to try scale/rotation transformations, and not to listen for events.</p>\n<p>It helped a bit, but not as much as going to the bare metal for the key drawing part.</p>\n<p>Next time, we’ll try the <code>drawImage</code> approach, and if that doesn’t work, we’re going to start exploring WebGL. If that can’t do it, nothing can.</p>\n<p>Are you a canvas expert? Please help. What am I doing wrong?</p>\n<p><iframe src=\"http://swizec.github.io/react-particles-experiment/\" width=\"100%\" height=\"400\"></iframe></p>\n<p><a href=\"http://swizec.github.io/react-particles-experiment/\">Try the particle generator</a>.</p>\n<p>PS: the edited and improved versions of these videos are becoming a video course. Readers of the engineer package of <a href=\"http://swizec.com/reactd3js/\">React+d3js ES6</a> get the video course for free when it’s ready.</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"6998b97d-6e05-5e09-b39b-c74e99c89be0"}}