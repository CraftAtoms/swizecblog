{"data":{"wordpressPost":{"title":"Livecoding #29: Optimizing React choropleth map rendering","content":"<p><em>This is a Livecoding Recap – an almost-weekly post about interesting things discovered while livecoding ?. Always under 500 words and with pictures. You can follow my channel <a href=\"https://livecoding.tv/swizec\">here</a>. New streams almost every Sunday at 2pm PDT. There’s live chat, come say hai ?</em></p>\n<p><iframe src=\"https://www.livecoding.tv/swizec/videos/evdGJ/embed\" width=\"560\" height=\"315\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"allowfullscreen\"></iframe></p>\n<p>Yesterday was supposed to be all about cutting up a large-ish codebase into small chunks that are easier to explain step-by-step. I was a great plan, but it didn&#8217;t <em>quite</em> happen.</p>\n<p>Instead of doing that, I went down the rabbit hole of optimizing the choropleth map from <a href=\"https://swizec.com/blog/livecoding-24-choropleth-react-js/swizec/7078\">Livecoding 24</a>. Turns out my H1B visualization wasn&#8217;t slow because the dataset was big. It was slow because the map re-renders 3,220 county polygons on every update. ?</p>\n<p>Let me explain.</p>\n<p>We started with this:</p>\n<img class=\"alignnone size-full wp-image-7304\" src=\"http://swizec.com/blog/wp-content/uploads/2016/12/unoptimized-rendering.gif\" alt=\"unoptimized-rendering\" />\n<p>See how it takes 2 or 3 seconds to react when you click a button? That&#8217;s bad.</p>\n<p>And we finished with this:</p>\n<img class=\"alignnone size-full wp-image-7303\" src=\"http://swizec.com/blog/wp-content/uploads/2016/12/optimized-rendering.gif\" alt=\"optimized-rendering\" />\n<p>Takes just a second. Still slow, but <em>a lot</em> better. The dataset to crunch is big after all. ?</p>\n<p>Unfortunately, the paint flashing isn&#8217;t useful to show you what&#8217;s fixed. Looks like a parent component repaints and flashes everything. This is unfortunate and a potential clue for further improvements.</p>\n<p>To make this 50% to 66% speed improvement, we did two things:</p>\n<ol>\n<li>Added <code>shouldComponentUpdate</code> to the <code>County</code> component</li>\n<li>Avoided doing <code>_.find</code> to find data on every polygon draw</li>\n</ol>\n<p>I don&#8217;t know which improvement had a bigger effect, but when you <code>_.find</code> in a N=290 array 3220 times, that&#8217;s 933,800 function calls that you&#8217;re making. Oops.</p>\n<p>We fixed that by building a map beforehand. Like this:</p>\n<pre lang=\"javascript\">const countyValueMap = _.fromPairs(\n    this.props.values.map(d =&gt; [d.countyID, d.value]));\n</pre>\n<p>Then rendering <code>County</code> components in a loop, like this:</p>\n<pre lang=\"javascript\">{counties.map((feature) =&gt; (\n    \n))}\n</pre>\n<p>That <code>value</code> prop used to be <code>_.find(counties, {countyID: feature.id})</code> and that was dumb.</p>\n<p>Lesson learned. Big-O matters even when you&#8217;re just doing JavaScript.</p>\n<p>Inside <code>County</code>, we added <code>shouldComponentUpdate</code>. I don&#8217;t know <em>why</em> React wasn&#8217;t able to optimize this for us, but it wasn&#8217;t. Maybe because we were passing props in as functions? Probably.</p>\n<p>The new <code>County</code> component looks like this:</p>\n<pre lang=\"javascript\">class County extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        const { zoom, value } = this.props;\n\n        return zoom !== nextProps.zoom\n            || value !== nextProps.value;\n    }\n\n        render() {\n            // body from previous functional stateless version\n        }\n}\n</pre>\n<p>We know for a fact that a county polygon only has to re-render when the map&#8217;s zoom level changes or the value we&#8217;re displaying changes. That enables the map to change size and the value to change polygon colors.</p>\n<p>Excellent. Many lessons learned.</p>\n<p>You can see the code for <a href=\"https://github.com/Swizec/h1b-software-salaries/tree/create-react-app/src/components/CountyMap\">React + D3 choropleth maps on Github</a>. It&#8217;s embedded in a larger project, so there&#8217;s some context-specific stuff, but the component itself is made to be pretty general.</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"2c6d5a6f-f3b5-510d-abdd-ff1bb76d9501"}}