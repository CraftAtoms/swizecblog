{"data":{"wordpressPost":{"title":"Advent of Code Days 17 &#038; 18 â€“ Spinlocks and Interpreters","content":"<p><iframe width=\"580\" height=\"326\" src=\"https://www.youtube.com/embed/3Eee0va5t0A?feature=oembed\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen></iframe></p>\n<p>Days 17 and 18 both defeated me. Star 1 was easy, Star 2 was not. Both were pretty quick to solve for the first star, though, so let&#8217;s look at that.</p>\n<h2>Day 17 â€“ Spinlock</h2>\n<p>For Advent of Code Day 17, we had to implement a <a href=\"https://en.wikipedia.org/wiki/Spinlock\">spinlock</a>. Spinlocks are a way to implement busy waiting ðŸ‘‡</p>\n<blockquote><p>\nIn software engineering, a spinlock is a lock which causes a thread trying to acquire it to simply wait in a loop (&#8220;spin&#8221;) while repeatedly checking if the lock is available. Since the thread remains active but is not performing a useful task, the use of such a lock is a kind of busy waiting.\n</p></blockquote>\n<div id=\"attachment_7975\" style=\"width: 1538px\" class=\"wp-caption alignnone\"><img class=\"alignnone size-full wp-image-7975\" src=\"https://swizec.com/blog/wp-content/uploads/2017/12/carbon-spinlock.png\" alt=\"A naive spinlock implementation in Haskell\" width=\"1528\" height=\"512\" srcset=\"https://swizec.com/blog/wp-content/uploads/2017/12/carbon-spinlock.png 1528w, https://swizec.com/blog/wp-content/uploads/2017/12/carbon-spinlock-300x101.png 300w, https://swizec.com/blog/wp-content/uploads/2017/12/carbon-spinlock-768x257.png 768w, https://swizec.com/blog/wp-content/uploads/2017/12/carbon-spinlock-1024x343.png 1024w\" sizes=\"(max-width: 1528px) 100vw, 1528px\" /><p class=\"wp-caption-text\">A naive spinlock implementation in Haskell</p></div>\n<p>There&#8217;s no video for Day 17 because I was doing it in bed and yes, I did fall asleep while waiting for Star 2 to finish computing. It never did; my algorithm was too slow.</p>\n<p>Unlike a real spinlock, the puzzle spinlock is trying to eat up infinite memory as well as infinite time.</p>\n<blockquote><p>\nFor example, if the spinlock were to step 3 times per insert, the circular buffer would begin to evolve like this (using parentheses to mark the current position after each iteration of the algorithm):\n</p></blockquote>\n<blockquote><p>\n(0), the initial state before any insertions.</p>\n<p>0 (1): the spinlock steps forward three times (0, 0, 0), and then inserts the first value, 1, after it. 1 becomes the current position.</p>\n<p>0 (2) 1: the spinlock steps forward three times (0, 1, 0), and then inserts the second value, 2, after it. 2 becomes the current position.</p>\n<p>0  2 (3) 1: the spinlock steps forward three times (1, 0, 2), and then inserts the third value, 3, after it. 3 becomes the current position.\n</p></blockquote>\n<p>The question was <em>&#8220;What is the value right after 2017 gets inserted into the buffer?&#8221;</em>.</p>\n<p>To find out, I built a recursive implementation of the spinlock algorithm above in Haskell. Because Haskell is fun.</p>\n<pre lang=\"haskell\">\nspinlock::[Int] -> Int -> Int -> Int -> Int -> (Int, [Int])\nspinlock buffer steps pos i iterations\n    | i < iterations = spinlock (left ++ [i] ++ right) steps nextPos (i+1) iterations\n    | otherwise = (nextPos, buffer)\n    where spinPos = mod (pos+steps) (length buffer)\n          (left, right) = splitAt (spinPos+1) buffer\n          nextPos = spinPos+1\n</pre>\n<p>The <code>spinlock</code> method takes 5 arguments, which I'm sure is sacrilege in Haskell, and returns a tuple: An integer and a list of integers.</p>\n<p>Arguments look like this:</p>\n<ul>\n<li><code>buffer</code> is the current state of our circular buffer</li>\n<li><code>steps</code> tells us how many steps we do on each spin</li>\n<li><code>pos</code> gives us the current position in our buffer</li>\n<li><code>i</code> says how many times we've iterated</li>\n<li><code>iterations</code> tells us how many times to iterate in total</li>\n</ul>\n<p>The algorithm itself was simple to implement, but fraught with <a href=\"https://en.wikipedia.org/wiki/Off-by-one_error\">off-by-one errors</a>.</p>\n<p>If we have to keep going â€“&nbsp;<code>i &lt; iterations</code> â€“&nbsp;then recurse with an edited buffer, updated position and <code>i+1</code>. Otherwise, return the result. A tuple with the next position and final buffer.</p>\n<p>We get the position after spinning, <code>spinPos</code>, as a remainder between current position <code>pos</code> and <code>steps</code>, and the buffer length. Split the buffer into <code>left</code> and <code>right</code> at position after the spin, and say the next position is going to be there too.</p>\n<p>This worked great for the <code>2017</code> iterations from Star 1.</p>\n<pre lang=\"haskell\">\nstar1::Int -> Int\nstar1 steps = buffer!!pos\n    where (pos, buffer) = spinlock [0] steps 0 1 2017\n</pre>\n<p>A little slow maybe, but it worked.</p>\n<p>For Star 2, they wanted us to find the value after <code>0</code> when 50,000,000 iterations are performed. This did not go so well.</p>\n<pre lang=\"haskell\">\nstar2::Int -> Int\nstar2 steps = buffer!!(zeroAt+1)\n    where (pos, buffer) = spinlock [0] steps 0 1 50000000\n          zeroAt = Data.Maybe.fromJust $ elemIndex 0 buffer \n</pre>\n<p>The idea is simple: Iterate 50 million times, look for the <code>0</code>, return the value after it.</p>\n<p>But the spinlock never finishes. Haskell's <a href=\"https://en.wikipedia.org/wiki/Lazy_evaluation\">lazy evaluation</a> gets in the way, and I couldn't figure out how to make it stop.</p>\n<p>With lazy evaluation, we keep all iterations of the spinlock in memory until we print the final result. That's a problem.</p>\n<p><em>shrug</em></p>\n<h2>Day 18 â€“&nbsp;A programming language interpreter</h2>\n<div id=\"attachment_7976\" style=\"width: 1366px\" class=\"wp-caption alignnone\"><img class=\"alignnone size-full wp-image-7976\" src=\"https://swizec.com/blog/wp-content/uploads/2017/12/carbon-interpreter.png\" alt=\"The gist of a simple interpreter built in JavaScript\" width=\"1356\" height=\"920\" srcset=\"https://swizec.com/blog/wp-content/uploads/2017/12/carbon-interpreter.png 1356w, https://swizec.com/blog/wp-content/uploads/2017/12/carbon-interpreter-300x204.png 300w, https://swizec.com/blog/wp-content/uploads/2017/12/carbon-interpreter-768x521.png 768w, https://swizec.com/blog/wp-content/uploads/2017/12/carbon-interpreter-1024x695.png 1024w\" sizes=\"(max-width: 1356px) 100vw, 1356px\" /><p class=\"wp-caption-text\">The gist of a simple interpreter built in JavaScript</p></div>\n<p>On Day 18 of our Advent of Code, we had to build an interpreter for a simple programming language. There are 7 commands that take 1 or 2 arguments. Arguments can be registers or values.</p>\n<blockquote><p>\n<code>snd X</code> plays a sound with a frequency equal to the value of X.</p>\n<p><code>set X Y</code> sets register X to the value of Y.</p>\n<p><code>add X Y</code> increases register X by the value of Y.</p>\n<p><code>mul X Y</code> sets register X to the result of multiplying the value contained in register X by the value of Y.</p>\n<p><code>mod X Y</code> sets register X to the remainder of dividing the value contained in register X by the value of Y (that is, it sets X to the result of X modulo Y).</p>\n<p><code>rcv X</code> recovers the frequency of the last sound played, but only when the value of X is not zero. (If it is zero, the command does nothing.)</p>\n<p><code>jgz X Y</code> jumps with an offset of the value of Y, but only if the value of X is greater than zero. (An offset of 2 skips the next instruction, an offset of -1 jumps to the previous instruction, and so on.)\n</p></blockquote>\n<p>Our goal is to find the first non-zero value that <code>rcv</code> finds.</p>\n<p>I built this one in JavaScript because why not. ðŸ˜‡</p>\n<p>We start with a bunch of <code>registers</code>, which are a JavaScript <code>Map</code>.</p>\n<pre lang=\"javascript\">\nfunction initRegisters() {\n    const registers = new Map(\n        \"abcdefghijklmnopqrstuvwxyz\".split(\"\").map(l => [l, 0])\n    );\n    registers.set(\"sound\", null);\n    registers.set(\"pointer\", 0);\n\n    return registers;\n}\n</pre>\n<p>This creates a register for each letter of the alphabet plus a <code>sound</code> register and a <code>pointer</code>. <code>sound</code> will be where <code>snd</code> puts its values and <code>rcv</code> reads them from, <code>pointer</code> is going to point to the current line of code we're executing.</p>\n<p>The interpreter itself comes as just 39 lines of code. It's a simple language after all. Although I do think it's got enough instructions to be <a href=\"https://en.wikipedia.org/wiki/Turing_completeness\">Turing-complete</a>, but it lacks the memory. 25 registers won't cut it for Turing completeness.</p>\n<p>You could, of course, expand it to have infinite registers ðŸ¤”</p>\n<p>Anyway, the interpreter ðŸ‘‡</p>\n<pre lang=\"javascript\">\nfunction execute(registers, command) {\n    const [com, val1, val2] = command.trim().split(\" \");\n\n    function getVal(val) {\n        if (registers.has(val)) {\n            return registers.get(val);\n        } else {\n            return Number(val);\n        }\n    }\n\n    let jumped = false,\n        kill = false;\n\n    const commands = {\n        snd: a => registers.set(\"sound\", getVal(a)),\n        set: (a, b) => registers.set(a, getVal(b)),\n        add: (a, b) => registers.set(a, getVal(a) + getVal(b)),\n        mul: (a, b) => registers.set(a, getVal(a) * getVal(b)),\n        mod: (a, b) => registers.set(a, getVal(a) % getVal(b)),\n        rcv: a => (\n            console.log(\"SOUND:\", getVal(\"sound\")),\n            (kill = true),\n            registers.set(a, getVal(\"sound\"))\n        ),\n        jgz: (a, b) =>\n            getVal(a) > 0\n                ? ((jumped = true),\n                  registers.set(\"pointer\", getVal(\"pointer\") + getVal(b)))\n                : null\n    };\n\n    commands[com](val1, val2);\n\n    if (!jumped) {\n        registers.set(\"pointer\", getVal(\"pointer\") + 1);\n    }\n\n    return [kill, registers];\n}\n</pre>\n<p>We split the line of code into a <code>command</code> and two values, <code>val1</code> and <code>val2</code>.</p>\n<p>Then we define a function for reading values, <code>getVal</code>. If the value given is a known register, we read from it; otherwise, we return the value itself.</p>\n<p>After that, we need two flags: <code>jump</code> tells us if we executed a jump command, and <code>kill</code> tells us if we have to stop executing.</p>\n<p>A dictionary mapping all possible commands to a function that executes them helps us run the commands. Each function manipulates the <code>registers</code> and potentially flips the <code>jump</code> and <code>kill</code> flags.</p>\n<p>When the current line of code is executed, we advance our <code>pointer</code> by <code>+1</code> if we didn't jump. The interpreter returns the <code>kill</code> flag and the new <code>registers</code>.</p>\n<p>The registers are actually changed in place, and there's no need to return, but I think this approach makes our implementation clearer.</p>\n<p>With the interpreter in hand, we then have to add some looping to find the answer to AoC 18 Star 1.</p>\n<pre lang=\"javascript\">\nfunction star1() {\n    let registers = initRegisters(),\n        kill = false;\n    const program = input.split(\"\\n\").filter(command => command.length > 0);\n\n    // find sound value at first non-zero rcv\n    while (\n        registers.get(\"pointer\") >= 0 &&\n        registers.get(\"pointer\") < program.length &#038;&#038;\n        !kill\n    ) {\n        [kill, registers] = execute(\n            registers,\n            program[registers.get(\"pointer\")]\n        );\n    }\n}\n</pre>\n<p>Create registers, split program into lines, <code>execute</code> until a <code>while</code> condition is met. Either we jumped out of the program, or a line set the <code>kill</code> flag.</p>\n<p>Works like a charm ðŸ‘Œ</p>\n<p><strong>Star 2</strong> is where it gets tricky. Those <code>snd</code> and <code>rcv</code> commands weren't actually about sound; they were <code>send</code> and <code>receive</code> commands, and you're meant to run two copies of this code in parallel.</p>\n<p>They communicate with <code>snd</code> and <code>rcv</code>.</p>\n<p>We have to expand our <code>sound</code> register into a message queue and add some logic for how it's shared between the two programs. Additionally, the puzzle wants us to pause execution of each program while it waits for the queue to get values.</p>\n<img src=\"https://media.giphy.com/media/3oEdvc4JCV2HJa7UQ0/giphy.gif\" />\n<p>Sounds hard. So I went to bed.</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"02999961-13ac-5a62-8188-29b583f99a64"}}