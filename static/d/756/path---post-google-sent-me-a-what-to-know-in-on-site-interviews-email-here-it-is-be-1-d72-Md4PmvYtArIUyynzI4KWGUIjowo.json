{"data":{"wordpressPost":{"title":"Google sent me a &#8220;what to know in on-site interviews&#8221; email. Here it is.","content":"<p>After two phone interviews Google asked me to visit London and have a whole day of chatting about technology and solving intricate coding puzzles. Just to see how good I am on a scale of 1 to Google.</p>\n<div style=\"width: 290px\" class=\"wp-caption alignright\"><a href=\"http://commons.wikipedia.org/wiki/File:Sorting_quicksort_anim.gif\" target=\"_blank\"><img class=\"zemanta-img-inserted zemanta-img-configured\" title=\"An animation of the quicksort algorithm sortin...\" src=\"http://upload.wikimedia.org/wikipedia/commons/6/6a/Sorting_quicksort_anim.gif\" alt=\"An animation of the quicksort algorithm sortin...\" width=\"280\" height=\"214\" /></a><p class=\"wp-caption-text\">An animation of the quicksort algorithm sorting an array of randomized values. (Photo credit: Wikipedia)</p></div>\n<p>They aldo sent me an email with advice. It can be summed up as <em>&#8220;You should know everything. If it&#8217;s to do with computers, you should know it. Here are 5 books and 4 fancy algorithms you should read. You must also be intimately familiar with all these basic-ish algorithms. This is your two week notice. Good luck. Oh and take a look at these videos too!&#8221;</em></p>\n<p>Technical interviews have always been fun for me, I just love talking shop with anyone who would listen and how often do you get the chance to talk shop with some of the [provenly] best engineers out there?</p>\n<p>Somehow, instead of being super solid advice, the email did nothing but cement my idea that it&#8217;s impossible to study up on all this and I should just hope I&#8217;ve got what it takes anyway.</p>\n<p>Here&#8217;s the email, copied verbatim.</p>\n<p><strong>Guide to getting an engineering job with Google</strong></p>\n<p>Software engineers work in small, rapid teams, each handling the full development cycle without need for hierarchy; product design, system architecture, coding, testing &amp; product launching at global scale. They don&#8217;t tend to make prototypes; but rather work in realtime, with live feedback from real people across the globe. Engineers don&#8217;t always get it right first time, but iterate fast in an agile, unit test environment.</p>\n<p>Google takes an academic approach to the interviewing process.  This means that we’re interested in your thought process, your approach to problem solving as well as your coding abilities.</p>\n<p><strong>Technical Interviews</strong></p>\n<p>You can expect questions that evaluate your skills in three primary areas:</p>\n<p>1. Coding</p>\n<ul>\n<li>Fluency in at least one programming language is prerequisite, preferably be an object-oriented language, ideally C++ or Java (C# is OK, although engineers don&#8217;t use it and Python can be useful).</li>\n<li>You should be able to produce fully compilable code in your chosen language, to justify why it&#8217;s your preferred language and be fully up-to-date with its latest editions.</li>\n<li>Sample topics: construct / traverse data structures, implement system routines, distill large data sets to single values, transform one data set to another.</li>\n<li>Google engineers don&#8217;t tend to need pre-coded solutions or architectures (so would not utilise MFC, .NET or J2EE).</li>\n<li>Engineers develop in a globally open, unit test environment, so you should be familiar with this methodology and able to write your own tests.</li>\n<li>Coding styleguides can be found <a href=\"http://code.google.com/p/google-styleguide/\" target=\"_blank\">here</a>.</li>\n</ul>\n<p>2. Algorithms</p>\n<ul>\n<li>You need to know <a href=\"http://en.wikipedia.org/wiki/Big_O_notation\" target=\"_blank\">Big-O</a> complexity analysis really well → it’s OK to quickly come up with a brute force solution, but that’s never going to be the answer → always look for an O(n*logn) solution or ideally a linear one.</li>\n<li>Searching and sorting algorithms (Quicksort, Mergesort, etc) → know more than one O(n*logn) sorting algorithm → know how they work and how to optimise for time and space.</li>\n<li>Hash tables → be able to implement one using only arrays.</li>\n<li>Trees → know tree construction, traversal, and manipulation algorithms. Familiarise yourself with binary trees, n-ary trees and trie-trees, and at least one type of balanced binary tree.</li>\n<li>Know the classic computer science problems (Shortest Path, Traveling Salesman, Knapsack, etc).</li>\n</ul>\n<p>3. System design</p>\n<ul>\n<li>You need to know powers of 2, and be good at back-of-the-envelope calculations e.g. to estimate the required number of machines for a given design.</li>\n<li>Know Google’s products, and think about how you would design the back-end (or front-end).</li>\n<li>System design questions are a test of your problem solving skills. Ask qualifying questions → make sure you explain your thought process → explain and justify your assumptions → think of the bigger picture and don’t get bogged down in the detail.</li>\n<li>Sample topics: features sets, interfaces, class hierarchies, designing a system under certain constraints, simplicity and robustness, tradeoffs.</li>\n<li>Checkout <a href=\"http://code.google.com/edu/parallel/dsd-tutorial.html\" target=\"_blank\">this link</a> for basic systems design as used at Google.</li>\n</ul>\n<p><strong>Interview Hints</strong></p>\n<ul>\n<li>Talk through your thought processes. Our engineers are evaluating not only your technical abilities but how you approach &amp; solve problems.</li>\n<li>Ask clarifying questions if you do not understand the problem or need more information. Many of the questions asked in Google interviews are deliberately underspecified because our engineers are looking to see how you engage the problem. In particular, they are looking to see which areas leap to your mind as the most important piece of the technological puzzle you&#8217;ve been presented.</li>\n<li>Think about ways to improve the solution you&#8217;ll present. In many cases, the first answer that springs to mind isn&#8217;t the most elegant solution &amp; may need some refining. It&#8217;s definitely worthwhile to talk about your initial thoughts to a question, but jumping immediately into presenting a brute force solution will be received less well than taking time to compose a more efficient solution.</li>\n<li>Show an interest in Google products. What is your favourite product, and how would you improve it?</li>\n</ul>\n<p><strong>Videos</strong><br />\n&#8211; <a href=\"http://www.youtube.com/watch?v=w887NIa_V9w\" target=\"_blank\">Interviewing at Google</a> &#8211; <a href=\"https://www.youtube.com/watch?v=aOZhbOhEunY&amp;feature=player_embedded\" target=\"_blank\">An inside look at Google</a><br />\n&#8211; <a href=\"http://www.youtube.com/user/Google?blend=1&amp;ob=4\" target=\"_blank\">Google Youtube Channel</a><br />\n&#8211; <a href=\"http://www.youtube.com/watch?v=qsan-GQaeyk\" target=\"_blank\">Underneath the covers at Google</a><br />\n&#8211; <a href=\"http://www.youtube.com/results?search_query=%22Google+i%2Fo%22+2011&amp;aq=f\" target=\"_blank\">Google i/O 2011</a></p>\n<p><strong>Recommended books</strong></p>\n<ul>\n<li>Programming Pearls, 2nd Edition &#8211; Jon Bentley</li>\n<li>Introduction to Algorithms, 2nd Edition &#8211; Cormen, Leiserson, Rivest, Stein</li>\n<li>Programming Interviews Exposed: Secrets to Landing your next job, 2nd Edition &#8211; Mongan, Suojanen, Giguere</li>\n<li>Effective C++ &#8211; Scott Myers</li>\n<li>How Google Tests Software &#8211; James Whittaker</li>\n</ul>\n<p><strong>Background knowledge:</strong><br />\nBackground knowledge: The Google infrastructure Google has the world’s most formidable large-scale computing and storage infrastructure. Clusters of Linux-based machines with custom job and storage management systems allows us to build applications that access petabytes of data or process millions of requests a day. We can build such systems because, amongst other things, we have full control over the software stack.  Four of the key elements include:</p>\n<ul>\n<li><strong><a href=\"http://en.wikipedia.org/wiki/Google_File_System\" target=\"_blank\">GFS</a></strong> &#8211; the Google File System</li>\n<li><strong><a href=\"http://en.wikipedia.org/wiki/MapReduce\" target=\"_blank\">MapReduce</a></strong> &#8211; to crunch large data sets</li>\n<li><strong><a href=\"http://en.wikipedia.org/wiki/BigTable\" target=\"_blank\">BigTable</a></strong> &#8211; a distributed storage system</li>\n<li><strong><a href=\"http://research.google.com/archive/chubby.html\" target=\"_blank\">Chubby</a></strong> &#8211; a distributed lock service</li>\n</ul>\n<p><strong>I asked an experienced Google engineer how/why Google uses Big O notation and they gave me this information:</strong><br />\nGoogle-scale problems fall into two categories: those that span across machines, across very large amounts of data, and those that supply a large number of users with very quick access to data, such as search.</p>\n<p>When we design a solution for either sort of problem, we are deal with large numbers of items, for example a large number of web pages to search, or customer reports to aggregate up.  This means that any algorithm that is not at least as good as linear (O(n)) in time is likely to be too slow.  User-facing products such as search require even better: that means aiming for constant time operation (O(1)), no matter how large our index, we need to show results in a fixed amount of time.  Sometimes that means we scale the system up to cope with the number of Web pages we have to search.  Any example of where your understanding of performance profiling would be applicable is now that we have a constant-time solution, we need to minimise the overhead of just one user performing a search; it&#8217;s no good if one user&#8217;s query causes 100MB to be allocated on 1000 computers.</p>\n<p>Another example would be when we index the Web.  This means taking billions of Web pages, computing metrics on each of them to extract the search terms that might trigger them, and then putting them in a searchable index.  Adding each page means we might need to compare it with every other page to find the best result for a query, but in fact we can perform the index in linear time with respect to the whole internet by performing the entire computation in parallel.  What engineers have done is distilled the problem to an &#8217;embarrassingly parallel&#8217; one where as much computation as possible is done on each single page before the more expensive step of comparing it with other pages.  This reduces the overall time to index the Web to the extent where we can keep much of the internet searchable even if the page is only 15 minutes old.  Here, we have used algorithms and Big O analysis to both decrease latency and increase throughput; performance profiling plays a part but but only once a truly scalable solution has been found.</p>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles</h6>\n<ul class=\"zemanta-article-ul\">\n<li class=\"zemanta-article-ul-li\"><a href=\"http://searchenginewatch.com/article/2170391/New-Google-Search-Algorithm-Update-Targets-Web-Spam\" target=\"_blank\">New Google Search Algorithm Update Targets Web Spam</a> (searchenginewatch.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://www.electronista.com/articles/12/04/25/google.funds.user.review.algorithm.research/\" target=\"_blank\">Google helps create algorithm to target shill reviews</a> (electronista.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://www.aaronchua.com/2012/04/why-is-my-sites-not-ranking-after.html\" target=\"_blank\">Why is my sites not ranking after google algorithm changes on April 2012</a> (aaronchua.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://www.javacodegeeks.com/2012/03/my-problem-with-your-interviews.html\" target=\"_blank\">My Problem With Your Interviews</a> (javacodegeeks.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://blog.hudsonhorizons.com/Article/Pinterest-Algorithm-Must-See-Photo-Explains-All.htm\" target=\"_blank\">Pinterest Algorithm Mystery Explained: Must-See Photo</a> (hudsonhorizons.com)</li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=f2e30d39-c798-4903-9421-69b1874e49e5\" alt=\"Enhanced by Zemanta\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"1383827e-1a6d-5dd6-ade9-91f12d130b4a"}}