{"data":{"wordpressPost":{"title":"Dancing tree fractal with React","content":"<p>That damn <a href=\"https://swizec.com/blog/fractals-react/swizec/7233\">Pythagorean fractal</a> from last month wouldn&#39;t leave me alone, so I fixed it. Timing may or may not coincide with a commenter giving a solution to the wonky triangle problem.</p>\n<img src=\"http://swizec.com/blog/wp-content/uploads/2016/12/dancing-tree.gif\" alt=\"dancing-tree\" class=\"alignnone size-large wp-image-7291\" />\n<p><a href=\"https://github.com/Swizec/react-fractals\">Hereâ€™s the code on Github</a>. For the story and explanation, keep reading. ðŸ™‚</p>\n<p>It took <em>somebody doing the math instead of me</em> to kick my arse into gear. Here&#39;s Vinicius Ribeiro schooling me on high school trigonometry:</p>\n<blockquote><p>\nYou are not applying the Law of Sines correctly. The variable &#39;d&#39; is the diameter of the triangle&#39;s circumcircle, not its perimeter.</p>\n<p>Tinkering with your code on github, I&#39;ve managed to accomplish what you were trying to do by doing the following calculations:\n</p></blockquote>\n<pre lang=\"javascript\">\nconst currentH = 0.2 * w,\nnextLeft = Math.sqrt(currentH*currentH + (0.7*w*0.7*w)),\nnextRight = Math.sqrt(currentH*currentH + (0.3*w*0.3*w)),\nA = Math.deg(Math.atan(currentH / (0.3*w))),\nB = Math.deg(Math.atan(currentH / (0.7*w)));\n</pre>\n<blockquote><p>\nThe height of the inner triangle is a fraction of the current &#39;w&#39;. By doing that, we can infer nextLeft and nextRight using the Pythagorean theorem. The angles can then be calculated using the inverse tangent (atan) and the triangle height.</p>\n<p>Hope this helps!\n</p></blockquote>\n<p><strong>Help it did!</strong> Thanks, Vinicius.</p>\n<h2>How you too can build a dancing tree fractal</h2>\n<p>Equipped with basic trigonometry, you need 3 ingredients to build a dancing tree:</p>\n<ul>\n<li>a recursive <code>&lt;Pythagoras&gt;</code> component</li>\n<li>a mousemove listener</li>\n<li>a memoized next-step-props calculation function</li>\n</ul>\n<p>We&#39;ll use the <code>&lt;Pythagoras&gt;</code> component from November, add a D3 mouse listener, and put Vinicus&#39;s math with some tweaks into a memoized function. We need D3 because its mouse listeners automatically calculate mouse position relative to SVG coordinates, and <a href=\"https://en.wikipedia.org/wiki/Memoization\">memoization</a> helps us keep our code faster.</p>\n<p>The improved <code>&lt;Pythagoras&gt;</code> component takes a few more arguments than before, and it uses a function to calculate future props. Like this:</p>\n<pre lang=\"javascript\">\nconst Pythagoras = ({ w,x, y, heightFactor, lean, left, right, lvl, maxlvl }) => {\n    if (lvl >= maxlvl || w < 1) {\n        return null;\n    }\n\n    const { nextRight, nextLeft, A, B } = memoizedCalc({\n        w: w,\n        heightFactor: heightFactor,\n        lean: lean\n    });\n\n    let rotate = '';\n\n    if (left) {\n        rotate = `rotate(${-A} 0 ${w})`;\n    }else if (right) {\n        rotate = `rotate(${B} ${w} ${w})`;\n    }\n\n    return (\n        <g transform={`translate(${x} ${y}) ${rotate}`}>\n            <rect width={w} height={w}\n                  x={0} y={0}\n                  style={{fill: interpolateViridis(lvl/maxlvl)}} />\n\n            <Pythagoras w={nextLeft}\n                        x={0} y={-nextLeft}\n                        lvl={lvl+1} maxlvl={maxlvl}\n                        heightFactor={heightFactor}\n                        lean={lean}\n                        left />\n\n            <Pythagoras w={nextRight}\n                        x={w-nextRight} y={-nextRight}\n                        lvl={lvl+1} maxlvl={maxlvl}\n                        heightFactor={heightFactor}\n                        lean={lean}\n                        right />\n\n        </g>\n    );\n};\n</pre>\n<p>We break recursion whenever we try to draw an invisible square or have reached too deep into the tree. Then we:</p>\n<ul>\n<li>use <code>memoizedCalc</code> to do the mathematics</li>\n<li>define different <code>rotate()</code> transforms for the <code>left</code> and <code>right</code> branches</li>\n<li>and return an SVG <code>&lt;rect&gt;</code> for the current rectangle, and two <code>&lt;Pythagoras&gt;</code> elements for each branch.</li>\n</ul>\n<p>Most of this code deals with passing arguments onwards to children. Itâ€™s not the most elegant approach, but it works. The rest is about positioning branches so corners match up.</p>\n<img src=\"http://swizec.com/blog/wp-content/uploads/2016/12/corners-match-up.png\" alt=\"corners-match-up\" class=\"alignnone size-full wp-image-7290\" />\n<h2>The maths</h2>\n<p>I don&#39;t <em>really</em> understand this math, but I sort of know where it&#39;s coming from. It&#39;s the <a href=\"https://en.wikipedia.org/wiki/Law_of_sines\">sine law</a> applied correctly. You know, the part I failed at miserably last time ?</p>\n<pre lang=\"javascript\">\nconst memoizedCalc = function () {\n    const memo = {};\n\n    const key = ({ w, heightFactor, lean }) => [w,heightFactor, lean].join('-');\n\n    return (args) => {\n        const memoKey = key(args);\n\n        if (memo[memoKey]) {\n            return memo[memoKey];\n        }else{\n            const { w, heightFactor, lean } = args;\n\n            const trigH = heightFactor*w;\n\n            const result = {\n                nextRight: Math.sqrt(trigH**2 + (w * (.5+lean))**2),\n                nextLeft: Math.sqrt(trigH**2 + (w * (.5-lean))**2),\n                A: Math.deg(Math.atan(trigH / ((.5-lean) * w))),\n                B: Math.deg(Math.atan(trigH / ((.5+lean) * w)))\n            };\n\n            memo[memoKey] = result;\n            return result;\n        }\n    }\n}();\n</pre>\n<p>We added to Vinicius&#39;s maths a dynamic <code>heightFactor</code> and <code>lean</code> adjustment. We&#39;ll control those with mouse movement.</p>\n<p>To improve performance, maybe, our <code>memoizedCalc</code> function has an internal data store that maintains a hash of every argument tuple and its result. This lets us avoid computation and read from memory instead. </p>\n<p>At 11 levels of depth, <code>memoizedCalc</code> gets called 2,048 times and only returns 11 different results. You can&#39;t find a better candidate for memoization.</p>\n<p>Of course, a benchmark would be great here. Maybe <code>sqrt</code>, <code>atan</code>, and <code>**</code> aren&#39;t <em>that</em> slow, and our real bottleneck is redrawing all those nodes on every mouse move. <em>Hint: it totally is.</em></p>\n<p>Now that I spell it outâ€¦ what the hell was I thinking? I&#39;m impressed it works as well as it does.</p>\n<h2>The mouse listener</h2>\n<p>Inside <code>App.js</code>, we add a mouse event listener. We use D3&#39;s because it gives us the SVG-relative position calculation out of the box. With Reactâ€™s, we&#39;d have to do the hard work ourselves.</p>\n<pre lang=\"javascript\">\n// App.js\nstate = {\n        currentMax: 0,\n        baseW: 80,\n        heightFactor: 0,\n        lean: 0\n    };\n    \ncomponentDidMount() {\n    d3select(this.refs.svg)\n       .on(\"mousemove\", this.onMouseMove.bind(this));\n}\n\nonMouseMove(event) {\n    const [x, y] = d3mouse(this.refs.svg),\n\n    scaleFactor = scaleLinear().domain([this.svg.height, 0])\n                                                         .range([0, .8]),\n\n    scaleLean = scaleLinear().domain([0, this.svg.width/2, this.svg.width])\n                                                     .range([.5, 0, -.5]);\n\n    this.setState({\n        heightFactor: scaleFactor(y),\n        lean: scaleLean(x)\n    });\n}\n\n// ...\n\nrender() {\n    // ...\n    <svg ref=\"svg\"> //...\n    <Pythagoras w={this.state.baseW}\n                          h={this.state.baseW}\n                          heightFactor={this.state.heightFactor}\n                       lean={this.state.lean}\n                       x={this.svg.width/2-40}\n                       y={this.svg.height-this.state.baseW}\n                       lvl={0}\n                       maxlvl={this.state.currentMax}/>\n}\n</pre>\n<p>A couple of things happen here:</p>\n<ul>\n<li>we set initial <code>lean</code> and <code>heightFactor</code> to <code>0</code></li>\n<li>in <code>componentDidMount</code>, we use <code>d3.select</code> and <code>.on</code> to add a mouse listener</li>\n<li>we define an <code>onMouseMove</code> method as the listener</li>\n<li>we render the first <code>&lt;Pythagoras&gt;</code> using values from <code>state</code></li>\n</ul>\n<p>The <code>lean</code> parameter tells us which way the tree is leaning and by how much; the <code>heightFactor</code> tells us how high those triangles should be. We control both with the mouse position.</p>\n<p>That happens in <code>onMouseMove</code>:</p>\n<pre lang=\"javascript\">\nonMouseMove(event) {\n    const [x, y] = d3mouse(this.refs.svg),\n\n    scaleFactor = scaleLinear().domain([this.svg.height, 0])\n                                                         .range([0, .8]),\n\n    scaleLean = scaleLinear().domain([0, this.svg.width/2, this.svg.width])\n                                                     .range([.5, 0, -.5]);\n\n    this.setState({\n        heightFactor: scaleFactor(y),\n        lean: scaleLean(x)\n    });\n}\n</pre>\n<p><code>d3mouse</code> â€“ which is an imported <code>mouse</code> function from <code>d3-selection</code> â€“ gives us cursor position relative to the SVG element. Two linear scales give us <code>scaleFactor</code> and <code>scalelean</code> values, which we put into component state.</p>\n<p>If you&#39;re not used to D3 scales, this reads as: </p>\n<ul>\n<li>map vertical coordinates between <code>height</code> and <code>0</code> evenly to somewhere between <code>0</code> and <code>.8</code></li>\n<li>map horizontal coordinates between <code>0</code> and <code>width/2</code> evenly to somewhere between <code>.5</code> and <code>0</code>, and coordinates between <code>width/2</code> and <code>width</code> to <code>0</code> and <code>-.5</code></li>\n</ul>\n<p>When we feed a change to <code>this.setState</code>, it triggers a re-render of the entire tree, our <code>memoizedCalc</code> function returns new values, and the final result is a dancing tree.</p>\n<img src=\"http://swizec.com/blog/wp-content/uploads/2016/12/dancing-tree.gif\" alt=\"dancing-tree\" class=\"alignnone size-large wp-image-7291\" />\n<p>Beautious. ?</p>\n<p>PS: last time, I mentioned that recursion stops working when you make a React build optimized for production. That doesn&#39;t happen. I don&#39;t know what was wrong with the specific case where I saw that behavior. Â¯\\<em>(ãƒ„)</em>/Â¯</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"d88b8ea3-d4b8-50d4-a83a-546f11f99fe5"}}