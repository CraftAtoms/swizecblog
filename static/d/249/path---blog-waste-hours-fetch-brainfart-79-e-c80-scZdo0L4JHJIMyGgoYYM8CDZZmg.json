{"data":{"wordpressPost":{"title":"How to waste hours of life with fetch() and a bit of brainfart","content":"<p>Today, I had a dumb idea: <em>&quot;Nested superagent calls sure look messy… maybe I should use fetch() instead…”</em></p>\n<p>What happened next was a little bit of this:</p>\n<img src=\"https://media.giphy.com/media/Kh296M49Zr1Sg/giphy.gif\" />\n<p>Followed by a lot of this:</p>\n<img src=\"https://media.giphy.com/media/X83Y7r03T6uty/giphy.gif\" />\n<p>In case you don&#39;t know, <a href=\"https://github.com/visionmedia/superagent\">superagent</a> is a popular library for executing AJAX requests in JavaScript. Clean API, works well, makes life easy. I&#39;ve been a fan for years.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">fetch()</a> is a new JavaScript API for the same. Clean API, Promise-based interface, solves a problem you thought was solved. Not yet an official standard, but supported in all modern browsers. You can use it in production code, if you&#39;re compiling with Babel and enable <code>babel-polyfill</code>.</p>\n<p>Both superagent and fetch() enable you to talk to a server. The first produces clean code that gets nesty if you need many things. The second produces clean code that is Promis-y and sometimes cumbersome.</p>\n<p>For example, to get a JSON object with superagent, you&#39;d do this:</p>\n<pre lang=\"javascript\">\nsuperagent.get('/api/some.json')\n                    .set('Accept, 'application/json')\n                    .end((err, res) => {\n                        // res.body contains parsed JSON\n                    });\n</pre>\n<p>The same call with fetch() looks like this:</p>\n<pre lang=\"javascript\">\nfetch('/api/some.json', {headers: {Accept: 'application/json'}})\n    .then((res) => res.json())\n    .then((json) => {\n        // json contains parsed JSON\n    });\n</pre>\n<p>Both just 5 lines of code. It’s debatable which is cleaner. They look the same to me. ¯&#95;(ツ)_/¯<br />\n</em></p>\n<p>Where it gets interesting is when you have two calls that rely on each other. Observe:</p>\n<pre lang=\"javascript\">\nsuperagent.get('/api/some.json')\n                    .set('Accept, 'application/json')\n                    .end((err, res) => {\n                        const url = `/api/details/${res.body.details_id}.json`;\n                        superagent.get(url)\n                                            .set('Accept', 'application/json')\n                                            .end((err, res) => {\n                                                // res.body contains parsed details\n                                            });\n                    });\n</pre>\n<p>Vs.</p>\n<pre lang=\"javascript\">\nfetch('/api/some.json', {headers: {Accept: 'application/json'}})\n    .then((res) => res.json())\n    .then((json) => {\n        const url = `/api/details/${json.details_id}.json`;\n        return fetch(url, {headers: {Accept: 'application/json'}});\n    })\n    .then((res) => res.json())\n    .then((json) => {\n        // json contains parsed details\n    });\n</pre>\n<p>The promises approach <em>does</em> look cleaner ?</p>\n<h2>But there&#39;s a catch with fetch()</h2>\n<p>See the <code>Accept</code> header? Superagent sends it as an <code>Accept</code> header. Fetch sends it as <code>accept</code>.</p>\n<p>Your clean code stops working. You&#39;re doing everything right: you send the <code>Accept</code> header, you send the <code>Authorization</code> header for your API&#39;s token-based authentication, and yet…</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">TIL: Rails doesn&#39;t think HTTP headers are case-insensitive.</p>\n<p>fetch() knows they are and forces lowercase <a href=\"https://t.co/3DyMz7mgc6\">pic.twitter.com/3DyMz7mgc6</a></p>\n<p>&mdash; Swizec (@Swizec) <a href=\"https://twitter.com/Swizec/status/793197010664824832\">October 31, 2016</a></p></blockquote>\n<p>You fall into a rabbit hole…</p>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">Rails can still get the token out of Authentication header, but returns 401 anyway.</p>\n<p>This is what I get for trying to uses Promises.</p>\n<p>&mdash; Swizec (@Swizec) <a href=\"https://twitter.com/Swizec/status/793200932485894144\">October 31, 2016</a></p></blockquote>\n<p>You read through all of the relevant questions and answers on StackOverflow. You google and google. You spelunk through Rails&#39;s code on Github.</p>\n<p>You abandon all hope…</p>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">Oh great, looks like it&#39;s actually Warden bug deep inside the bowels of Devise.</p>\n<p>All I wanted was to use fetch() ?</p>\n<p>&mdash; Swizec (@Swizec) <a href=\"https://twitter.com/Swizec/status/793210701175148544\">October 31, 2016</a></p></blockquote>\n<p>You&#39;re about ready to start throwing things. Nothing makes sense, this is dumb, everything sucks, all you wanted was to Do The Right Thing™ and now you&#39;re stuck debugging huge frameworks.</p>\n<p>?</p>\n<p>By the way, Devise is a library for user authentication, and Warden is the core authentication library it wraps. No, I don&#39;t know why this happens in two libraries. Maybe historical reasons.</p>\n<p>And then it hits you. You&#39;re being an idiot.</p>\n<p>The difference between superagent and fetch() isn&#39;t that one sends your headers as-given and the other lowercases their names. The difference is that superagent sends a cookie and fetch() doesn&#39;t!</p>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">Oh god &#8230; the REAL issue is that fetch() doesn&#39;t automatically send Cookies and I didn&#39;t notice.</p>\n<p>Fuck my life. <a href=\"https://t.co/hWbxA8bvzV\">pic.twitter.com/hWbxA8bvzV</a></p>\n<p>&mdash; Swizec (@Swizec) <a href=\"https://twitter.com/Swizec/status/793215715939463168\">October 31, 2016</a></p></blockquote>\n<p>Your API relies on tokens to authenticate the client, <em>and on session cookies to identify users</em>. ? It makes total sense, super common design. But <strong><em>ugh!!</em></strong></p>\n<p>You have to add <code>credentials: &#39;same-origin&#39;</code> to your fetch() settings object. Then it works. The API talks to you, the JavaScript client does its thing, users are happy.</p>\n<p>Code looks like this:</p>\n<pre lang=\"javascript\">\nfetch('/api/some.json', {headers: {Accept: 'application/json'},\n                                                 credentials: 'same-origin'})\n    .then((res) => res.json())\n    .then((json) => {\n        const url = `/api/details/${json.details_id}.json`;\n        return fetch(url, {headers: {Accept: 'application/json'},\n                                             credentials: 'same-origin'});\n    })\n    .then((res) => res.json())\n    .then((json) => {\n        // json contains parsed details\n    });\n</pre>\n<p>In real code, I suggest wrapping fetch() in a helper function that always adds API-specific options like <code>Accept</code> and <code>Authorization</code> headers and <code>credentials</code>. Your future self will thank you.</p>\n<p>No, I don&#39;t know why fetch() breaks the 20-year old convention that cookies are automatically included in requests.</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"60e37f46-cdb2-582e-a7a5-cf7d7acc778a"}}