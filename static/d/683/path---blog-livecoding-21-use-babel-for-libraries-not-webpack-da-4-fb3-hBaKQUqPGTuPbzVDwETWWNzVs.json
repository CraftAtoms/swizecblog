{"data":{"wordpressPost":{"title":"Livecoding #21: Use Babel for libraries, not Webpack","content":"<p><em>This is a Livecoding Recap ‚Äì an almost-weekly post about interesting things discovered while livecoding ?. Always under 500 words and with pictures. You can follow my channel, <a href=\"https://livecoding.tv/swizec\">here</a>. New streams almost <strong>every Sunday at 2pm PDT</strong>. There‚Äôs live chat, come say hai ?</em></p>\n<p><iframe src=\"https://www.livecoding.tv/swizec/videos/oyqWr/embed\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"true\" scrolling=\"no\"></iframe></p>\n<figure>\n<img src=\"http://i.imgur.com/uDDcJq5.gif\" alt=\"\" /><br />\n</figure>\n<p>It does the thing! We did it! \\o/</p>\n<p>Sort of ‚Ä¶ it&#8217;s pretty damn buggy. Flickering, wobbling, colors switching place. It&#8217;s a really shitty animated piechart when you think about it.</p>\n<p>But animated it is, and the flickering and the wobbling and the color changing is no fault of our <code>TransitionableComponent</code> library. The point was to get <em>that</em> working.</p>\n<p><a href=\"https://swizec.com/blog/livecoding-20-you-cant-extend-an-object/swizec/6948\">Last week</a>, we couldn&#8217;t even get the import to work. No matter what we tried, <code>TransitionableComponent</code> was always an object and wouldn&#8217;t let us extend. Which makes sense; you extend classes (functions), not objects.</p>\n<p>Before today&#8217;s stream, I tried a few more things:</p>\n<ul>\n<li>upgrade node to 4.5 LTS ‚Äî&gt; nope ??</li>\n<li>upgrade node to latest 6.4 ‚Äî&gt; nope ??</li>\n<li>import from script path directly ‚Äî&gt; nope ??</li>\n<li>extend <code>TransitionableComponent.constructor</code> ‚Äî&gt; lol, nope ??</li>\n</ul>\n<p>Nothing worked. It was hopeless. The stream was starting, and I was still stuck at the same point where we‚Äôd left off the week before. People joined, people dropped.</p>\n<p>Desperate, I said <em>&#8220;Fuck it, let&#8217;s avoid Webpack&#8221;</em>. This was a last ditch attempt at salvaging the thing, the stream, and my honor.</p>\n<p>Lo and behold: it worked. ?</p>\n<p>Of course <em>then</em> a bunch of people in the chat said, <em>&quot;Oh yeah, I totally knew that would work‚Äù</em>.</p>\n<p>Well then, why the fuck didn&#8217;t you say so? ‚Ä¶</p>\n<p>It&#8217;s okay. They helped me figure out exactly how to do the Babel step to make it work. We&#8217;re good. üôÇ</p>\n<p>If you&#8217;re building a library, don&#8217;t use Webpack to compile. Use Babel directly. Here&#8217;s why:</p>\n<figure>\n<img src=\"http://i.imgur.com/w4lK3BY.png\" alt=\"\" /><br />\n</figure>\n<blockquote>\n<p>That&#8217;s because Webpack will create a single JS file optimized for non-commonjs environments. So there is no <code>require</code> or <code>module.exports</code> with Webpack. Babel will only transpile es2015 to es5, so <code>module.exports</code> and <code>requires</code> will stay, and node can understand them.</p>\n<p></p>\n<p>Then, when the project uses your library, webpack will resolve and bundle that es5 code.</p>\n</blockquote>\n<p>Thanks ilmattodel93! You&#8217;re the best!</p>\n<p>I feel like I&#8217;ve learned a valuable lesson, even if it did take embarrassingly long to discover. I even found a clue three weeks ago ‚Üí React source looks like pure ES5 without any Webpack crap.</p>\n<p>Now, about that flickering and the wobbling: It happens because we&#8217;re animating the <code>d</code> attribute of a <code>path</code> element, like this:</p>\n<pre lang=\"javascript\">\r\nclass Path extends TransitionableComponent {\r\n    render() {\r\n        return (\r\n            <path d={this.state.d}\r\n                  style={this.props.style}\r\n                  ref=\"node\" />\r\n        );\r\n    }\r\n}\r\n</pre>\n<p>The flickering is when <code>d</code> reaches an invalid value. This confuses both D3 and SVG. The wobbling is a result of interpolation between two values of <code>d</code>. I&#8217;d paste them here, but they&#8217;re hard to read.</p>\n<p>This is either a bug in D3 or a fundamental issue with SVG and/or interpolation. A better approach might be to transition <code>startAngle</code> and <code>endAngle</code> attributes hidden deep inside the <code>pie()</code> layout.</p>\n<p>We&#8217;ll try that next week. After that, I think it&#8217;s time to play with <code>react-native</code> and D3.</p>\n<p>PS: the edited and improved versions of these videos are becoming a video course. Readers of the engineer package of <a href=\"http://swizec.com/reactd3js/\">React+d3js ES6</a> get the video course for free when it‚Äôs ready.</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"9f1fb1e0-47d7-5653-b1a1-ed014d8191ed"}}