{"data":{"wordpressPost":{"title":"Testing socket.io apps","content":"<a href=\"http://swizec.com/blog/wp-content/uploads/2012/11/nyan-cat-testing2.png\"><img class=\"alignnone size-full wp-image-5632\" title=\"Nyan cat testing\" src=\"http://swizec.com/blog/wp-content/uploads/2012/11/nyan-cat-testing2.png\" alt=\"Nyan cat testing\" width=\"596\" height=\"144\" srcset=\"https://swizec.com/blog/wp-content/uploads/2012/11/nyan-cat-testing2.png 596w, https://swizec.com/blog/wp-content/uploads/2012/11/nyan-cat-testing2-300x72.png 300w\" sizes=\"(max-width: 596px) 100vw, 596px\" /></a>\n<p>Socket.io is probably one of the coolest things to come out of the <a class=\"zem_slink\" title=\"JavaScript\" href=\"http://en.wikipedia.org/wiki/JavaScript\" rel=\"wikipedia\" target=\"_blank\">JavaScript</a> world in recent years. Finally! Something that lets <a class=\"zem_slink\" title=\"Web developer\" href=\"http://en.wikipedia.org/wiki/Web_developer\" rel=\"wikipedia\" target=\"_blank\">web developers</a> createÂ real-time apps without the fuss of thinking about websockets and <a class=\"zem_slink\" title=\"Push technology\" href=\"http://en.wikipedia.org/wiki/Push_technology\" rel=\"wikipedia\" target=\"_blank\">long polling</a> and all the other hacks that need to be used.</p>\n<p>The idea is pretty simple, the server can emit an event and the <a class=\"zem_slink\" title=\"Client (computing)\" href=\"http://en.wikipedia.org/wiki/Client_%28computing%29\" rel=\"wikipedia\" target=\"_blank\">client</a> will pick it up. The converse also happens. <a class=\"zem_slink\" title=\"Callback (computer programming)\" href=\"http://en.wikipedia.org/wiki/Callback_%28computer_programming%29\" rel=\"wikipedia\" target=\"_blank\">Callbacks</a> through the server-client barrier works as well. Socket.io takes care of deciding which of the real-time hacks should be used to make the magic happen.</p>\n<p>Thing is, the interplay of client and server makes socket.io apps a bit difficult to test.</p>\n<p>A good way I&#8217;ve found is the combination of <a href=\"http://visionmedia.github.com/mocha/\" target=\"_blank\">Mocha</a>, <a href=\"http://chaijs.com/\" target=\"_blank\">Chai</a> and <a href=\"https://github.com/LearnBoost/socket.io-client\" target=\"_blank\">socket.io-client</a>.</p>\n<h2>First, something to test</h2>\n<p>Let&#8217;s take for example a very simple echo server.Â I usedÂ <a href=\"http://expressjs.com/\" target=\"_blank\">Express</a>Â to make things easier to play with in the Chrome console. Here&#8217;s the relevant part ofÂ <em>app.js</em>.</p>\n<pre lang=\"javascript\">var server = exports.server = http.createServer(app).listen(app.get('port'), function(){\r\n  console.log(\"Express server listening on port \" + app.get('port'));\r\n});\r\n\r\nvar io = require('socket.io').listen(server);\r\nio.set(\"log level\", 0);</pre>\n<pre lang=\"javascript\">// the important parts of echo server\r\nio.sockets.on(\"connection\", function (socket) {\r\n    socket.on(\"echo\", function (msg, callback) {\r\n        callback = callback || function () {};\r\n\r\n        socket.emit(\"echo\", msg);\r\n\r\n        callback(null, \"Done.\");\r\n    });\r\n});</pre>\n<p>After not forgetting to load <em>/socket.io/socket.io.js</em> into the index page, I can now run the server, point my browser toÂ <em>http://localhost:3000</em> and play around in the console like this:</p>\n<pre lang=\"log\">\r\n> var socket = io.connect(\"http://localhost:3000\")\r\nundefined\r\n> socket.on(\"echo\", function (msg) { console.log(msg); })\r\nSocketNamespace\r\n> socket.emit(\"echo\", \"Hello World\")\r\nSocketNamespace\r\nHello World</pre>\n<h2>Automating the test</h2>\n<p>Typing commands into a console, even clicking around a webpage is a rather arduous and boring process. The easiest way I&#8217;ve found to automate this is using Mocha and socket.io-client.</p>\n<p>First thing we&#8217;re going to need is requiring everything and making sure the socket.io server is running.</p>\n<pre lang=\"javascript\">var chai = require('chai'),\r\n    mocha = require('mocha'),\r\n    should = chai.should();\r\n\r\nvar io = require('socket.io-client');\r\n\r\ndescribe(\"echo\", function () {\r\n\r\n    var server,\r\n        options ={\r\n            transports: ['websocket'],\r\n            'force new connection': true\r\n        };\r\n\r\n    beforeEach(function (done) {\r\n        // start the server\r\n        server = require('../app').server;\r\n\r\n        done();\r\n    });</pre>\n<p>See, simple ðŸ™‚</p>\n<p>Now comes the interesting part, the actual test making sure our server does in fact echo what we ask it to.</p>\n<pre lang=\"javascript\">    it(\"echos message\", function (done) {\r\n        var client = io.connect(\"http://localhost:3000\", options);\r\n\r\n        client.once(\"connect\", function () {\r\n            client.once(\"echo\", function (message) {\r\n                message.should.equal(\"Hello World\");\r\n\r\n                client.disconnect();\r\n                done();\r\n            });\r\n\r\n            client.emit(\"echo\", \"Hello World\");\r\n        });\r\n    });</pre>\n<p>The idea behind this test is simple:</p>\n<ol>\n<li>Connect client to server</li>\n<li>Once there&#8217;s a connection, listen forÂ <em>echo</em> event from the server</li>\n<li>Emit <em>echoÂ </em>event to the server</li>\n<li>Server responds and triggers our listener</li>\n<li>Listener checks correctness of response</li>\n<li>Disconnects client</li>\n</ol>\n<p>Disconnecting clients after tests isÂ <strong><em>very important</em></strong>. As I&#8217;ve discovered, not disconnecting can lead to the socket accumulating <a class=\"zem_slink\" title=\"Observer pattern\" href=\"http://en.wikipedia.org/wiki/Observer_pattern\" rel=\"wikipedia\" target=\"_blank\">event listeners</a>, which in turn can fire completely different tests than what you expect. It also leads to tests that pass 70% of the time, but fail in random ways.</p>\n<p>In the end, our efforts are rewarded by a happy nyan cat.</p>\n<a href=\"http://swizec.com/blog/wp-content/uploads/2012/11/nyan-cat-testing.png\"><img class=\"alignnone  wp-image-5628\" title=\"Nyan cat testing\" src=\"http://swizec.com/blog/wp-content/uploads/2012/11/nyan-cat-testing.png\" alt=\"Nyan cat testing\" width=\"619\" height=\"157\" srcset=\"https://swizec.com/blog/wp-content/uploads/2012/11/nyan-cat-testing.png 774w, https://swizec.com/blog/wp-content/uploads/2012/11/nyan-cat-testing-300x75.png 300w\" sizes=\"(max-width: 619px) 100vw, 619px\" /></a>\n<p>PS: you can see all the code <a href=\"https://github.com/Swizec/random-coding/tree/master/socket.io-testing\">on github</a>.</p>\n<p>Maria Ramos from <a href=\"http://www.webhostinghub.com/support/edu\">Webhostinghub.com/support/edu</a> has translated this post into <a href=\"http://www.webhostinghub.com/support/es/misc/probando-aplicaciones-de-socketio\">Spanish</a>.</p>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles</h6>\n<ul class=\"zemanta-article-ul zemanta-article-ul-image\" style=\"margin: 0; padding: 0; overflow: hidden;\">\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://stackoverflow.com/questions/12977719/how-much-data-can-i-send-through-a-socket-emit\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/noimg_119_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://stackoverflow.com/questions/12977719/how-much-data-can-i-send-through-a-socket-emit\" target=\"_blank\">How much data can I send through a socket.emit?</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://www.joezimjs.com/javascript/plugging-into-socket-io-the-basics/\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/125930383_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://www.joezimjs.com/javascript/plugging-into-socket-io-the-basics/\" target=\"_blank\">Plugging Into Socket.IO: The Basics</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://stackoverflow.com/questions/13571376/strange-issue-with-socket-io\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/noimg_94_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://stackoverflow.com/questions/13571376/strange-issue-with-socket-io\" target=\"_blank\">Strange Issue with Socket.IO</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://www.daniweb.com/software-development/java/threads/437028/single-threaded-client-server-lotto-system\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/118864313_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://www.daniweb.com/software-development/java/threads/437028/single-threaded-client-server-lotto-system\" target=\"_blank\">Single-Threaded Client-Server &#8211; Lotto System</a></li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/?px\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=268bdc8c-5461-496f-9bff-f71042d50894\" alt=\"Enhanced by Zemanta\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"bdef849f-ee98-5836-ace4-046cab8b43f0"}}