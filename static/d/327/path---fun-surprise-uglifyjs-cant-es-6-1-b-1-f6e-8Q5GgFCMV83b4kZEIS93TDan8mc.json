{"data":{"wordpressPost":{"title":"Fun surprise: UglifyJS can&#8217;t ES6","content":"<p><em>&quot;Yo Swiz, why aren&#39;t there any generated assets on preprod?&quot;</em></p>\n<p>Preprod is production-but-not. As the last step before deploying to production, it acts just like the real deal. Real data, real users, real configuration, real everything except payments. Because that would be rude.</p>\n<p><em>&quot;Errr &#8230; what do you mean there&#39;s no assets?&quot;</em></p>\n<p><em>&quot;Well, we ran out of environments, so I&#39;m testing on preprod. It&#39;s like Webpack doesn&#39;t output anything, but it works on localhost and all our other environments.&quot;</em></p>\n<p>O.o</p>\n<pre><code>ERROR in tutor_onboarding.js from UglifyJs\nSyntaxError: Unexpected token: name (defaultHeaders) [./~/better-fetch/index.js:2,0]\n</code></pre>\n<img class=\"alignnone size-full wp-image-7271\" src=\"https://swizec.com/blog/wp-content/uploads/2016/12/Screen-Shot-2016-12-07-at-00.15.52.png\" width=\"740\" height=\"71\" srcset=\"https://swizec.com/blog/wp-content/uploads/2016/12/Screen-Shot-2016-12-07-at-00.15.52.png 740w, https://swizec.com/blog/wp-content/uploads/2016/12/Screen-Shot-2016-12-07-at-00.15.52-300x29.png 300w\" sizes=\"(max-width: 740px) 100vw, 740px\" />\n<p>That&#8217;s funny &#8230; UglifyJS throws an error on the first line of my <a href=\"https://swizec.com/blog/a-tiny-es6-fetch-wrapper/swizec/7177\">better-fetch</a> library. Why would it do <em>that</em>? ?</p>\n<p><em>&#8220;We don&#8217;t minify our code on localhost, do we? What about on staging?&#8221;</em></p>\n<p><em>&#8220;Yeah, only prod and preprod&#8221;</em></p>\n<p>Great, at least we know how nobody noticed this in over a month. It only happens on servers configured for production.</p>\n<p>Thank the-god-of-grizzled-veterans for preprod! Error happens, deploy goes through, assets are empty, nothing works. Imagine how <em>absolutely fantastic</em> this would be to discover when deploying to real production ?</p>\n<p>Here&#8217;s the line that broke <a href=\"https://github.com/mishoo/UglifyJS2\">UglifyJS</a>:</p>\n<pre lang=\"javascript\">\nlet defaultHeaders = {};\n</pre>\n<img class=\"alignnone size-full wp-image-7270\" src=\"https://swizec.com/blog/wp-content/uploads/2016/12/i-built-a-sfaehy.jpg\" width=\"600\" height=\"542\" srcset=\"https://swizec.com/blog/wp-content/uploads/2016/12/i-built-a-sfaehy.jpg 600w, https://swizec.com/blog/wp-content/uploads/2016/12/i-built-a-sfaehy-300x271.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" />\n<p>I built a <code>fetch()</code> wrapper in ES6. Fuck me, right? Not like it&#8217;s an ES6+ only API or anything like thatâ€¦</p>\n<blockquote><p>\nHint: it is. It&#8217;s ES6 only. You&#8217;d think building a wrapper in ES6 without compiling before <code>npm publish</code> would work, right?\n</p></blockquote>\n<p>Nope. Not if a project that imports your library minifies their assets.</p>\n<h2>How to package your ES6 library so anyone can use it</h2>\n<p>3.73 months ago, I thought <a href=\"https://swizec.com/blog/livecoding-19-its-hard-to-package-a-library/swizec/6927\">packaging a library was hard</a>. Turns out it&#8217;s not so bad at all.</p>\n<p>You have to add <a href=\"https://babeljs.io/\">Babel</a>, the ES6 -> ES5 compiler<sup><a id=\"ffn1\" href=\"#fn1\" class=\"footnote\">1</a></sup>, configure it, update your new <code>main</code> entry, and add a <code>build</code> script to npm scripts. That makes it easier to run.</p>\n<p>These 7 lines are all it takes: <a href=\"https://github.com/Swizec/better-fetch/commit/9c7c6e2afc660ea9a35bc73a14d15aedc7f47b04\">diff on Github</a></p>\n<p>You have to install <code>babel-cli</code> and <code>babel-preset-latest</code>:</p>\n<pre lang=\"javascript\">\n$ npm install --save-dev babel-cli babel-preset-latest\n</pre>\n<p>And configure Babel:</p>\n<pre lang=\"javascript\">\n// package.json\n\n\"babel\": {\n    \"presets\": [\"latest\"]\n}\n</pre>\n<p>Configuring in <code>package.json</code> is easiest. 17 characters is not a good enough reason to add another config file to your project.</p>\n<p>You should update your <code>main</code> entry as well. It tells npm which file to use when somebody uses <code>require('your-library')</code> or <code>import YourThing from 'your-library'</code>.</p>\n<pre lang=\"javascript\">\n// package.json\n\n\"main\": \"lib/index.js\"\n</pre>\n<p>Many projects use <code>lib/</code> for their compiled files. <code>dist/</code> is another popular choice.</p>\n<p>To improve your quality of life, you should add a <code>build</code> script. Also in <code>package.json</code>:</p>\n<pre lang=\"javascript\">\n// package.json\n\"scripts\": {\n    \"build\": \"babel src -d lib\"\n}\n</pre>\n<p>Now you can use <code>npm run build</code> to run <code>babel</code>, read files from <code>src/</code>, and output the compiled versions in <code>lib/</code>. Library fixed. Crisis solved. &#92;o/</p>\n<h2>Further quality of life improvement</h2>\n<p>While heroically saving the day with the above 7 lines of configuration, I found another way to improve my quality of life: automatic version bumping and GitHub pushing.</p>\n<p>Add these 3 lines to <code>package.json</code>:</p>\n<pre lang=\"javascript\">\n// package.json\n\"scripts\": {\n    \"preversion\": \"\",\n    \"version\": \"npm run build && git add -A lib\",\n    \"postversion\": \"git push && git push --tags && rm -rf build/temp\",\n}\n</pre>\n<p>You can use <code>npm version X</code> where X is one of <code>patch</code>, <code>minor</code>, <code>major</code>, etc. to bump your library version number. That always works.</p>\n<p>These three lines make it better. <code>preversion</code> runs a command <em>before</em> updating the version number. If the command fails, the version doesn&#39;t change. Usually these are tests. In my case, it&#39;s empty because I&#39;m a bad person.</p>\n<p><code>version</code> runs a command when the version updates. This is a great spot to compile your library and add the compiled files to git.</p>\n<p><code>postversion</code> runs after the version updates. And <em>this</em> is a great spot to push to GitHub and perform any build cleanup.</p>\n<p>Now you can update your library then run <code>npm version patch</code> to bump the version, build the lib, and push to github. <code>npm publish</code> announces the fix to the world.</p>\n<p>Time to congratulate yourself and grab a beverage. ?</p>\n<h2>Lesson Learned</h2>\n<p>UglifyJS doesn&#39;t support ES6. They&#39;ve been <a href=\"https://github.com/mishoo/UglifyJS2/issues/448\">working on it</a> since at least March of 2014. As of December 6th, 2016, it&#39;s still not ready. Turns out this is a hard problem.</p>\n<p>Most real world projects use UglifyJS to minify their JavaScript.</p>\n<p>You have to distribute a compiled version of your JavaScript libraries no matter what they do. Such is life.</p>\n<hr />\n<ol id=\"footnotes\">\n<li id=\"fn1\">Yes, Babel is <em>technically</em> a <a href=\"https://en.wikipedia.org/wiki/Source-to-source_compiler\">transpiler</a> <a href=\"#ffn1\">&#8617;</a></li>\n</ol>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"9cf6e259-b20a-50fe-a78b-3b81b5c5a3eb"}}