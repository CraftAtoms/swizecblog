{"data":{"wordpressPost":{"title":"Are map, reduce, and filter turing complete?","content":"<p>Yes.</p>\n<p>You can implement any algorithm with map, reduce, and filter when taken in the context of modern languages that implement these constructs. The predicate functions they rely on are turing complete, which makes them turing complete by extension.</p>\n<p>But that&#8217;s smartass answer isn&#8217;t it? Implementing your whole algorithm in a predicate function and wrapping it in a map call feels like cheating.</p>\n<p>Can you implement an algorithm <em>just</em> with map, reduce, and filter?</p>\n<p>No.</p>\n<p>Those three functions on their own can&#8217;t do squat. Writing something like <code>map(reduce(reduce(map(reduce(filter(4))))))</code> will not make anything happen.</p>\n<p>We first have to decide what we&#8217;re trying to ask.</p>\n<p>I&#8217;ve been losing sleep over this whole thing ever since a technical editor nerdsniped me last week. <em>&#8220;A smart man once told me you can write any program as a sequence of map and reduce calls. I like to add filter for a more comprehensive toolset.&#8221;</em>, I wrote in <a href=\"http://www.packtpub.com/data-visualization-with-d3js/book\">Data Visualization with d3.js</a>.</p>\n<p>The editor&#8217;s only comment was <em>&#8220;This is wrong. For instance, you can&#8217;t implement sorting like this.&#8221;</em></p>\n<p>And well, yes, he&#8217;s right. But he also isn&#8217;t. What did Smart Guy &#8482; try to tell me all those years ago when he introduced me to functional programming?</p>\n<p>Back to basics.</p>\n<p>To have a <a class=\"zem_slink\" title=\"Turing completeness\" href=\"http://en.wikipedia.org/wiki/Turing_completeness\" target=\"_blank\" rel=\"wikipedia\">turing complete language</a> you need:</p>\n<ol>\n<li>Write cell</li>\n<li>Read cell</li>\n<li>Move left</li>\n<li>Move right</li>\n<li>Branching (based on cell value)</li>\n</ol>\n<p>We assume our memory is practically infinite. Meaning it&#8217;s not infinite per se, but we can add more when we run out.</p>\n<p>In his <a href=\"http://swizec.com/blog/the-birth-of-lisp-a-summary-of-john-mccarthys-original-paper/swizec/5075\">LISP-creating paper, McCarthy wrote</a> that a recursive alternative to an iterative turing machine needs the following constructs:</p>\n<ol>\n<li><code>atom</code> &#8211; is this symbol an atom (one of the basic characters)</li>\n<li><code>eq</code> &#8211; are both these symbols atoms</li>\n<li><code>car</code> &#8211; returns the first part of a two-element list</li>\n<li><code>cdr</code> &#8211; returns the second part of a two-element list</li>\n<li><code>cons</code> &#8211; constructs a list from two elements</li>\n<li>recursive definitions using these five constructs</li>\n</ol>\n<p>Where does this leave us in regards to our original question? <em>Can</em> we construct anything out of a sequence of map, reduce, and filter?</p>\n<p>It depends.</p>\n<p>In the context of a strict <a class=\"zem_slink\" title=\"Functional programming\" href=\"http://en.wikipedia.org/wiki/Functional_programming\" target=\"_blank\" rel=\"wikipedia\">functional language</a>, with the addition of recursion, yes we probably can.</p>\n<p>After all, implementing a naive <a class=\"zem_slink\" title=\"Quicksort\" href=\"http://en.wikipedia.org/wiki/Quicksort\" target=\"_blank\" rel=\"wikipedia\">quicksort</a> in <a class=\"zem_slink\" title=\"Haskell (programming language)\" href=\"http://haskell.org\" target=\"_blank\" rel=\"homepage\">Haskell</a> takes nothing more than recursion, <code>car</code>, <code>cdr</code>, <code>cons</code> and filter.</p>\n<pre lang=\"haskell\">\r\nquicksort [] = []\r\nquicksort (x:xs) =\r\n          let smaller = quicksort (filter (<=x) xs)\r\n              bigger = quicksort (filter (>x) xs)\r\n          in smaller ++ [x] ++ bigger\r\n</pre>\n<p>Basically, if <code>quicksort</code> gets an empty list, return an empty list. Otherwise make a new list and put elements smaller than <code>x</code> on left, bigger on right. <code>++</code> is essentially cons and that <code>(x:xs)</code> bit splits the list so the first item becomes <code>x</code> and the other items become <code>xs</code>.</p>\n<p>One of the tersest sorting implementations I&#8217;ve ever seen. And we didn&#8217;t <em>really</em> go out of our map, reduce, filter framework did we? The ability to append to and split lists is usually assumed.</p>\n<p>But can we go a step further? Can we implement <code>filter</code> with map and reduce? Let&#8217;s try.</p>\n<pre lang=\"javascript\">\r\nfunction filter (predicate, list) {\r\n    return list.map(function (a) {\r\n        return predicate(a) ? [a] : null;\r\n    }).reduce(function (prev, current) {\r\n        return current ? prev.concat(current) : prev;\r\n    }, []);\r\n}\r\n</pre>\n<p>Yes we can. Even in Javascript, which the original question was about. It&#8217;s rather simple &#8211; mark unwanted entries with <code>map</code>, then use <code>reduce</code> to create a new list sans unwanted entries.</p>\n<p>We could go a step further and use only <code>reduce</code>.</p>\n<pre lang=\"javascript\">\r\nfunction filter2 (predicate, list) {\r\n    return list.reduce(function (prev, current) {\r\n        return predicate(current) ? prev.concat(current) : prev;\r\n    }, []);\r\n}\r\n</pre>\n<p>Turns out <code>reduce</code> and <code>filter</code> are the same function once you assume branching and comparison are a given. <code>.concat</code> is Javascript&#8217;s version of cons by the way.</p>\n<p>We can implement that Haskell example in <a class=\"zem_slink\" title=\"JavaScript\" href=\"http://en.wikipedia.org/wiki/JavaScript\" target=\"_blank\" rel=\"wikipedia\">Javascript</a> as well. Proving that even with Javascript recursion, map, and reduce are enough to do anything.</p>\n<pre lang=\"javascript\">\r\nfunction quicksort (list) {\r\n    if (list.length == 0) {\r\n        return [];\r\n    }\r\n\r\n    var x = list[0],\r\n        xs = list.slice(1);\r\n\r\n    return quicksort(filter2(function (a) { return a <= x; }, xs))\r\n        .concat(x)\r\n        .concat(\r\n            quicksort(filter2(function (a) { return a > x; }, xs)));\r\n}\r\n</pre>\n<p>Exact same code as before, just wordier because Javascript is fluffier than Haskell.</p>\n<p>But are we any closer to discovering our question?</p>\n<p>Not really no. We&#8217;ve just shown that given conditionals, a way to slice and append lists, recursion, map, and reduce we can do anything. Even in Javascript.</p>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/?px\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" alt=\"Enhanced by Zemanta\" src=\"http://img.zemanta.com/zemified_e.png?x-id=5af887dc-447d-4f5a-98dc-08047cfee16f\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"68804044-ce32-51ff-a38b-adf972174159"}}