{"data":{"wordpressPost":{"title":"Monads, monads, monads, monads","content":"<p><a href=\"http://www.haskell.org/haskellwiki/Monad_tutorials_timeline\">Monad tutorials</a> have achieved what many startups crave &#8211; hockey stick growth.</p>\n<div style=\"width: 310px\" class=\"wp-caption alignright\"><img title=\"Monad tutorials growth\" src=\"http://www.haskell.org/wikiupload/2/23/Monad-tutorials-chart.png\" alt=\"Monad tutorials growth\" width=\"300\" height=\"225\" /><p class=\"wp-caption-text\">Monad tutorials growth</p></div>\n<p>This isn&#8217;t a <a class=\"zem_slink\" title=\"Monad (functional programming)\" href=\"http://en.wikipedia.org/wiki/Monad_%28functional_programming%29\" rel=\"wikipedia\" target=\"_blank\">monad</a> tutorial.</p>\n<p>It <em>could</em> be a monad tutorial, but I still don&#8217;t understand monads. I don&#8217;t think I ever will.</p>\n<p>Monads were invented to fuck with us developers of lesser minds, the ones who don&#8217;t want to bend over backwards to maintain <a class=\"zem_slink\" title=\"Purely functional\" href=\"http://en.wikipedia.org/wiki/Purely_functional\" rel=\"wikipedia\" target=\"_blank\">functional purity</a> and would perhaps rather &#8230; you know &#8230; get things done instead. Really, sometimes I just want things to <em>work</em>. I don&#8217;t even care how.</p>\n<p>You see, monads are just a wrapper around values. Their rhetoric is <em>Hey, there&#8217;s this value here, but there&#8217;s a whole bunch of conditions involved. You don&#8217;t really need to know about those, just play according to the rules</em>.</p>\n<p>And then you&#8217;re like <em>Okay &#8230; but just give me the value? I understand all the conditions, but I don&#8217;t care about them, I just want the value.</em></p>\n<p>Well no, no you can&#8217;t have the value just like that. That would be silly. You can unwrap the monad, play around with the value, fiddle with all the knobs and dials, but once you&#8217;re done, you have to put it back into the monad where it&#8217;s safe.</p>\n<p>Monads are the ultimate Dad&#8217;s shiny red corvette that he lets you drive around the parking lot, but you must always put it back in the garage and never drive anywhere with it.</p>\n<p>I wish my dad had a corvette.</p>\n<h2>Monads annoy me</h2>\n<p>Really, they&#8217;re just annoying. Annoying little shits.</p>\n<p>Yesterday I was doing something simple:</p>\n<ul>\n<li>take some values from mongodb</li>\n<li>draw a graph</li>\n</ul>\n<p>Simple right? Can&#8217;t be more than ten or twenty lines of either python or javascript.</p>\n<p>I spent the entire day in <strong><em>Monad Hell </em></strong>getting it done in <a class=\"zem_slink\" title=\"Haskell (programming language)\" href=\"http://haskell.org\" rel=\"homepage\" target=\"_blank\">Haskell</a>. And that&#8217;s after the <a class=\"zem_slink\" title=\"Dependency hell\" href=\"http://en.wikipedia.org/wiki/Dependency_hell\" rel=\"wikipedia\" target=\"_blank\">dependency hell</a> of installing <em>Chart</em> on my computer &#8230; <em>cabal</em> isn&#8217;t very good, but that&#8217;s a whole different blogpost.</p>\n<p>You see, when you take some values out of Mongo, the operation might have failed! You know it didn&#8217;t, you know everything should just crash and burn and alarms should be going off if it did, so it&#8217;s never going to. Not as far as this piece of code is concerned.</p>\n<p>But Haskell doesn&#8217;t know that. It <em>might have</em> failed. So everything you get out is wrapped in the <em>Maybe</em> monad. Except sometimes it isn&#8217;t.</p>\n<pre lang=\"haskell\">known'::[Document] -> (UTCTime, Double)\r\nknown' docs = (cast' $ (valueAt \"time\") (docs!!0),\r\n               cast' $ (valueAt \"amount\") (docs!!0))\r\n\r\n-- Couldn't match expected type `Double' with actual type `Maybe a0'\r\n--    In the expression: cast' $ (valueAt \"amount\") (docs !! 0)</pre>\n<p>Great. Ok so those are maybes, don&#8217;t really care, moving on.</p>\n<p>By the way, if the function really <em>does</em> fail it either dies with an index out of bounds error (not enough Documents) or with some sort of <em>fields weren&#8217;t there</em> error, if you give it the wrong sort of Document. So it&#8217;s not like it could actually fail in a way that it would still work and those Maybes would be warranted.</p>\n<pre lang=\"haskell\">plot.hs:52:7:\r\n    Couldn't match expected type `Double'\r\n                with actual type `Maybe Double'\r\n    In the first argument of `(+)', namely `money'\r\n    In the first argument of `(-)', namely `money + p'\r\n    In the expression: money + p -</pre>\n<p>Gah!</p>\n<p>At this point you&#8217;re (or at least I was) getting frustrated and you suddenly can&#8217;t remember where that short and sweet description of <em>instance</em> was even though it kept slapping you in the face the whole time you were trying to figure out how to take a value out of some monad or another <em>and keep it the fuck out.</em></p>\n<p>I don&#8217;t know what instances are, not completely, but they look like a magic thing that can make <a class=\"zem_slink\" title=\"Type conversion\" href=\"http://en.wikipedia.org/wiki/Type_conversion\" rel=\"wikipedia\" target=\"_blank\">type conversions</a> automatic. And that&#8217;s awesome so I need to look it up.</p>\n<p>Anyway, you settle for a simple function</p>\n<pre lang=\"haskell\">double'::Maybe Double -> Double\r\ndouble' Nothing = 0.0\r\ndouble' (Just x) = x</pre>\n<p>Everything works! Yay!</p>\n<p>At no point in execution does that default value actually happen. Because you&#8217;ve made sure externally that the operation Haskell is unsure of will never fail, but hey, you&#8217;re happy, haskell is happy, the code is somewhat ugly.</p>\n<p>But at least it works.</p>\n<div id=\"attachment_5209\" style=\"width: 650px\" class=\"wp-caption alignright\"><a href=\"http://swizec.com/blog/wp-content/uploads/2012/09/graph1.png\"><img class=\"size-full wp-image-5209\" title=\"Money graph\" src=\"http://swizec.com/blog/wp-content/uploads/2012/09/graph1.png\" alt=\"Money graph\" width=\"640\" height=\"480\" srcset=\"https://swizec.com/blog/wp-content/uploads/2012/09/graph1.png 640w, https://swizec.com/blog/wp-content/uploads/2012/09/graph1-300x225.png 300w\" sizes=\"(max-width: 640px) 100vw, 640px\" /></a><p class=\"wp-caption-text\">Money graph</p></div>\n<p>Now I just wish the graph wasn&#8217;t a fluke of currency conversions.</p>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles</h6>\n<ul class=\"zemanta-article-ul zemanta-article-ul-image\" style=\"margin: 0; padding: 0; overflow: hidden;\">\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://www.haskellforall.com/2012/06/you-could-have-invented-free-monads.html\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/noimg_38_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://www.haskellforall.com/2012/06/you-could-have-invented-free-monads.html\" target=\"_blank\">Why free monads matter</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://scientopia.org/blogs/goodmath/2012/08/19/monads-and-programming/\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/107656675_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://scientopia.org/blogs/goodmath/2012/08/19/monads-and-programming/\" target=\"_blank\">Monads and Programming</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://www.haskell.org/haskellwiki/index.php?title=Monad_tutorials_timeline&amp;diff=49591&amp;oldid=prev\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/noimg_55_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://www.haskell.org/haskellwiki/index.php?title=Monad_tutorials_timeline&amp;diff=49591&amp;oldid=prev\" target=\"_blank\">Monad tutorials timeline</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://www.haskell.org/haskellwiki/index.php?title=Hask&amp;diff=49966&amp;oldid=prev\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/noimg_89_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://www.haskell.org/haskellwiki/index.php?title=Hask&amp;diff=49966&amp;oldid=prev\" target=\"_blank\">Hask</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://unfoldthat.com/2011/04/02/python-monads.html\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/noimg_12_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://unfoldthat.com/2011/04/02/python-monads.html\" target=\"_blank\">Python Monads &#8211; new approach</a></li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/?px\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=bb1fb710-d766-4afc-8466-3a22e2ebd230\" alt=\"Enhanced by Zemanta\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"b48cb607-b22d-5b72-a9ea-dc7a3fae3370"}}