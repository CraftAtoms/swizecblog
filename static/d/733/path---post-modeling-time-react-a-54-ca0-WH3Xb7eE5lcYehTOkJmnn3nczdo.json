{"data":{"wordpressPost":{"title":"Modeling time in React","content":"<img class=\"alignnone size-full wp-image-7198\" src=\"https://swizec.com/blog/wp-content/uploads/2016/11/clock-example.gif\" width=\"432\" height=\"151\" />\n<p>Ever wanted to build a timer in React? It&#8217;s a tricky thing.</p>\n<p>Ideally, React components rely only on their inputs ‚Äì the props ‚Äì so that they&#8217;re testable, reusable, and easier to understand. Time is the ultimate state, that global dependency that just won&#8217;t sit still.</p>\n<p>Calling <code>new Date()</code> or <code>moment()</code> to get the current time in your component makes it dirty. You can&#8217;t test because it throws unpredictable results depending on system context. You can&#8217;t reuse and re-render either. Damn thing keeps changing!</p>\n<p><em>And</em> you need some mechanism to keep refreshing that time state if you want your component to show something live. You can add a <code>setInterval</code> that runs <code>this.setState(moment())</code> every second, and that&#8217;s going to work. But if you show multiple timers on screen, they&#8217;re eventually going to diverge and look weird.</p>\n<h2>Crib from system/hardware design</h2>\n<p>Those problems have all been solved already in electronics and operating systems: it‚Äôs <a href=\"https://en.wikipedia.org/wiki/Clock_signal\">the clock signal</a> in electronics and <a href=\"https://en.wikipedia.org/wiki/System_time\">system time</a> in operating systems. Both reduce time to a stateful resource that everyone shares.</p>\n<p>The idea is this:</p>\n<ul>\n<li>make a <code>Clock</code> store</li>\n<li>emit an action every <code>period</code> milliseconds</li>\n<li>share <code>Clock</code> with everyone</li>\n</ul>\n<p>With this approach, time becomes just another prop passed or injected into components that need it. Components themselves can treat it like an immutable value, which makes them easy to test, and because all components rely on the same <code>setInterval</code>, they&#8217;re never going to fall out of sync.</p>\n<p>Let me show you.</p>\n<img class=\"alignnone size-full wp-image-7199\" src=\"https://swizec.com/blog/wp-content/uploads/2016/11/clock-actions.gif\" width=\"432\" height=\"258\" />\n<p>I&#8217;m going to use MobX, but the same approach should work with Redux and even the classical state-from-main-component-callbacks-up-components approach.</p>\n<p>You can see <a href=\"https://github.com/Swizec/mobx-clock-example\">the code on Github</a>.</p>\n<h2>Clock store</h2>\n<p>First, we need a <code>Clock</code> store. It looks like this:</p>\n<pre lang=\"javascript\">import { observable, action } from 'mobx';\nimport moment from 'moment';\n\nclass Clock {\n    @observable time = moment();\n\n    constructor(period = 1000) {\n        this.interval = setInterval(() =&gt; this.clockTick(),\n                                    period);\n    }\n\n    @action clockTick(newTime = moment()) {\n        this.time = newTime;\n    }\n}\n\nconst clock = new Clock();\n\nexport default clock;\n</pre>\n<p>We have an <code>@observable</code> <code>time</code> property, which means MobX is going to communicate changes to any <code>observer</code>s. The <code>constructor</code> starts an interval with the specified period. In our case, this is going to be a 1Hz clock updating once per second.</p>\n<p>We store the interval in <code>this.interval</code> so that we can stop it. This implementation doesn&#8217;t allow the clock to be stopped or reset, but it would be easy to add an action for that.</p>\n<p>Each tick of the clock triggers an <code>@action</code> called <code>clockTick</code>, which updates the <code>time</code> property to the current time. MobX is smart enough to let us naively replace it with a new instance of <code>moment()</code>, and I&#8217;m sure Redux would be too.</p>\n<p>The real trick to making this work is in the last two lines:</p>\n<pre lang=\"javascript\">const clock = new Clock();\n\nexport default clock;\n</pre>\n<p>We export <em>an instance of Clock</em>, not the class. This ensures that anywhere we use <code>import Clock</code>, we get the same singleton.</p>\n<p><em>&#8220;But inject()! You can inject() and that will make a singleton!‚Äù</em> I hear you thinking.</p>\n<p>Yes, but you can only <code>inject()</code> into React components. Sometimes <code>MobX</code> stores need access to The Clock as well. You can&#8217;t inject into those, but you <em>can</em> import stuff.</p>\n<h2>Time display</h2>\n<p><code>Clock</code> was the fun part. Let me show you that it&#8217;s easy to use üôÇ</p>\n<p>We make a <code>Time*</code> component that displays durations. It can be a functional stateless component that takes <code>Clock</code> from React contexts via <code>inject()</code> and renders a thing.</p>\n<pre lang=\"javascript\">\nconst CurrentTime = inject('Clock')(observer(({ Clock }) => (\n    <div>\n        Current Time: <Duration d={Clock.time} />\n    </div>\n)));\n</pre>\n<p>Observes changes on <code>Clock</code> state and gets <code>Clock</code> from the context with <code>inject</code>. You could inject a static object with a <code>time = N</code> property when testing.</p>\n<p>The <code>Duration</code> component takes a <code>moment()</code> object and displays it as a digital clock. Like this:</p>\n<pre lang=\"javascript\">const Duration = ({ d }) =&gt; {\n    let h = d.hours(),\n        m = d.minutes(),\n        s = d.seconds();\n\n    [h, m, s] = [h, m, s].map(n =&gt; n &lt; 10 ? `0${n}` : n);\n\n    return <code>{h}:{m}:{s}</code>;\n};\n</pre>\n<p>Take <code>hours</code>/<code>minutes</code>/<code>seconds</code> from the object, and prefix with a <code>0</code> when each is smaller than <code>10</code>. Yes, this breaks for negative values. It looks like this: <code>0-1:0-4:05</code>.</p>\n<p>But that shouldn&#8217;t be hard to fix ?</p>\n<p>In <a href=\"https://github.com/Swizec/mobx-clock-example\">the full code</a>, I built a generalized <code>Time</code> displays that defers to <code>TimeSince</code>, <code>TimeUntil</code>, and <code>CurrentTime</code> as necessary. Their code is almost identical, so I didn&#8217;t want to explain it all here.</p>\n<h2>Putting it together in App.js</h2>\n<p>Now that you have a system <code>Clock</code> and a way to show <code>Time</code>, you can put it all together inside your <code>App</code> like this:</p>\n<pre lang=\"javascript\">\nclass App extends Component {\n  render() {\n      return (\n          <Provider Clock={Clock}>\n              <div className=\"App\">\n                  <DevTools />\n                  <div className=\"App-intro\">\n                      <Time until={moment().add(10, 'minutes')} />\n                      <Time since={moment().subtract(5, 'minutes')} />\n                      <Time />\n                  </div>\n              </div>\n          </Provider>\n    );\n  }\n}\n</pre>\n<p><code>Provider</code> puts the <code>Clock</code> singleton in React context. This gives all your components access to the <code>Clock</code> via <code>inject()</code> and you can do anything you want with it.</p>\n<p>Cool, isn&#8217;t it?</p>\n<p><strong>And yes, it works in stores, too.</strong></p>\n<p>Check this out from my Day Job code.</p>\n<blockquote class=\"twitter-tweet\" data-width=\"550\">\n<p lang=\"en\" dir=\"ltr\">MobX lets you do really cool things. when() might just be my fav feature. <a href=\"https://t.co/nGDwmsOJ2c\">pic.twitter.com/nGDwmsOJ2c</a></p>\n<p>&mdash; Swizec (@Swizec) <a href=\"https://twitter.com/Swizec/status/795798444094853121\">November 8, 2016</a></p></blockquote>\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n<p>It&#8217;s in a store, <code>isOutOfTime</code> is a <code>@computed</code> property that compares <code>Clock.time</code> to some pre-defined deadline. <code>when()</code> the deadline passes, an <code>@action</code> is called.</p>\n<pre lang=\"javascript\">    @computed get timeLeft() {\n        if (this.should_end_by) {\n            return moment.duration(\n                this.should_end_by\n                                  .diff(Clock.time)\n                          );\n        }else{\n            return null;\n        }\n    }\n\n    @computed get isOutOfTime() {\n        return !_.isNull(this.timeLeft) &amp;&amp; this.timeLeft &lt;= 0;\n    }\n</pre>\n<p>Isn&#8217;t that cool? I think it&#8217;s cool. The code is easy to understand, easy to test, no messing around with intervals and relying on slippery system properties. Things just work‚Ñ¢.</p>\n<p>It&#8217;s almost like your codebase is in a time monad ?</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"8d68890a-d2de-5b1d-a2f4-3f51665bb83c"}}