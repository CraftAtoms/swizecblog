{"data":{"wordpressPost":{"title":"Seamlessly render a Preact component in a React project","content":"<p><iframe width=\"580\" height=\"326\" src=\"https://www.youtube.com/embed/sdxz_1A8zFk?feature=oembed\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe></p>\n<p>Have you ever wanted to render a <a href=\"https://preactjs.com/\">Preact</a> component inside a React project?</p>\n<p>It&#8217;s hard, right? First of all, why? <a href=\"https://swizec.com/blog/building-interactive-dom-benchmark-preliminary-results/swizec/8219\">Because</a>. Second of all, how do you reconcile the two different implementations of JSX?</p>\n<p>Preact and React are <a href=\"https://github.com/developit/preact/wiki/Differences-to-React\">pretty similar</a>, you see. Both are based on components, both leverage JSX to make your life easier, and for the most part, they look interchangeable.</p>\n<pre lang=\"javascript\">\n// React component\nimport React from 'react';\nconst Header => <h1>I am a header</h1>\n</pre>\n<pre lang=\"javascript\">\n// Preact component\nimport Preact from 'preact';\nconst Header => <h1>I am a header</h1>\n</pre>\n<p>Where they differ greatly is what that <code>&lt;h1&gt;I am a header&lt;/h1&gt;</code> compiles to. For React, it&#8217;s a <code>createElement()</code> call. For Preact ,it&#8217;s a <code>h()</code> call.</p>\n<p>And that&#8217;s where the trouble begins.</p>\n<h2>Reconciling createElement() and h()</h2>\n<p>I got this idea from Jason himself.</p>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">Set your pragma to `h` and conditionally assign h within the scope you want:</p>\n<p>/** <a href=\"https://twitter.com/jsx?ref_src=twsrc%5Etfw\">@jsx</a> h */<br />import React from &#39;react&#39;<br />import { h } from &#39;preact&#39;</p>\n<p>const WithReact = () =&gt; {<br />  let h = React.createElement;<br />  return &lt;div&gt;react&lt;/div&gt;<br />}</p>\n<p>const WithPreact = () =&gt; (<br />  &lt;div&gt;preact&lt;/div&gt;<br />)</p>\n<p>&mdash; Jason Miller ðŸ¦Šâš› (@_developit) <a href=\"https://twitter.com/_developit/status/968143181694033921?ref_src=twsrc%5Etfw\">February 26, 2018</a></p></blockquote>\n<p>Here&#8217;s how it looks in code ðŸ‘‡</p>\n<img class=\"alignnone size-full wp-image-8223\" src=\"https://swizec.com/blog/wp-content/uploads/2018/02/react-wrap-preact.png\" width=\"1290\" height=\"1138\" srcset=\"https://swizec.com/blog/wp-content/uploads/2018/02/react-wrap-preact.png 1290w, https://swizec.com/blog/wp-content/uploads/2018/02/react-wrap-preact-300x265.png 300w, https://swizec.com/blog/wp-content/uploads/2018/02/react-wrap-preact-768x678.png 768w, https://swizec.com/blog/wp-content/uploads/2018/02/react-wrap-preact-1024x903.png 1024w\" sizes=\"(max-width: 1290px) 100vw, 1290px\" />\n<p>There are 4 parts to this:</p>\n<ol>\n<li>Tell Babel to use <code>h</code> for the JSX function. That&#8217;s the <code>/** @jsx h */</code> magic comment at the top.</li>\n<li>Import both React and Preact. You&#8217;ll need both.</li>\n<li>Make a Preact component. Or take one from somewhere else. It doesn&#8217;t matter. Whatever you want ðŸ™‚</li>\n<li>Create a <code>&lt;Wrapper /&gt;</code> React component</li>\n</ol>\n<p>That <code>&lt;Wrapper /&gt;</code> component is where the magic happens.</p>\n<p>The <code>render()</code> method sets <code>h</code> to <code>React.createElement</code> and outputs an anchor div. Setting <code>h</code> ensures that this part of JSX compiles into React&#8217;s <code>createElement</code> calls. This makes the component integrate seamlessly with the rest of your project.</p>\n<p>Then we hook into the component lifecycle with <code>componentDidMount</code> and <code>componentDidUpdate</code>. We call <code>renderPreact</code> in both of them to ensure our wrapper component always ends up rendering Preact.</p>\n<p>Same as my <a href=\"https://swizec.com/blog/translate-random-d3-example-react/swizec/7765\">React D3 blackbox</a> approach for quickly wrapping D3 code in React components.</p>\n<p>In <code>renderPreact</code>, we then use Preact&#8217;s <code>render()</code> function to render the Preact component into our anchor div. This works the same way as Preact&#8217;s normal DOM rendering where you call <code>render(&lt;App /&gt;, document.getElementById('root'))</code> to put your app into a root div.</p>\n<p>The JSX compiles into Preact&#8217;s <code>h()</code> calls because we didn&#8217;t mess with the setting, and React refs give us a direct reference to the anchor DOM node.</p>\n<p>ðŸ‘Œ</p>\n<img src=\"https://media.giphy.com/media/r0tGmQTClFyms/giphy.gif\" />\n<h2>The benchmark</h2>\n<p>You can now compare React and Preact side-by-side in my <a href=\"https://dom-benchmark.now.sh/\">interactive DOM benchmark</a>. I think it&#8217;s a fair comparison because Preact handles its own internals.</p>\n<img class=\"alignnone size-full wp-image-8222\" src=\"https://swizec.com/blog/wp-content/uploads/2018/02/preact-dom.gif\" width=\"772\" height=\"495\" />\n<p>Numbers are kinda high though. Preact is supposed to be faster than React because it&#8217;s closer to the metal. I wonder if it&#8217;s running in dev mode ðŸ¤”</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"bcd9eb96-c049-52b0-85eb-0891fb28d7a7"}}