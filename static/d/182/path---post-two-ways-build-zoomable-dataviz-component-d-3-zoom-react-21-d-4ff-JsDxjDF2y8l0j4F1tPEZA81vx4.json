{"data":{"wordpressPost":{"title":"The two ways to build a zoomable dataviz component with d3.zoom and React","content":"<p>A question I often get is this: <em>&#8220;How do you build a zoomable dataviz component?&#8221;</em></p>\n<p>Well, you use <a href=\"https://github.com/d3/d3-zoom\">d3.zoom</a>. That gives you <code>zoom</code> events for pinch-to-zoom and the mousewheel. Detects panning too. Just like your users expect from everything else that zooms.</p>\n<p>Then what?</p>\n<p>Then you have a choice to make. Do you want to zoom your whole component like it was an image, or do you want to zoom the space between your datapoints? The first looks pretty, the second gives users a chance to see more detail.</p>\n<p>In a side-by-side comparison, the two zoom effects look like this ðŸ‘‡</p>\n<img class=\"aligncenter size-full wp-image-7754\" src=\"https://swizec.com/blog/wp-content/uploads/2017/08/two-different-zooms.gif\" alt=\"Two ways to zoom with React and d3.zoom\" /><img src=\"two-zoom.gif\" alt=\"\" />\n<p>Both scatterplots use the same random data. Left side zooms like an image, right side zooms the space between datapoints. It even works on a phone, look.</p>\n<blockquote class=\"imgur-embed-pub\" lang=\"en\" data-id=\"a/DHceJ\"><p><a href=\"//imgur.com/DHceJ\"></a></p></blockquote>\n<p><script async src=\"//s.imgur.com/min/embed.js\" charset=\"utf-8\"></script></p>\n<p>So how do you make that?</p>\n<p>You&#8217;ll need:<br />\n&#8211; 2 React components<br />\n&#8211; 2 D3 scales<br />\n&#8211; 1 D3 zoom<br />\n&#8211; 1 D3 random number generator<br />\n&#8211; 1 line of HTML<br />\n&#8211; 5 lines of CSS<br />\n&#8211; some event hooks<br />\n&#8211; a sprinkle of state<br />\n&#8211; a few props</p>\n<p>Here we go ðŸ¤˜</p>\n<p class='codepen'  data-height='426' data-theme-id='0' data-slug-hash='XaBrym' data-default-tab='js,result' data-animations='run' data-editable='true' data-embed-version='2' data-preview='true'>\nSee the Pen <a href=\"https://codepen.io/swizec/pen/XaBrym/\">Two different zooms with D3 and React</a> by Swizec Teller (<a href=\"https://codepen.io/swizec\">@swizec</a>) on <a href=\"https://codepen.io\">CodePen</a>.0</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n<h2>&lt;Chart /&gt; component talks to d3.zoom</h2>\n<p>Our <code>&lt;Chart /&gt;</code> component renders two scatterplots and talks to <code>d3.zoom</code> to zoom them. This way we can use a single zoom behavior for the entire SVG, which makes the scatterplots zoom in unison.</p>\n<p>I also found it more reliable than attaching <code>d3.zoom</code> to individual <code>&lt;g&gt;</code> elements, but couldn&#8217;t figure out why. I think it assumes internally that it&#8217;s working on a whole SVG element.</p>\n<pre lang=\"javascript\">const random = d3.randomNormal(5, 1);\nclass Chart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: d3.range(200).map(_ => [random(), random()]),\n      zoomTransform: null\n    }\n    this.zoom = d3.zoom()\n                  .scaleExtent([-5, 5])\n                  .translateExtent([[-100, -100], [props.width+100, props.height+100]])\n                  .extent([[-100, -100], [props.width+100, props.height+100]])\n                  .on(\"zoom\", this.zoomed.bind(this))\n  }\n  componentDidMount() {\n    d3.select(this.refs.svg)\n      .call(this.zoom)\n  }\n  componentDidUpdate() {\n    d3.select(this.refs.svg)\n      .call(this.zoom)\n  }\n  zoomed() {\n    this.setState({ \n      zoomTransform: d3.event.transform\n    });\n  }\n  render() {\n    const { zoomTransform } = this.state,\n          { width, height } = this.props;\n    \n    return (\n      <svg width={width} height={height} ref=\"svg\">\n        <Scatterplot data={this.state.data}\n                     x={0} y={0} \n                     width={width/2}\n                     height={height}\n                     zoomTransform={zoomTransform}\n                     zoomType=\"scale\" />\n        <Scatterplot data={this.state.data}\n                     x={width/2} y={0}\n                     width={width/2}\n                     height={height}\n                     zoomTransform={zoomTransform}\n                     zoomType=\"detail\" />\n      </svg>\n    )\n  }\n}\n</pre>\n<p>Our chart component breaks down into 4 parts:</p>\n<ol>\n<li>We use the <code>constructor</code> to generate random <code>[x, y]</code> coordinate pairs and a <code>d3.zoom</code> behavior. <code>scaleExtent</code> defines min and max scaling factor â€“ from <code>-5</code> to <code>5</code> â€“ and <code>translateExtent</code> and <code>extent</code> define movement boundaries. How much do we allow our chart to move around while zooming? We use <code>100px</code> in every direction.</li>\n<li>In <code>componentDidMount</code> and <code>componentDidUpdate</code>, we call our zoom behavior on the rendered SVG. This attaches touch, drag, and scroll events to the DOM. D3 normalizes them into a single <code>zoom</code> event for us.</li>\n<li>The <code>zoomed</code> function is our zoom event callback. We update component state with <code>d3.event.transform</code>, which is where D3 puts the information we need to zoom our chart.</li>\n<li>Our <code>render</code> method draws two <code>&lt;Scatterplot /&gt;</code> components inside an <code>&lt;svg&gt;</code> element and gives them some props.</li>\n</ol>\n<h2>&lt;Scatterplot /&gt; component draws datapoints and zooms itself</h2>\n<p>The <code>&lt;Scatterplot /&gt;</code> component follows the full integration approach I outline in <a href=\"https://www.swizec.com/reactd3js\">React+D3v4</a>. We have D3 stuff in an <code>updateD3</code> function and we call it when props change to update the internal states of D3 objects.</p>\n<p>One complication we run into is that we use the same scatterplot component for two different types of zoom. That means some bloat, but it&#8217;s manageable.</p>\n<pre lang=\"javascript\">\nclass Scatterplot extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateD3(props);\n  }\n  componentWillUpdate(nextProps) {\n    this.updateD3(nextProps);\n  }\n  updateD3(props) {\n    const { data, width, height, zoomTransform, zoomType } = props;\n    \n    this.xScale = d3.scaleLinear()\n                    .domain([0, d3.max(data, ([x, y]) => x)])\n                    .range([0, width]),\n    this.yScale = d3.scaleLinear()\n                    .domain([0, d3.max(data, ([x, y]) => y)])\n                    .range([0, height]);\n    \n    if (zoomTransform && zoomType === \"detail\") {\n      this.xScale.domain(zoomTransform.rescaleX(this.xScale).domain());\n      this.yScale.domain(zoomTransform.rescaleY(this.yScale).domain());\n    }\n  }\n  get transform() {\n    const { x, y, zoomTransform, zoomType } = this.props;\n    let transform = \"\";\n    \n    if (zoomTransform && zoomType === \"scale\") {\n      transform = `translate(${x + zoomTransform.x}, ${y + zoomTransform.y}) scale(${zoomTransform.k})`;\n    }else{\n      transform = `translate(${x}, ${y})`;\n    }\n    \n    return transform;\n  }\n  render() {\n    const { data } = this.props;    \n \n    return (\n      <g transform={this.transform} ref=\"scatterplot\">\n        {data.map(([x, y]) => <circle cx={this.xScale(x)} cy={this.yScale(y)} r={4} />)}\n      </g>\n    )\n  }\n}\n</pre>\n<p>Much like the <code>&lt;Chart /&gt;</code> component, you can think of <code>&lt;Scatterplot /&gt;</code> as having 4 parts:</p>\n<ol>\n<li><code>constructor</code> and <code>componentWillUpdate</code> call <code>updateD3</code> with fresh props to update internal D3 state</li>\n<li><code>updateD3</code> sets up two linear scales for us. <code>xScale</code> translates between data values and horizontal coordinates, <code>yScale</code> translates between data values and vertical coordinates</li>\n<li>The third part is split between the bottom of <code>updateD3</code> and <code>get transform</code>. It handles zooming.</li>\n</ol>\n<p>Inside <code>updateD3</code> we zoom the space between datapoints by changing our scale&#8217;s domains. <code>zoomTransform.rescaleX</code> takes a scale and returns a changed scale. We take its domain and update <code>xScale</code>. Same for <code>yScale</code>. This updates both the scatterplot&#8217;s positioning and spacing between datapoints.</p>\n<p>This will never make intuitive sense to me, but it works.</p>\n<p><code>get transform</code> also handles zooming. It creates an SVG <code>transform</code> attribute which we use to position and scale a scatterplot. We use <code>translate()</code> to move a chart into position and <code>scale()</code> to make it bigger or smaller depending on the factor <code>zoomTransform</code> gives us.</p>\n<p>Even if we&#8217;re not zooming, we still <code>translate()</code> the chart so that we can move it around the page and show two scatterplots side by side.</p>\n<ol>\n<li>The fourth part is our <code>render</code> method. It creates a grouping element, walks through our data and renders circles.</li>\n</ol>\n<p>You can play with this example on CodePen.</p>\n<p class='codepen'  data-height='426' data-theme-id='0' data-slug-hash='XaBrym' data-default-tab='js,result' data-animations='run' data-editable='true' data-embed-version='2' data-preview='true'>\nSee the Pen <a href=\"https://codepen.io/swizec/pen/XaBrym/\">Two different zooms with D3 and React</a> by Swizec Teller (<a href=\"https://codepen.io/swizec\">@swizec</a>) on <a href=\"https://codepen.io\">CodePen</a>.0</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n<p>To learn more about putting React and D3v4 together, <a href=\"https://www.swizec.com/reactd3js\">check out my new book, React+D3v4</a></p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"580703a5-53c2-527a-98dd-77fe81ecbafd"}}