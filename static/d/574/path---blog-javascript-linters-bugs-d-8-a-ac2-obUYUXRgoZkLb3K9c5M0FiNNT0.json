{"data":{"wordpressPost":{"title":"How JavaScript linters cause bugs","content":"<img src=\"https://swizec.com/blog/wp-content/uploads/2017/09/DJoDVIiVYAAOcPs.jpg-large.jpeg\" alt=\"\" class=\"alignnone size-full wp-image-7805\" srcset=\"https://swizec.com/blog/wp-content/uploads/2017/09/DJoDVIiVYAAOcPs.jpg-large.jpeg 470w, https://swizec.com/blog/wp-content/uploads/2017/09/DJoDVIiVYAAOcPs.jpg-large-300x244.jpeg 300w\" sizes=\"(max-width: 470px) 100vw, 470px\" />\n<p>I was doing code review for a coworker yesterday, and it soon became obvious that he used a linter and that the linter gave him a bright idea: <em>use strict comparisons</em>.</p>\n<p>Using strict comparisons is a great rule to follow. <code>===</code> instead of <code>==</code>, <code>!==</code> instead of <code>!=</code>. Your life will be better.</p>\n<p>You&#8217;re ensuring not only that your <em>values</em> are equal or unequal, you ensure their <em>types</em> match as well. Because <a href=\"https://www.destroyallsoftware.com/talks/wat\">JavaScript has funny types</a>, strict comparison lets you avoid painful pain.</p>\n<p>Things like this:</p>\n<pre><code>&gt; \"0\" == 0\ntrue\n</code></pre>\n<p>And like this:</p>\n<pre><code>&gt; true == 1\ntrue\n&gt; false == 0\ntrue\n</code></pre>\n<p>Even things as silly as this:</p>\n<pre><code>&gt; new Array() == 0\ntrue\n&gt; [] == 0\ntrue\n</code></pre>\n<p>Run a linter on those examples, and it will sagely say <em>&#8220;Dude, use strict comparison. ALWAYS use strict comparison.”</em></p>\n<p>And your linter would be right. <code>===</code> fixes all of those examples.</p>\n<pre><code>&gt; \"0\" === 0\nfalse\n&gt; true === 1\nfalse\n&gt; false === 0\nfalse\n&gt; new Array() === 0\nfalse\n&gt; [] === 0\nfalse\n</code></pre>\n<p>👌 Problem solved. 👌</p>\n<p>But here&#8217;s one situation where it gets tricky. Checking undefinedness:</p>\n<pre><code>&gt; null == undefined\ntrue\n&gt; null === undefined\nfalse\n</code></pre>\n<p>Under loose comparison, <code>null</code> and <code>undefined</code> are equal. Under strict, they&#8217;re not.</p>\n<p>This can cause all sorts of issues.</p>\n<p>Here are some examples I found in my coworker&#8217;s PR. 👇</p>\n<pre><code>const url = $(elem).data('url')\nif (url !== null) {\n    // ...\n}\n</code></pre>\n<p>But if your <code>elem</code> doesn&#8217;t have a <code>data-url=\"...\"</code> attribute, jQuery returns <code>undefined</code>, not <code>null</code>. Strict comparison fails.</p>\n<p>A better approach is to use <code>if (url)</code> because <code>undefined</code> is falsey and so is an empty string. That makes your code robust against <code>data-url=\"\"</code> 🙂</p>\n<pre><code>function scroll({ elem, offset, duration }) {\n    duration = duration !== null ? duration : 2000;\n}\n</code></pre>\n<p>But if you call <code>scroll()</code> without duration, it&#8217;s <code>undefined</code>, and your code breaks. No default duration for you. A better approach is to use destructuring defaults, like this: <code>function scroll({ elem, offset, duration = 2000 })</code>.</p>\n<pre><code>function get_id(widget) {\n    let id = widget.id;\n    if (id !== null) {\n        // ...\n    }\n}\n</code></pre>\n<p>But reading an inexistent object property returns <code>undefined</code>, not <code>null</code>, and this code breaks. Once more, you&#8217;re better of relying on inherent falsiness 👉 <code>if (id)</code>.</p>\n<pre><code>function createWidget(defaultText, onClick, markBusy) {\n    new Widget({\n        text: defaultText,\n        onClick: onClick,\n        markBusy: markBusy !== null &amp;&amp; markBusy\n    })\n}\n</code></pre>\n<p>This one is tricky. It&#8217;s trying to pass <code>markBusy</code> into the <code>Widget</code> constructor, but only if it&#8217;s defined. You can&#8217;t use default param values because there&#8217;s no destructuring so hmm… 🤔</p>\n<p>Then again, the whole exercise is futile. You can achieve the same effect if you rely on inherent falseyness: <code>markBusy: !!markBusy</code>.</p>\n<p>I guess my point is that you have to be careful. Don&#8217;t blindly trust your linter when it says change <code>this code</code> to <code>that code</code>.</p>\n<p>Happy hacking 🤓</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"556589da-1de1-5fab-9692-d652af82d290"}}