{"data":{"wordpressPost":{"title":"Strangest line of python you have ever seen","content":"<div style=\"width: 310px\" class=\"wp-caption alignright\"><a href=\"http://commons.wikipedia.org/wiki/File:NFAexample.svg\"><img class=\"zemanta-img-inserted zemanta-img-configured\" title=\"An example of a NFA state diagram.\" src=\"http://swizec.com/blog/wp-content/uploads/2011/11/300px-NFAexample.svg_1.png\" alt=\"An example of a NFA state diagram.\" width=\"300\" height=\"276\" /></a><p class=\"wp-caption-text\">Image via Wikipedia</p></div>\n<p>The other day <a href=\"http://twitter.com/HairyFotr\" target=\"_blank\">@HairyFotr</a> and <a href=\"http://twitter.com/zidarsk8\" target=\"_blank\">@zidarsk8</a> were doing some <a href=\"http://en.wikipedia.org/wiki/Code_golf\" target=\"_blank\">codegolfing</a> with implementations of <a class=\"zem_slink\" title=\"Nondeterministic finite-state machine\" href=\"http://en.wikipedia.org/wiki/Nondeterministic_finite-state_machine\" rel=\"wikipedia\">nondeterministic finite state machine</a>and asked me to blog their results.</p>\n<p>For those of us who often forget what all of this computer science mumbo jumbo means, here&#8217;s a quick explanation from wikipedia:</p>\n<blockquote><p>In the <a title=\"Theory of computation\" href=\"http://en.wikipedia.org/wiki/Theory_of_computation\">theory of computation</a>, a <strong>nondeterministic finite state machine</strong> or <strong>nondeterministic finite automaton (NFA)</strong> is a <a title=\"Finite state machine\" href=\"http://en.wikipedia.org/wiki/Finite_state_machine\">finite state machine</a> where for each pair of state and input symbol there may be several possible next states.</p></blockquote>\n<p>Essentially they were looking for the shortest implementation of an algorithm that can take a bunch of states, go through all of them on each step and then backtrack to find the solution.</p>\n<p>@zidarsk8 doesn&#8217;t really know python all that well so his way to optimize things was basically &#8220;SHORTEN ALL THE CODES!&#8221; and as a result he came up with this line <em>nobody</em> understands.</p>\n<pre lang=\"python\">state = [st for s in state for st in states[(s,letter)]]</pre>\n<p>At first it looks just like a double loop. But then you notice the right-most for is taking the list to iterate over from its own body, which is the iterator of the left-most for loop &#8230;</p>\n<p>What?</p>\n<p>Seriously, if you can explain how this works you win a lot of internets, eternal fame and I might just send you a box of cookies.</p>\n<p>Here&#8217;s the whole implementation in case you were wondering</p>\n<pre lang=\"python\">from optparse import OptionParser\r\nfrom collections import defaultdict\r\n\r\ndef run(beseda):\r\n       a, states = open(\"machine.txt\") ,defaultdict(list)\r\n       state, final= a.readline().split()[1:],a.readline().split()[1:]\r\n       [states[(i.split()[0], i.split()[1])].append(i.split()[3]) for i in a]\r\n       for letter in word:\r\n               state = [st for s in state for st in states[(s,letter)]]\r\n       return any(i in state for i in final)\r\n\r\nprint [(b,\"YES\") if run(b) else (b,\"NO\") for b in OptionParser().parse_args()[1]]</pre>\n<p>According to our best debugging efforts it works as advertised &#8230; even though we can&#8217;t actually understand <em>why</em> or how it&#8217;s even possible that python knows what to do.</p>\n<p>For curiosity&#8217;s sake, here&#8217;s @HairyFotr&#8217;s <a class=\"zem_slink\" title=\"Scala (programming language)\" href=\"http://www.scala-lang.org/\" rel=\"homepage\">Scala</a> implementation</p>\n<pre lang=\"scala\">object NKA extends App {\r\n    import scala.collection.mutable._\r\n    val gates = new HashMap[(String,Char), ListBuffer[String]]\r\n    val lines = io.Source.fromFile(\"avtomat.txt\").getLines.toSeq\r\n    val (init,finals) = (lines(0).split(\" \")(1),lines(1).split(\" \").tail)\r\n    lines.tail.tail.map(_.split(\" \")).foreach \r\n        {s =&gt; gates.getOrElseUpdate((s(0),s(1)(0)), ListBuffer()) += s(3)}\r\n\r\n    def crawl(state:String, input:String):Boolean = \r\n        (input!=\"\" &amp;&amp; (false /: gates.getOrElse((state,input(0)), return false))\r\n            {_ || crawl(_, input.tail)}) || (input==\"\" &amp; finals.contains(state))\r\n\r\n    args.foreach(in =&gt; println(in + (if(crawl(init,in)) \": YES\" else \": NO\")))</pre>\n<p>If you ask me, this looks like a bunch of gibberish and even HairyFotr says it isn&#8217;t the prettiest Scala code out there. But hey, this is codegolf, all that matters is minimizing those keystrokes!</p>\n<p>To conclude, two challenges:</p>\n<ol>\n<li>Explain how that line of python works</li>\n<li>Come up with a shorter solution &#8230; I&#8217;m guessing golfscript is a good choice</li>\n</ol>\n<p>PS: I was serious about those cookies</p>\n<p>PPS: an example of what the automata decription looks like <a href=\"http://pastebin.com/QLW1BfFj\">http://pastebin.com/QLW1BfFj</a></p>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles</h6>\n<ul class=\"zemanta-article-ul\">\n<li class=\"zemanta-article-ul-li\"><a href=\"http://nikhatshahin.wordpress.com/2011/11/13/when-should-we-use-a-sequential-workflow-and-when-should-we-use-state-machines/\">when should we use a sequential workflow and when should we use state machines?</a> (nikhatshahin.wordpress.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://markusjais.com/why-scala-seems-difficult-but-reallyisnt/\">Why Scala seems difficult but really isn&#8217;t</a> (markusjais.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://xlinux.nist.gov/dads//\">Dictionary of Algorithms and Datastructures</a> (xlinux.nist.gov)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://eli.thegreenplace.net/2011/10/28/an-observation-on-writing-line-processing-loop-code/\">An observation on writing line-processing loop code</a> (eli.thegreenplace.net)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://minimalj.wordpress.com/2011/09/05/non-deterministic-infinite-state-automaton/\">Non-Deterministic Infinite-State Automaton</a> (minimalj.wordpress.com)</li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=7d434145-b98a-4e4d-894d-432c5ab1fdcc\" alt=\"Enhanced by Zemanta\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"687431fc-d83d-5ee7-b9ce-ca4a7113192e"}}