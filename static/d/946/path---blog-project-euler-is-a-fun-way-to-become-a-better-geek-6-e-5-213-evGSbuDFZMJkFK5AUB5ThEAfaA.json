{"data":{"wordpressPost":{"title":"Project euler is a fun way to become a better geek","content":"<div class=\"zemanta-img\" style=\"margin: 1em; display: block;\">\n<div style=\"width: 229px\" class=\"wp-caption alignright\"><a href=\"http://commons.wikipedia.org/wiki/File:Leonhard_Euler.jpg\"><img title=\"By 1772, Leonhard Euler had proved that 2,147,...\" src=\"http://upload.wikimedia.org/wikipedia/commons/d/d7/Leonhard_Euler.jpg\" alt=\"By 1772, Leonhard Euler had proved that 2,147,...\" width=\"219\" height=\"283\" /></a><p class=\"wp-caption-text\">Image via Wikipedia</p></div>\n</div>\n<p>Yesterday I was a bit bored at the Theoretical Basis Of Computer Science classÂ and the obvious solution was to try doing a bit of coding on an algorithm I&#8217;m trying to develop that aims to learn the proper <a class=\"zem_slink freebase/en/syllabification\" title=\"Syllabification\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Syllabification\">syllabification</a> for a language by reading it. Because I&#8217;m all sorts of cool I want to develop this thing in <a class=\"zem_slink freebase/en/clojure\" title=\"Clojure\" rel=\"homepage\" href=\"http://clojure.org\">Clojure</a>.</p>\n<p>Naturally, the moment I started my severe lack of proficiency in clojure started showing through and I found myself spending more time online than coding. Somehow I ended up on stackoverflow where some guy suggested to another guy they go through the <a class=\"zem_slink freebase/en/project_euler\" title=\"Project Euler\" rel=\"homepage\" href=\"http://projecteuler.net/\">Project Euler</a> problem set to get better at Clojure.</p>\n<p>And so I did just that.</p>\n<p>Have only managed to solve the first three problems so far, but by god this crap is fun. Maybe I&#8217;m just being way too dorky, but it&#8217;s #WINNING!</p>\n<p>Me being me, I&#8217;ve decided to motivate myself to solving these by posting a solution on this blog every time I solve a problem.</p>\n<p>Here are the first three, probably less than elegant, but they&#8217;re mine and I love them!</p>\n<pre lang=\"lisp\">;If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\r\n;Find the sum of all the multiples of 3 or 5 below 1000.\r\n\r\n(defn nums [max n]\r\n  (loop [cnt (+ n n) acc [n]]\r\n    (if (&gt;= cnt max) acc\r\n\t(recur (+ cnt n) (concat acc [cnt])))))\r\n\r\n(defn answer [max]\r\n  (println (reduce + (set (concat (nums max 3) (nums max 5))))))\r\n\r\n(answer 1000)</pre>\n<pre lang=\"lisp\">;Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\r\n;1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\r\n;By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.\r\n\r\n(defn term [p-2 p-1]\r\n  (+ p-2 p-1))\r\n\r\n(defn fib [max p-2 p-1 acc]\r\n  (if (&gt;= p-1 max) acc\r\n      (fib max p-1 (term p-2 p-1) (concat acc [p-1]))))\r\n\r\n(defn fibonacci [max p-2 p-1]\r\n  (fib max p-2 p-1 [1]))\r\n\r\n(defn bla [a]\r\n  (if (even? a) a 0))\r\n\r\n(defn answer [max]\r\n  (reduce + (map #(if (even? %1) %1 0) (fibonacci max 1 2))))\r\n\r\n(println (answer 4000000))</pre>\n<pre lang=\"lisp\">; The prime factors of 13195 are 5, 7, 13 and 29.\r\n; What is the largest prime factor of the number 600851475143 ?\r\n\r\n(defn any? [l]\r\n  (reduce #(or %1 %2) l))\r\n\r\n(defn prime? [n known]\r\n  (loop [cnt (dec (count known)) acc []]\r\n    (if (&lt; cnt 0) (not (any? acc)) \t(recur (dec cnt) (concat acc [(zero? (mod n (nth known cnt)))]))))) (defn next-prime [primes]   (let [n (inc (count primes))]     (let [lk (if (even? (inc (last primes))) (+ 2 (last primes)) (inc (last primes)))]       (loop [cnt lk p primes] \t(if (&gt;= (count p) n) (last p)\r\n\t    (recur (+ cnt 2) (if (prime? cnt p) (concat p [cnt]) p)))))))\r\n\r\n(memoize next-prime)\r\n\r\n(defn n-primes [n]\r\n  (loop [cnt 1 p [2]]\r\n    (if (&gt;= cnt n) p\r\n\t(recur (inc cnt) (concat p [(next-prime p)])))))\r\n\r\n(defn factor [n factors primes]\r\n  (if (== n 1) factors\r\n      (loop [p primes]\r\n\t(if (== 0 (mod n (last p))) (factor\r\n\t\t\t\t     (/ n (last p))\r\n\t\t\t\t     (concat [(last p)] factors)\r\n\t\t\t\t     p)\r\n\t    (recur (concat p [(next-prime p)]))))))\r\n\r\n(println (factor 600851475143 [] (n-primes 1)))</pre>\n<p>The third one took particularly long to figure out because I was going about it all wrong. What I later realized was that I don&#8217;t at all have to spend time finding the next prime for the sequence of already known primes because factorization doesn&#8217;t have to be that complicated. Could just have gone through the number and anything it would divide by would already be a guaranteed prime.</p>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles</h6>\n<ul class=\"zemanta-article-ul\">\n<li class=\"zemanta-article-ul-li\"><a href=\"http://www.chicagonow.com/blogs/redeye-puzzler/2011/01/algorithmic-problem-solving-at-project-euler.html\">Algorithmic problem-solving at Project Euler</a> (chicagonow.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://jsomers.net/blog/project-euler-problem-191-or-how-i-learned-to-stop-counting-and-love-induction\">Project Euler problem 191, or, how I learned to stop counting and love induction</a> (jsomers.net)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://stackoverflow.com/questions/2888041/learning-functional-clojure-programming-practical-excersises\">Learning functional/clojure programming &#8211; practical excersises?</a> (stackoverflow.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://webmaths.wordpress.com/2011/01/05/the-art-of-problem-solving/\">The Art of Problem Solving</a> (webmaths.wordpress.com)</li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=a5eeb452-e279-40b5-af44-b543f21f7cae\" alt=\"Enhanced by Zemanta\" /></a><span class=\"zem-script more-related more-info pretty-attribution\"><script src=\"http://static.zemanta.com/readside/loader.js\" type=\"text/javascript\"></script></span></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"f8120186-4795-54ee-a275-a025fd304b1e"}}