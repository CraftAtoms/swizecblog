{"data":{"wordpressPost":{"title":"Simple trick that lets you code twice as fast","content":"<div style=\"width: 448px\" class=\"wp-caption alignnone\"><img class=\"  \" title=\"Basic idea from THE Bret Victor talk\" src=\"http://icant.co.uk/talks/h5/pictures/smashingconf/shorterjourney.jpg\" alt=\"Basic idea from THE Bret Victor talk\" width=\"438\" height=\"270\" /><p class=\"wp-caption-text\">Basic idea from THE Bret Victor talk</p></div>\n<p>Immediate feedback.</p>\n<p>No really, it&#8217;s that simple.</p>\n<p>Most of our a developer&#8217;s revolves around verifying code. After <a title=\"I’ve hit a glass ceiling of coding productivity. Now what?\" href=\"http://swizec.com/blog/ive-hit-a-glass-ceiling-of-coding-productivity-now-what/swizec/5191\">hitting the limit of how fast you can type</a>, the only way to think faster is getting feedback instantly.</p>\n<p>There&#8217;s actually two parts to this trick.</p>\n<h2>1. Automated testing</h2>\n<p>First of all, you should write tests. No need for full on TDD writing tests before writing code, just have tests, <em>any</em> tests. Because eventually you will want to know if this thing you&#8217;ve just coded works.</p>\n<p>Your first test is: does it run?</p>\n<div id=\"attachment_5386\" style=\"width: 317px\" class=\"wp-caption alignright\"><a href=\"http://swizec.com/blog/wp-content/uploads/2012/10/mocha-testing.png\"><img class=\" wp-image-5386  \" title=\"Mocha automated automated testing\" src=\"http://swizec.com/blog/wp-content/uploads/2012/10/mocha-testing.png\" alt=\"Mocha automated automated testing\" width=\"307\" height=\"465\" /></a><p class=\"wp-caption-text\">Mocha automated automated testing</p></div>\n<p>The next test is: does it do what it&#8217;s supposed to?</p>\n<p>Without an automated <a class=\"zem_slink\" title=\"Test suite\" href=\"http://en.wikipedia.org/wiki/Test_suite\" rel=\"wikipedia\" target=\"_blank\">test suite</a> this one is tricky. It takes <em>ages</em>. <em>Decades </em>compared to how easy it was to write. At worst, you have to check your whole program after every change. Good design alleviates a lot of this burden due to isolation, but still &#8230; effort.</p>\n<p>I still remember when every change meant some 20 minutes of clicking around to check if things worked. And I only remembered to click around the thing I just changed, never you mind any ripple effects in the codebase.</p>\n<p>Horror.</p>\n<p>Automated testing reduces those 20 minutes to, say, 30 seconds.</p>\n<p>Your life becomes:</p>\n<ol>\n<li>Write some code</li>\n<li>Hop into a console of some sort</li>\n<li>Possibly compile things</li>\n<li>Run the test suite</li>\n<li>Wait while it runs</li>\n<li>Give in to the urge to quickly check twitterredditfacebooksomething</li>\n<li>Go back to coding long after the tests finished</li>\n</ol>\n<p>Great, it&#8217;s just taken a minute (not counting twitterredditfacebooksomething time) to find out if something works. I do this every ~5 minutes, that means a waste of 10 minutes per every hour worked.</p>\n<h2>2. Automated automated testing</h2>\n<p>One hour and twenty minutes every full workday.</p>\n<p>Man, that&#8217;s some non-negligible time right there!</p>\n<p>Then again, I&#8217;ve got an automated test suite, why am I running it manually? Wouldn&#8217;t it be better if something ran the test suite every time I hit <em>Ctrl+S</em>?</p>\n<p>And that&#8217;s exactly how it&#8217;s supposed to be!</p>\n<p>Let <a class=\"zem_slink\" title=\"Test automation\" href=\"http://en.wikipedia.org/wiki/Test_automation\" rel=\"wikipedia\" target=\"_blank\">automated testing</a> run automatically and just glance at the results every so often. You won&#8217;t break concentration, you won&#8217;t be tempted to check twitter while the tests run, you won&#8217;t have to get out of your <a class=\"zem_slink\" title=\"Text editor\" href=\"http://en.wikipedia.org/wiki/Text_editor\" rel=\"wikipedia\" target=\"_blank\">text editor</a>.</p>\n<p>Win-win-win.</p>\n<p>Right now I use two tools to do this (and am looking for more)</p>\n<p><a href=\"http://visionmedia.github.com/mocha/\" target=\"_blank\">Mocha</a>&#8216;s got a wonderful <em>-w</em> option for running node.js tests &#8211; it watches files for changes and reruns the suite every time you save. And Mocha is just generally wonderful, but that&#8217;s a different post.</p>\n<p>For frontend development, I&#8217;m using <em><a href=\"https://chrome.google.com/webstore/detail/live-css-mod/pcfngkdgaccedbamgamojgomaibafdcg\" target=\"_blank\">Live CSS Mod</a> &#8211; </em>a Chrome extension, which refreshes a page every couple of seconds. But it&#8217;s smart enough to do this in the background and only show the changes if there&#8217;s anything different. This means you don&#8217;t lose state all the time because that would be annoying.</p>\n<p>Now all I need are these sorts of tools for the other stacks I&#8217;m using. (Django/python and Haskell).</p>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles</h6>\n<ul class=\"zemanta-article-ul zemanta-article-ul-image\" style=\"margin: 0; padding: 0; overflow: hidden;\">\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://css.dzone.com/articles/errors-part-learning-curve\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/noimg_124_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://css.dzone.com/articles/errors-part-learning-curve\" target=\"_blank\">Errors: part of the learning curve</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://www.modernperlbooks.com/mt/2012/08/why-i-use-perl-testing.html\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/noimg_2_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://www.modernperlbooks.com/mt/2012/08/why-i-use-perl-testing.html\" target=\"_blank\">Why I Use Perl: Testing</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://blog.smartbear.com/software-quality/bid/201324/Divide-Your-Automated-Testing-Efforts\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/115656693_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://blog.smartbear.com/software-quality/bid/201324/Divide-Your-Automated-Testing-Efforts\" target=\"_blank\">Divide Your Automated Testing Efforts</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://corfield.org/blog/post.cfm/automated-browser-based-testing-with-clojure\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/noimg_71_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://corfield.org/blog/post.cfm/automated-browser-based-testing-with-clojure\" target=\"_blank\">Automated Browser-based Testing with Clojure</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://www.techwench.com/how-to-perform-software-automation-testing-step-by-step-tutorial/\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/noimg_113_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://www.techwench.com/how-to-perform-software-automation-testing-step-by-step-tutorial/\" target=\"_blank\">How to Perform Software Automation Testing &#8211; Step by Step Tutorial</a></li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/?px\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=c3e2471f-2e38-487a-a839-306d9e4f87b9\" alt=\"Enhanced by Zemanta\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"b6dd4431-de48-5604-887f-2f2b13a4e52c"}}