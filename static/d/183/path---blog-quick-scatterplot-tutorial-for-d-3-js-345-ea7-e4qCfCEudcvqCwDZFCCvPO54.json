{"data":{"wordpressPost":{"title":"Quick scatterplot tutorial for d3.js","content":"<div id=\"attachment_5341\" style=\"width: 601px\" class=\"wp-caption alignnone\"><a href=\"http://swizec.com/blog/wp-content/uploads/2012/09/scatterplot-finished.png\"><img class=\" wp-image-5341  \" title=\"When I code\" src=\"http://swizec.com/blog/wp-content/uploads/2012/09/scatterplot-finished.png\" alt=\"When I code\" width=\"591\" height=\"196\" srcset=\"https://swizec.com/blog/wp-content/uploads/2012/09/scatterplot-finished.png 938w, https://swizec.com/blog/wp-content/uploads/2012/09/scatterplot-finished-300x99.png 300w\" sizes=\"(max-width: 591px) 100vw, 591px\" /></a><p class=\"wp-caption-text\">When I code</p></div>\n<p>One of the many interesting things <a class=\"zem_slink\" title=\"GitHub\" href=\"http://github.com\" rel=\"homepage\" target=\"_blank\">Github</a> does are punchcards for repositories that can tell you when people work on their code. Unfortunately, they&#8217;re only per-repository and I was interested in <a href=\"http://nightowls.swizec.com\" target=\"_blank\">per-user Github punchcards</a>.</p>\n<p>So I made my own.</p>\n<p>Collecting the data was fairly straightforward, finding a simple tutorial/example of a <a class=\"zem_slink\" title=\"Scatter plot\" href=\"http://en.wikipedia.org/wiki/Scatter_plot\" rel=\"wikipedia\" target=\"_blank\">scatterplot</a> in <a href=\"http://d3js.org/\" target=\"_blank\">d3.js</a> proved to be less than trivial.</p>\n<h2>Scatterplotting</h2>\n<p>Drawing a scatterplot is nothing more than distributing data into buckets in a two dimensional space, then drawing a circle based on how many entities ended up in a particular bucket. Adding some colour gives us an extra dimension.</p>\n<p>For starters, we&#8217;re going to need some simple HTML and a bit of CSS to make things prettier.</p>\n<pre lang=\"html\">\r\n\r\n<!DOCTYPE html>\r\n\r\n<style>\r\n.axis path,\r\n.axis line {\r\n    fill: none;\r\n    stroke: #eee;\r\n    shape-rendering: crispEdges;\r\n}\r\n\r\n.axis text {\r\n    font-family: sans-serif;\r\n    font-size: 11px;\r\n}\r\n\r\n.loading {\r\n    font-family: sans-serif;\r\n    font-size: 15px;\r\n}\r\n\r\n.circle {\r\n    fill: #222;\r\n}\r\n</style>\r\n\r\n\r\n<div id=\"punchcard\"></div>\r\n\r\n<script src=\"http://d3js.org/d3.v2.min.js\"></script>\r\n<script src=\"script.js\"></script>\r\n\r\n\r\n</pre>\n<p>The <em>div</em> is where our scatterplot will end up. It doesn&#8217;t need any styling since we&#8217;ll do that with d3 directly, but splashing some CSS on stuff in the graph is going to make things look much better.</p>\n<p>Going into <em>script.js</em> we start off by defining the width, height and padding for our graph. Due to d3&#8217;s magic we&#8217;ll later be able to change these and have the graph scale itself properly without further intervention.</p>\n<pre lang=\"javascript\">var w = 940,\r\n    h = 300,\r\n    pad = 20,\r\n    left_pad = 100,\r\n    Data_url = '/data.json';</pre>\n<p>Next we define our scatterplot</p>\n<pre lang=\"javascript\">var svg = d3.select(\"#punchcard\")\r\n        .append(\"svg\")\r\n        .attr(\"width\", w)\r\n        .attr(\"height\", h);</pre>\n<p>This tells d3 that we want to put some svg in the <em>punchcard</em> div and how big we want it.</p>\n<p>The next step is defining our <em>x </em>and <em>y</em> scales. They&#8217;re helpful for translating data into x,y positions on the graph since they&#8217;re usually not the same.</p>\n<pre lang=\"javascript\">var x = d3.scale.linear().domain([0, 23]).range([left_pad, w-pad]),\r\n    y = d3.scale.linear().domain([0, 6]).range([pad, h-pad*2]);</pre>\n<p>We specified that <em>x </em>coordinates map from values between 0 and 23 to coordinates between the left padding and however big the graph is. Similarly for <em>y</em> coordinates.</p>\n<p>D3 will handle everything else for us.</p>\n<p>Next we should define our axes since graphs without labeled axes are rather useless.</p>\n<pre lang=\"javascript\">var xAxis = d3.svg.axis().scale(x).orient(\"bottom\"),\r\n    yAxis = d3.svg.axis().scale(y).orient(\"left\");</pre>\n<p>Essentially we&#8217;ve told the axes to use their corresponding scales and where we want the labels to end up.</p>\n<p>Now it&#8217;s finally time to draw something!</p>\n<pre lang=\"javascript\">svg.append(\"g\")\r\n    .attr(\"class\", \"axis\")\r\n    .attr(\"transform\", \"translate(0, \"+(h-pad)+\")\")\r\n    .call(xAxis);\r\n\r\nsvg.append(\"g\")\r\n    .attr(\"class\", \"axis\")\r\n    .attr(\"transform\", \"translate(\"+(left_pad-pad)+\", 0)\")\r\n    .call(yAxis);</pre>\n<a href=\"http://swizec.com/blog/wp-content/uploads/2012/09/scatterplot-simple-axes.png\"><img class=\"alignnone  wp-image-5345\" title=\"Scatterplot simple axes\" src=\"http://swizec.com/blog/wp-content/uploads/2012/09/scatterplot-simple-axes.png\" alt=\"Scatterplot simple axes\" width=\"634\" height=\"221\" srcset=\"https://swizec.com/blog/wp-content/uploads/2012/09/scatterplot-simple-axes.png 880w, https://swizec.com/blog/wp-content/uploads/2012/09/scatterplot-simple-axes-300x104.png 300w\" sizes=\"(max-width: 634px) 100vw, 634px\" /></a>\n<p>As you can see, d3 was nice enough to figure out on its own how many ticks to draw and where to put them. This usually makes graphs more readable, but in our case we do want all the ticks.</p>\n<p>All it takes is telling the axes how many ticks we want and while we&#8217;re at it let&#8217;s improve the labels as well.</p>\n<pre lang=\"javascript\">var xAxis = d3.svg.axis().scale(x).orient(\"bottom\")\r\n        .ticks(24)\r\n        .tickFormat(function (d, i) {\r\n            var m = (d &gt; 12) ? \"p\" : \"a\";\r\n            return (d%12 == 0) ? 12+m :  d%12+m;\r\n        }),\r\n    yAxis = d3.svg.axis().scale(y).orient(\"left\")\r\n        .ticks(7)\r\n        .tickFormat(function (d, i) {\r\n            return ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][d];\r\n        });</pre>\n<p>The <em>.tickFormat</em> method allows us to give d3 a function that calculates what a label should look like and we used <em>.ticks</em> to specify how many ticks we want.</p>\n<a href=\"http://swizec.com/blog/wp-content/uploads/2012/09/scatterplot-labeled-axes.png\"><img class=\"alignnone  wp-image-5346\" title=\"Nicely  labeled scatterplot\" src=\"http://swizec.com/blog/wp-content/uploads/2012/09/scatterplot-labeled-axes.png\" alt=\"Nicely  labeled scatterplot\" width=\"668\" height=\"217\" srcset=\"https://swizec.com/blog/wp-content/uploads/2012/09/scatterplot-labeled-axes.png 929w, https://swizec.com/blog/wp-content/uploads/2012/09/scatterplot-labeled-axes-300x97.png 300w\" sizes=\"(max-width: 668px) 100vw, 668px\" /></a>\n<p>Much better, but since we&#8217;ll be loading the data asynchronously, let&#8217;s tell the user what&#8217;s going on by placing <em>&#8220;Loading &#8230;&#8221;</em> roughly in the middle of the plot.</p>\n<pre lang=\"javascript\">svg.append(\"text\")\r\n    .attr(\"class\", \"loading\")\r\n    .text(\"Loading ...\")\r\n    .attr(\"x\", function () { return w/2; })\r\n    .attr(\"y\", function () { return h/2-5; });</pre>\n<a href=\"http://swizec.com/blog/wp-content/uploads/2012/09/scatterplot-loading.png\"><img class=\"alignnone  wp-image-5347\" title=\"Scatterplot loading ...\" src=\"http://swizec.com/blog/wp-content/uploads/2012/09/scatterplot-loading.png\" alt=\"Scatterplot loading ...\" width=\"671\" height=\"212\" srcset=\"https://swizec.com/blog/wp-content/uploads/2012/09/scatterplot-loading.png 932w, https://swizec.com/blog/wp-content/uploads/2012/09/scatterplot-loading-300x94.png 300w\" sizes=\"(max-width: 671px) 100vw, 671px\" /></a>\n<p>Loading the data can be done with one of d3&#8217;s many data loading functions.</p>\n<pre lang=\"javascript\">d3.json(Data_url, function (punchcard_data) {</pre>\n<p>Within that function we are now going to draw the actual scatterplot.</p>\n<p>The data I loaded is organized into triplets <em>[day, hour, N]</em> where the combination of <em>day</em> and <em>hour</em> tells us where to draw a circle and <em>N</em> tells us how big it should be.</p>\n<p>We should define another scale for the radius of the circles.</p>\n<pre lang=\"javascript\">var max_r = d3.max(punchcard_data.map(\r\n                       function (d) { return d[2]; })),\r\n        r = d3.scale.linear()\r\n            .domain([0, d3.max(punchcard_data, function (d) { return d[2]; })])\r\n            .range([0, 12]);</pre>\n<p>Everything from <em>zero</em> to <em>max_r</em> will be mapped to radiuses between <em>0</em> and <em>12</em> pixels.</p>\n<p>To make d3 put some data on our graph we need to tell it to load up our data into the graph and give a transformation that results in circles.</p>\n<pre lang=\"javascript\">    svg.selectAll(\".loading\").remove();\r\n\r\n    svg.selectAll(\"circle\")\r\n        .data(punchcard_data)\r\n        .enter()\r\n        .append(\"circle\")\r\n        .attr(\"class\", \"circle\")\r\n        .attr(\"cx\", function (d) { return x(d[1]); })\r\n        .attr(\"cy\", function (d) { return y(d[0]); })\r\n        .attr(\"r\", function (d) { return r(d[2]); });</pre>\n<p>After removing the <em>&#8220;Loading &#8230;&#8221; </em>we gave d3 our data, then said that for each datum a <em>circle</em> should be appended to the graph and given attributes <em>cx, cy</em> and <em>r</em> that determine where this circle will be displayed and how big it&#8217;s going to be.</p>\n<p>Notice we&#8217;re using functions to compute these values, but because we&#8217;re lazy we just rely on d3 doing all of the actual calculations with the <em>x, y</em> and <em>r</em> scales we defined earlier.</p>\n<a href=\"http://swizec.com/blog/wp-content/uploads/2012/09/scatterplot-finished1.png\"><img class=\"alignnone  wp-image-5348\" title=\"The final scatterplot\" src=\"http://swizec.com/blog/wp-content/uploads/2012/09/scatterplot-finished1.png\" alt=\"The final scatterplot\" width=\"676\" height=\"224\" srcset=\"https://swizec.com/blog/wp-content/uploads/2012/09/scatterplot-finished1.png 938w, https://swizec.com/blog/wp-content/uploads/2012/09/scatterplot-finished1-300x99.png 300w\" sizes=\"(max-width: 676px) 100vw, 676px\" /></a>\n<p>On pictures everything looks great now, but the circles appear very suddenly. Wouldn&#8217;t it be nice if there was a sexy transition going on?</p>\n<p>To do that we shove a .<em>transition()</em> and a <em>.delay(800)</em> before defining the radius.</p>\n<pre lang=\"javascript\">    svg.selectAll(\"circle\")\r\n        .data(punchcard_data)\r\n        .enter()\r\n        .append(\"circle\")\r\n        .attr(\"class\", \"circle\")\r\n        .attr(\"cx\", function (d) { return x(d[1]); })\r\n        .attr(\"cy\", function (d) { return y(d[0]); })\r\n        .transition()\r\n        .duration(800)\r\n        .attr(\"r\", function (d) { return r(d[2]); });</pre>\n<p>Now the circles appear in a lovely 800 millisecond transition.</p>\n<p>Here&#8217;s the full javascript code:</p>\n<pre lang=\"javascript\">var w = 940,\r\n    h = 300,\r\n    pad = 20,\r\n    left_pad = 100,\r\n    Data_url = '/data.json';\r\n\r\nvar svg = d3.select(\"#punchcard\")\r\n        .append(\"svg\")\r\n        .attr(\"width\", w)\r\n        .attr(\"height\", h);\r\n\r\nvar x = d3.scale.linear().domain([0, 23]).range([left_pad, w-pad]),\r\n    y = d3.scale.linear().domain([0, 6]).range([pad, h-pad*2]);\r\n\r\nvar xAxis = d3.svg.axis().scale(x).orient(\"bottom\")\r\n        .ticks(24)\r\n        .tickFormat(function (d, i) {\r\n            var m = (d &gt; 12) ? \"p\" : \"a\";\r\n            return (d%12 == 0) ? 12+m :  d%12+m;\r\n        }),\r\n    yAxis = d3.svg.axis().scale(y).orient(\"left\")\r\n        .ticks(7)\r\n        .tickFormat(function (d, i) {\r\n            return ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][d];\r\n        });\r\n\r\nsvg.append(\"g\")\r\n    .attr(\"class\", \"axis\")\r\n    .attr(\"transform\", \"translate(0, \"+(h-pad)+\")\")\r\n    .call(xAxis);\r\n\r\nsvg.append(\"g\")\r\n    .attr(\"class\", \"axis\")\r\n    .attr(\"transform\", \"translate(\"+(left_pad-pad)+\", 0)\")\r\n    .call(yAxis);\r\n\r\nsvg.append(\"text\")\r\n    .attr(\"class\", \"loading\")\r\n    .text(\"Loading ...\")\r\n    .attr(\"x\", function () { return w/2; })\r\n    .attr(\"y\", function () { return h/2-5; });\r\n\r\nd3.json(Data_url, function (punchcard_data) {\r\n    var max_r = d3.max(punchcard_data.map(\r\n                       function (d) { return d[2]; })),\r\n        r = d3.scale.linear()\r\n            .domain([0, d3.max(punchcard_data, function (d) { return d[2]; })])\r\n            .range([0, 12]);\r\n\r\n    svg.selectAll(\".loading\").remove();\r\n\r\n    svg.selectAll(\"circle\")\r\n        .data(punchcard_data)\r\n        .enter()\r\n        .append(\"circle\")\r\n        .attr(\"class\", \"circle\")\r\n        .attr(\"cx\", function (d) { return x(d[1]); })\r\n        .attr(\"cy\", function (d) { return y(d[0]); })\r\n        .transition()\r\n        .duration(800)\r\n        .attr(\"r\", function (d) { return r(d[2]); });\r\n});</pre>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles</h6>\n<ul class=\"zemanta-article-ul zemanta-article-ul-image\" style=\"margin: 0; padding: 0; overflow: hidden;\">\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://www.r-bloggers.com/more-on-exploring-correlations-in-r/\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/109208243_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://www.r-bloggers.com/more-on-exploring-correlations-in-r/\" target=\"_blank\">More on Exploring Correlations in R</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://css.dzone.com/articles/html5-render-urban-population\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/noimg_2_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://css.dzone.com/articles/html5-render-urban-population\" target=\"_blank\">HTML5: Render Urban Population Growth on a 3D World Globe With Three.js and Canvas</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://economistsview.typepad.com/economistsview/2011/03/striking-scatterplot-unemployment-and-investment.html\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/noimg_52_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://economistsview.typepad.com/economistsview/2011/03/striking-scatterplot-unemployment-and-investment.html\" target=\"_blank\">Striking Scatterplot: Unemployment and Investment</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://net.tutsplus.com/tutorials/javascript-ajax/building-and-testing-a-backbone-app/\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/109034267_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://net.tutsplus.com/tutorials/javascript-ajax/building-and-testing-a-backbone-app/\" target=\"_blank\">Building and Testing a Backbone App</a></li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/?px\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=8f16ed4f-3c27-43f6-9df9-c5797a6b4fb8\" alt=\"Enhanced by Zemanta\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"2248d212-bdf5-5be9-a640-53b1d6409ad0"}}