{"data":{"wordpressPost":{"title":"A Dancing Rainbow Snake â€“ An Example of Minimal React and D3v4 transitions","content":"<p><iframe width=\"853\" height=\"480\" src=\"https://www.youtube.com/embed/_zzGKD-ybw4\" frameborder=\"0\" allowfullscreen></iframe></p>\n<p>Remember that <a href=\"https://swizec.com/blog/animating-svg-nodes-react-preact-inferno-vue/swizec/7311\">dancing fractal tree</a> from December? That was built using what I like to call The Rich Animation Technique. TRAT for short.</p>\n<p>Yes, I just came up with that. You might know of it as the &quot;game loop&quot; principle, or recalculate-redraw. It&#39;s how React&#39;s engine works.</p>\n<p>When applied to animation, TRAT follows the idea that, if you update props 60 times per second and trigger a React re-render every time, animation happens. It&#39;s kinda crazy that it works so well, but work it does.</p>\n<p>It&#39;s a spectacular approach when you need fine-grained control like making a dragged node follow the mouse or running an entire <a href=\"https://github.com/Swizec/space-invaders\">Space Invaders</a> game.</p>\n<p>But TRAT is annoying when you don&#39;t want or need fine control. When you just want a tiny animation that does a thing and doesn&#39;t bother you with the details, itâ€™s a bit cumbersome.</p>\n<img class=\"alignnone size-full wp-image-7419\" src=\"https://swizec.com/blog/wp-content/uploads/2017/02/colorful-dots.gif\" width=\"573\" height=\"564\" />\n<p>Pretty, isn&#39;t it? ?</p>\n<p>It&#39;s a 50-by-50 field of black SVG <code>&lt;circle&gt;</code> elements. On mouse over, a D3 transition takes over and increases a circle&#39;s radius to 20, then back down to 5. While that&#39;s happening, we switch on colorization to make it pretty.</p>\n<p>Colors come from D3&#39;s <a href=\"https://github.com/d3/d3-scale\"><code>interpolateWarm</code> scale</a> laid out in a radial pattern. The radial pattern is high school math. Let me show you.</p>\n<img src=\"https://raw.githubusercontent.com/d3/d3-scale/master/img/warm.png\" />\n<p>You can play with the code on CodePen, tweak params, try the dancing rainbow snake. I think it looks like a snakeâ€¦ also, I love emergent patterns like this. Transition each circle individually, and it looks like a connected blob.</p>\n<p class='codepen'  data-height='659' data-theme-id='0' data-slug-hash='QdVoOg' data-default-tab='js,result' data-animations='run' data-editable='true' data-embed-version='2'>\nSee the Pen <a href='http://codepen.io/swizec/pen/QdVoOg/'>React D3 transition animation â€“ rainbow field</a> by Swizec Teller (<a href='http://codepen.io/swizec'>@swizec</a>) on <a href='http://codepen.io'>CodePen</a>.0</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n<p>We have two components: <code>App</code> and <code>Dot</code>. App sets up the grid of dots, and <code>Dot</code> handles each circle&#39;s transitions and coloration.</p>\n<p>I tried adding a fly-in transition as well, but <a href=\"https://facebook.github.io/react/docs/animation.html#low-level-api-reacttransitiongroup\">ReactTransitionGroup</a> dies on 2500 nodes. ? I have a video of that fail somewhere on snapchat.</p>\n<h2>App</h2>\n<p>The App component needs only a <code>render</code> method that returns an SVG.</p>\n<pre lang=\"javascript\">\n  render() {\n    const width = 600,\n          N = 50,\n          pos = d3.scalePoint()\n                  .domain(d3.range(N))\n                  .range([0, width])\n                  .padding(5)\n                  .round(true);\n    \n    return (\n      <svg width=\"600\" height=\"600\">\n        {d3.range(N).map(x => \n           d3.range(N).map(y =>\n             <Dot x={pos(x)} y={pos(y)} key={`${x}-${y}`} \n                  maxPos={width} />\n        ))}\n      </svg>\n    )\n  }\n</pre>\n<p>We&#8217;re rendering a 600px-by-600px SVG with 50 nodes per row and column. We use D3&#8217;s <code>scalePoint</code> for dot positioning because it does everything we need. Makes sure they&#8217;re evenly spaced, gives them padding on the sides, and ensures coordinates are rounded numbers.</p>\n<p>Here&#8217;s a diagram of how <code>scalePoint</code> works:</p>\n<img src=\"https://raw.githubusercontent.com/d3/d3-scale/master/img/point.png\" />\n<p>To render the grid, we use two nested loops going from 0 to N. <code>d3.range</code> builds an array for us so we can <code>.map</code> over it. We return a <code><Dot></code> component for each iteration.</p>\n<p>Looking at this code: <code>x={pos(x)} y={pos(y)}</code>, you can see why D3 scales are so neat. All positioning calculation boiled down to a 1-parameter function call. \\o/</p>\n<h2>Dot</h2>\n<p>The Dot component has a few more moving parts. It needs a <code>constructor</code>, a transition callback â€“Â <code>flash</code>, a <code>color</code> getter, and a <code>render</code> method.</p>\n<pre lang=\"javascript\">\nclass Dot extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = Object.assign({}, \n                               props,\n                               {r: 5});\n  }\n  \n  flash() {\n        // transition code\n  }\n  \n  get color() {\n    // color calculation\n  }\n  \n  render() {\n    const { x, y, r, colorize } = this.state;\n    \n    return <circle cx={x} cy={y} r={r} \n             ref=\"circle\" onMouseOver={this.flash.bind(this)}\n             style={{fill: colorize ? this.color : 'black'}} />\n  }\n}\n</pre>\n<p>We initialize state in the component <code>constructor</code>. The quickest approach is to copy all <code>props</code> to <code>state</code>, even though we don&#8217;t need all props to be in state.</p>\n<p>Normally, you want to avoid state and render all components from props. Functional principles, state is bad, and all that. But as <a href=\"https://twitter.com/frangel85\">Freddy Rangel</a> likes to say <em>&#8220;State is for props that change over time&#8221;</em>.</p>\n<p>Guess what transitions areâ€¦ props that change over time ðŸ™‚</p>\n<p>So we put props in state and render from state. This lets us keep a stable platform while running transitions. It ensures that changes re-rendering <code>Dot</code> from above won&#8217;t interfere with D3 transitions.</p>\n<p>Not super important in our particular example because those changes never happen. But I had many interesting issues in this <a href=\"https://swizec.com/blog/using-d3js-transitions-in-react/swizec/6797\">animated typing example</a>.</p>\n<p>For the <code>render</code> method, we return an SVG <code><circle></code> element positioned at <code>(x, y)</code>, with a radius, an <code>onMouseOver</code> listener, and a style with the <code>fill</code> color depending on <code>state.colorize</code>.</p>\n<h3>flash() â€“ the transition</h3>\n<p>When you mouse over one of the dots, its <code>flash()</code> method gets called as an event callback. This is where the transition happens that pops the circle bigger, then back to normal size.</p>\n<pre lang=\"javascript\">\n  flash() {\n    let node = d3.select(this.refs.circle);\n    \n    this.setState({colorize: true});\n\n    node.transition()\n        .attr('r', 20)\n        .duration(250)\n        .ease(d3.easeCubicOut)\n        .transition()\n        .attr('r', 5)\n        .duration(250)\n        .ease(d3.easeCubicOut)\n        .on('end', () => this.setState({colorize: false}));\n  }\n</pre>\n<p>Look at those triple-nested anonymous callbacks. Does it give you shivers? It&#8217;s okay for small experiments, but don&#8217;t do it too much in real code. <a href=\"http://callbackhell.com/\">Callback hell</a> is real.</p>\n<p>Here&#8217;s what happens:</p>\n<ol>\n<li>We <code>d3.select</code> the <code><circle></code> node. This enables D3 to take over the rendering of this particular DOM node</li>\n<li>We <code>setState</code> to enable colorization. Yes, this triggers a re-render.</li>\n<li>We start a <code>transition</code> that changes the <code>r</code> attribute to <code>20</code> pixels over a duration of <code>250</code> milliseconds.</li>\n<li>We add a <code>easeCubicOut</code> easing function, which makes the animation look more natural</li>\n<li>When the transition ends, we start another similar transition, but change <code>r</code> back to <code>5</code>.</li>\n<li>When <em>that</em>&#8216;s done, we turn off colorization and trigger another re-render.</li>\n</ol>\n<p>If our transition didn&#8217;t return things back to normal, I would use that <code>'end'</code> opportunity to sync React component state with reality. Something like <code>this.setState({r: 20})</code> or whatever. Depends on what you&#8217;re doing.</p>\n<h3>get color() â€“Â the colorization</h3>\n<p>Colorization doesn&#8217;t have anything to do with transitions, but I want to explain how it works. Mostly to remind you that high school math, which you thought you&#8217;d never use again, is useful.</p>\n<p>Here&#8217;s what the colored grid looks like:</p>\n<img class=\"alignnone size-full wp-image-7418\" src=\"https://swizec.com/blog/wp-content/uploads/2017/02/colored-grid.png\" width=\"569\" height=\"569\" srcset=\"https://swizec.com/blog/wp-content/uploads/2017/02/colored-grid.png 569w, https://swizec.com/blog/wp-content/uploads/2017/02/colored-grid-150x150.png 150w, https://swizec.com/blog/wp-content/uploads/2017/02/colored-grid-300x300.png 300w, https://swizec.com/blog/wp-content/uploads/2017/02/colored-grid-125x125.png 125w\" sizes=\"(max-width: 569px) 100vw, 569px\" />\n<p>Colors follow a radial pattern even though <code>d3.interpolateWarm</code> takes a single argument in the <code>[0, 1]</code> range. We achieve the pattern using circle parametrization.</p>\n<p><code>x^2 + y^2 = r^2</code></p>\n<p>Calibrate a linear scale to translate between <code>[0, maxR^2]</code> and <code>[0, 1]</code>, then feed it <code>x^2 + y^2</code> and you get the <code>interpolateWarm</code> parameter. Magic ðŸ™‚</p>\n<pre lang=\"javascript\">\n  get color() {\n    const { x, y, maxPos } = this.state;\n    \n    const t = d3.scaleLinear()\n                .domain([0, 1.2*maxPos**2])\n                .range([0, 1]);\n    \n    return d3.interpolateWarm(t(x**2 + y**2));\n  }\n</pre>\n<p>We calibrate the <code>t</code> scale to <code>1.2*maxPos**2</code> for two reasons. First, you want to avoid square roots whenever possible because they&#39;re slow. Second, adding the <code>1.2</code> factor changes how the color scale behaves and makes it look better.</p>\n<p>For example, here it is with a factor of 0.05:</p>\n<img class=\"alignnone size-full wp-image-7417\" src=\"https://swizec.com/blog/wp-content/uploads/2017/02/weird-color-scale.png\" width=\"1140\" height=\"1154\" srcset=\"https://swizec.com/blog/wp-content/uploads/2017/02/weird-color-scale.png 1140w, https://swizec.com/blog/wp-content/uploads/2017/02/weird-color-scale-296x300.png 296w, https://swizec.com/blog/wp-content/uploads/2017/02/weird-color-scale-768x777.png 768w, https://swizec.com/blog/wp-content/uploads/2017/02/weird-color-scale-1012x1024.png 1012w\" sizes=\"(max-width: 1140px) 100vw, 1140px\" />\n<p>Play around and try different color scales, too. ðŸ™‚</p>\n<h2>Potential improvements</h2>\n<p>There are a bunch of things we could&#39;ve done in this example but didn&#39;t. One of them is the radius parameter.</p>\n<p>We really should have taken the <code>r</code> parameter in as a property on <code>&lt;Dot&gt;</code>, saved it in state as a, say, <code>baseR</code>, then made sure the transition returns our dot back to that instead of a magic <code>5</code> number. Avoid peppering your code with random numbers.</p>\n<p>Another improvement could be rendering more circles to provide a tighter grid. That doesn&#39;t work so well on CodePen, however.</p>\n<blockquote class=\"twitter-tweet\" data-width=\"550\">\n<p lang=\"tl\" dir=\"ltr\">PS: 6400 SVG nodes breaks <a href=\"https://twitter.com/CodePen\">@CodePen</a> <a href=\"https://t.co/9u9ATaGHJh\">pic.twitter.com/9u9ATaGHJh</a></p>\n<p>&mdash; Swizec (@Swizec) <a href=\"https://twitter.com/Swizec/status/829590239458922496\">February 9, 2017</a></p></blockquote>\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n<p>And I already mentioned the problems with <code>ReactTransitionGroup</code> that prevent us from making a nice load animation.</p>\n<p>One idea I did have that would be really cool is to turn this colored grid into a music visualization thing. Not sure how to do that though. Is there a way to detect sound in a browser?</p>\n<p>Could be a fun weekend experiment if there is ?</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"d1cdf448-0a5f-5652-8f45-6418905a354b"}}