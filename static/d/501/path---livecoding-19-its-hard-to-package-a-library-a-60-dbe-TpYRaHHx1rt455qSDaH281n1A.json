{"data":{"wordpressPost":{"title":"Livecoding #19: It&#8217;s hard to package a library","content":"<p><em>This is a Livecoding Recap – an almost-weekly post about interesting things discovered while livecoding ?. Always under 500 words and with pictures. You can follow my channel, <a href=\"https://livecoding.tv/swizec\">here</a>. New content almost <strong>every Sunday at 2pm PDT</strong>. There’s live chat, come say hai ?</em></p>\n<p><iframe src=\"https://www.livecoding.tv/swizec/videos/jbpap/embed\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"true\" scrolling=\"no\"></iframe></p>\n<p>This week, we wanted to build an example for the <a href=\"https://swizec.com/blog/livecoding-18-an-abstract-react-transition-component/swizec/6906\">TransitionableComponent from last week</a> — an animated piechart. Not because piecharts are exciting, but because someone asked me by email.</p>\n<p>It did not go so well. After 1 hour and 45 minutes of fighting everything from Webpack to npm, we built this:</p>\n<img src=\"http://swizec.com/blog/wp-content/uploads/2016/08/Screen-Shot-2016-08-14-at-23.13.04.png\" alt=\"A not animated piechart\" class=\"alignnone size-full wp-image-6929\" srcset=\"https://swizec.com/blog/wp-content/uploads/2016/08/Screen-Shot-2016-08-14-at-23.13.04.png 313w, https://swizec.com/blog/wp-content/uploads/2016/08/Screen-Shot-2016-08-14-at-23.13.04-150x150.png 150w, https://swizec.com/blog/wp-content/uploads/2016/08/Screen-Shot-2016-08-14-at-23.13.04-300x300.png 300w, https://swizec.com/blog/wp-content/uploads/2016/08/Screen-Shot-2016-08-14-at-23.13.04-125x125.png 125w\" sizes=\"(max-width: 313px) 100vw, 313px\" />\n<p>A <em>not</em> animated piechart that shows the ratio of British imports vs. exports in the year 1820. Exports are blue. The tiny dataset is from <a href=\"http://www.stat.ncsu.edu/research/sas/sicl/data/\">A Handbook of Small Data Sets</a>. </p>\n<p>We were going to build an animation that walks through the years in our dataset – 1820 through 1850 – and draws a 2-arc piechart for each year. If there was time, we&#8217;d add the ability for users to scroll through.</p>\n<p>Building the piechart itself was quick: Fetch and parse data with <code>d3.tsv('data.dat')</code>, call <code>setState</code> and build a 2-entry array as data for the piechart. Our tiny dataset gives only one number, so we have to infer the other.</p>\n<pre lang=\"javascript\">\r\n// src/App.js\r\n\r\ncomponentDidMount() {\r\n        d3.tsv('data.dat')\r\n          .row(({imports, year}) => ({imports: Number(imports),\r\n                                      year: Number(year)}))\r\n          .get((data) => {\r\n              this.setState({data: data,\r\n                             currentIndex: 0});\r\n          });\r\n    }\r\n\r\n    render() {\r\n        let pie = null;\r\n\r\n        if (this.state.data.length) {\r\n            const yearData = this.state.data[this.state.currentIndex],\r\n                  pieData = [{value: yearData.imports},\r\n                             {value: 100-yearData.imports}];\r\n\r\n            pie = <AnimatedPiechart data={pieData} x=\"400\" y=\"300\" r=\"100\" />;\r\n        }\r\n        \r\n        // return an svg, add the pie, etc\r\n    }\r\n}\r\n</pre>\n<p>That&#8217;s how you&#8217;d use the <code>AnimatedPiechart</code> component once it works. The component itself wasn&#8217;t quick to build, too. It looks like this:</p>\n<pre lang=\"javascript\">\r\n// src/AnimatedPiechart.js\r\n\r\nclass Arc extends Component { // this would be TransitionableComponent\r\n    render() {\r\n        const arc = d3.arc()\r\n                      .innerRadius(this.props.innerRadius)\r\n                      .outerRadius(this.props.outerRadius);\r\n\r\n        return (\r\n            <path d={arc(this.props.data)}\r\n                  style={{fill: this.props.color}} />\r\n        );\r\n    }\r\n}\r\n\r\nconst AnimatedPiechart = ({ x, y, r, data }) => {\r\n    let pie = d3.pie()\r\n                .value((d) => d.value)(data),\r\n        translate = `translate(${x}, ${y})`,\r\n        colors = d3.scaleOrdinal(d3.schemeCategory10);\r\n\r\n    return (\r\n        <g transform={translate}>\r\n            {pie.map((d, i) => (\r\n                <Arc key={`arc-${i}`}\r\n                     data={d}\r\n                     innerRadius=\"0\"\r\n                     outerRadius={r}\r\n                     color={colors(i)} />\r\n             ))}\r\n        </g>\r\n    );\r\n};\r\n</pre>\n<p>A piechart is a collection of arcs. As such it doesn&#8217;t need to do much: use <code>d3.pie()</code> to turn a dataset into a piechart, then walk through it and render arcs.</p>\n<p>The arcs were supposed to use <code>TransitionableComponent</code> to become animated, but … heh … it didn&#8217;t actually work as a library. Published to npm and everything. 29 people even tried to use it! Couldn&#8217;t even import ?</p>\n<p>Calling <code>import TransitionableComponent from 'react-transitionable-component'</code> produced a syntax error. Something like <em>&#8220;Unexpected token: export in index.js&#8221;</em>.</p>\n<p>When you publish a library, it has to be compiled. Nobody wants to build their whole node_modules directory every time they run Webpack, so configs always exclude it.</p>\n<p>I wonder how long build all your dependencies would take … I should try that one day ?</p>\n<p>So, to make a library work as a library, you have to compile it. To compile it, you have to first know how to run Webpack. It took me an embarrassing amount of time to realize that <code>webpack webpack.config.prod.js</code> does <em>not</em> run Webpack. <code>webpack ––config=webpack.config.prod.js</code> does.</p>\n<p>To save some time, we modeled our webpack config after what we found in <a href=\"https://github.com/facebookincubator/create-react-app\">react-scripts</a>. Also known as <code>create-react-app</code>. When I say &#8220;model&#8221;, I mean &#8220;copy file then delete cruft&#8221;.</p>\n<p>You can delete everything to do with HTML and CSS. Unless your packaged component comes with its own styling, which I&#8217;m still on the fence about. Should open source components include stylings like jQuery plugins once did?</p>\n<p>Our final webpack config that got the AnimatedPiechart project running comes out to 74 lines and is too long to paste here. You can <a href=\"https://github.com/Swizec/react-transitionable-component/blob/master/webpack.config.prod.js\">see it on Github</a>.</p>\n<p>We also had to install 16 dependencies, which is insane. And we&#8217;re no closer to knowing how to correctly use d3 v4 modularity and avoid depending on the whole library. ?</p>\n<p>But, you can use react-transition-group as a library now \\o/</p>\n<p>Join me next time, when we use <code>TransitionableComponent</code> to build an animated piechart for real. Maybe even figure out how to do <code>import Thing from 'd3-transform'</code> properly.</p>\n<p>PS: the edited and improved versions of these videos are becoming a video course. Readers of the engineer package of <a href=\"http://swizec.com/reactd3js/\">React+d3js ES6</a> get the video course for free when it’s ready.</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"cb846d94-cf14-573b-bae5-87888f326a15"}}