{"data":{"wordpressPost":{"title":"Python and lazy evaluation","content":"<a href=\"http://www.flickr.com/photos/tarasantilli/6115496574/\"><img class=\"alignnone\" title=\"Lazy, by CurlysGirly\" src=\"http://farm7.staticflickr.com/6182/6115496574_35ca6b4cf8_z.jpg\" alt=\"Lazy, by CurlysGirly\" width=\"640\" height=\"427\" /></a>\n<p>I woke up this morning with a clear thought in mind <em>&#8220;Generators are awesome! I will write a post about using them for lazy evaluation! Hoorah&#8221;</em></p>\n<p>After much dabbling I realized how wrong I was. <a class=\"zem_slink\" title=\"Python (programming language)\" href=\"http://www.python.org/\" rel=\"homepage\" target=\"_blank\">Python</a>&#8216;s generators are indeed cool. They give us the use of <a class=\"zem_slink\" title=\"Lazy evaluation\" href=\"http://en.wikipedia.org/wiki/Lazy_evaluation\" rel=\"wikipedia\" target=\"_blank\">infinite lists</a> and they&#8217;re useful for conserving memory usage, but lazy evaluation they can&#8217;t quite do.</p>\n<p>Let&#8217;s make a generator for natural numbers:</p>\n<pre lang=\"python\">def generator():\r\n    i = 1\r\n    while True:\r\n        yield i\r\n        i += 1</pre>\n<p>A simple function with a loop counting from one to infinity. The <em>yield</em>¬†operator is what saves us from looping into infinity by turning the function into a generator. We can now take any number of natural numbers:</p>\n<pre lang=\"python\">from itertools import islice\r\n\r\ndef take(n, iterable):\r\n    \"Return first n items of the iterable as a list\"\r\n    return list(islice(iterable, n))\r\n\r\nprint take(5, generator())\r\n# [1, 2, 3, 4, 5]</pre>\n<p>Cool, we&#8217;ve implemented python&#8217;s native <em>range</em>¬†function. Handy, bot nothing special.</p>\n<p>The power of generators lies in using something more than <em>+1</em>¬†as the core function. How about implementing a <a class=\"zem_slink\" title=\"Algorithm\" href=\"http://en.wikipedia.org/wiki/Algorithm\" rel=\"wikipedia\" target=\"_blank\">naive algorithm</a> for listing prime numbers?</p>\n<pre lang=\"python\">def primes():\r\n    for n in generator():\r\n        if not any(i > 1 and i != n and n%i == 0\r\n                   for i in islice(generator(), n)):\r\n            yield n\r\n\r\nprint take(10, primes())\r\n# [1, 2, 3, 5, 7, 11, 13, 17, 19, 23]</pre>\n<p>Ok the number one might not be prime, but that&#8217;s easily fixable by changing the generator we&#8217;re iterating over in the <em>primes()</em>¬†function so it starts at 2 instead of 1.</p>\n<p>But this algorithm is slow for anything significant. It would be great if we could improve it by only doing trial divisions with known primes rather than everything.</p>\n<p>But &#8230; we can&#8217;t do that. At least I haven&#8217;t found a good way to do it. Logically speaking, we should be able to iterate over a list of all <em>primes()</em>¬†as long as the numbers returned are smaller than the one we are currently checking:</p>\n<pre lang=\"python\">def primes():\r\n    for n in generator():\r\n        if not any(p != n and n%p == 0\r\n                   for p in takewhile(lambda x: n>x,\r\n                                      primes())):\r\n            yield n\r\n\r\nprint take(10, primes())</pre>\n<p>This produces an <a class=\"zem_slink\" title=\"Infinite loop\" href=\"http://en.wikipedia.org/wiki/Infinite_loop\" rel=\"wikipedia\" target=\"_blank\">infinite recursion</a> and the script dies after spitting out a bunch of errors. It might look like we aren&#8217;t doing anything to stop the recursion, we actually are.</p>\n<p>Internally <em>primes()</em>¬†is stopped by the <em>takewhile</em>¬†since it only takes from the generator while a condition is met. And externally it&#8217;s stopped by the <em>take()</em>¬†since it finishes after 10 primes have been yielded.</p>\n<h2>No laziness üôÅ</h2>\n<p>By no means are generators bad &#8211; using generator comprehensions instead of <a class=\"zem_slink\" title=\"List comprehension\" href=\"http://en.wikipedia.org/wiki/List_comprehension\" rel=\"wikipedia\" target=\"_blank\">list comprehensions</a> is a <strong>great</strong> idea. It will save plenty of memory when you&#8217;re doing something like this:</p>\n<pre lang=\"python\"># builds a big list and immediately discards it\r\n>>> sum([x*x for x in xrange(2000000)])\r\n2666664666667000000L\r\n\r\n# only keeps one value at a time in memory\r\n>>> sum(x*x for x in xrange(2000000))\r\n2666664666667000000L</pre>\n<p>As noted in <em><a href=\"http://python3porting.com/improving.html\" target=\"_blank\">Improving your code with modern idioms</a></em>¬†a lot of cool tricks like that have been backported from python 3 and you should start using them.</p>\n<p>But what&#8217;s happened to our dreams of lazy evaluation?</p>\n<p>We can check that Python is indeed very eager to evaluate everything:</p>\n<pre lang=\"python\">>>> [\"no sleep\", time.sleep(1), time.sleep(2)][0]\r\n'no sleep'  # takes 3 seconds to print</pre>\n<p>As this example shows python immediately evaluates the whole data structure with wanton disregard for what you&#8217;re actually using. Even doing it as a tuple doesn&#8217;t work.</p>\n<p>Using a generator helps a little bit</p>\n<pre lang=\"python\">>>> list(islice((time.sleep(x) for x in xrange(3)), 1))\r\n[None] # takes 0 seconds\r\n>>> list(islice((time.sleep(x) for x in xrange(3)), 2))\r\n[None, None] # takes 1 second\r\n>>> list(islice((time.sleep(x) for x in xrange(3)), 3))\r\n[None, None, None] # takes 3 seconds</pre>\n<p>But this is awkward. Our only other bet is using lambda&#8217;s to postpone evaluation of particular members of a list until they&#8217;re actually needed:</p>\n<pre lang=\"python\">>>> [lambda: \"no sleep\", lambda: time.sleep(1), lambda: time.sleep(2)][0]()\r\n'no sleep' # takes 0 seconds</pre>\n<p>Only somewhat awkward to use and it isn&#8217;t even real lazy evaluation. Of course nothing gets evaluated eagerly when we&#8217;re just assigning functions to variables so they can be called later. It&#8217;s a trick that works ¬†in all languages that permit storing functions. Javascript comes immediately to mind.</p>\n<p>While we <em>might</em>¬†be able to expand on this lambda and generator trickery throughout our codebase &#8230; let&#8217;s not. Let&#8217;s be content that python is an eager language, asking only <em>&#8220;How high?&#8221;</em>¬†when we tell it to jump, and rejoice in the fact it can be kind of sort of almost lazy when we explicitly tell it to be.</p>\n<h2>Update May 16th, 2016</h2>\n<p>Reader Jasen Betts fixed a bug in my lazy eval implementation. Here&#8217;s what he has to say:</p>\n<p>Note that takewhile does not stop UNTIL it finds an unacceptable result, it has to find the first unacceptable result to terminate. That&#8217;s why your second primes function doesn&#8217;t work.</p>\n<p>Code that works:</p>\n<pre lang=\"python\">\r\ndef primes():\r\n\r\n    # print (\"(yield=2)\")\r\n    yield 2\r\n\r\n    for f in generator():\r\n        n=f*2+1\r\n        if not any(p != n and n%p == 0\r\n                for p in takewhile(lambda x: n>=x*x, primes())\r\n                );\r\n            # print (\"(yield=%d)\"%(n) )\r\n            yield n\r\n</pre>\n<p>points to note</p>\n<p>  `yield 2` and `n>=x*x` ensure that it terminates by ensuring the<br />\n  racursive calls require smaller maximum results</p>\n<p>  `n=f*2+1` helps efficiency, but `n=f+2` would also work.<br />\n  after `yield 2` we need to start searching at 3.</p>\n<p> It&#8217;s still horribly inefficient uncomment the `print()` calls to see why.</p>\n<p>  Perhaps this can be fixed by storing the found results in a dict and<br />\n  yielding those first before looping over the generator.</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"ec0a9dec-89cb-58b2-8f5f-4a29ab570737"}}