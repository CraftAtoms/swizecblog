{"data":{"wordpressPost":{"title":"Animating 2048 SVG nodes in React, Preact, Inferno, Vue, Angular 2, and CycleJS – a side-by-side comparison","content":"<p>Ever wondered which front-end framework is smoothest to animate 2048 SVG nodes? Here are some GIFs.</p>\n<p>Same <a href=\"https://swizec.com/blog/dancing-tree-fractal-react/swizec/7288\">dancing pythagorean tree fractal</a>, same mid-2012 retina MacBook Pro. All recorded with LICEcap in a normal, everyday setting running Chrome, Spotify, Emacs, etc. Click on a GIF to see its code.</p>\n<p>&#8212; <em>Angular 2 and CycleJS added on Dec 23rd</em> &#8212;</p>\n<p>People have been asking <em>why</em> this test is important, <em>why</em> should they care, <em>what&#8217;s the point</em>. It&#8217;s fun and the demo looks pretty. Fundamentally, it&#8217;s a showcase of &#8220;jank&#8221; – how much jankiness is there between what you see on the screen and what you do with the mouse.</p>\n<p>Many of the gifs have live versions linked from their github. Play with them. Maybe even clone the repo and run it locally. It&#8217;s fun.</p>\n<div id=\"attachment_7315\" style=\"width: 862px\" class=\"wp-caption aligncenter\"><a href=\"https://github.com/Swizec/react-fractals\"><img class=\"wp-image-7315 size-full\" src=\"http://swizec.com/blog/wp-content/uploads/2016/12/react-tree-small.gif\" alt=\"Implementation: mine\" width=\"852\" height=\"395\" /></a><p class=\"wp-caption-text\">Implementation: mine</p></div>\n<div id=\"attachment_7313\" style=\"width: 862px\" class=\"wp-caption aligncenter\"><a href=\"https://github.com/developit/preact-fractals\"><img class=\"wp-image-7313 size-full\" src=\"http://swizec.com/blog/wp-content/uploads/2016/12/preact-tree-small.gif\" alt=\"preact-tree-small\" width=\"852\" height=\"395\" /></a><p class=\"wp-caption-text\">Implementation: Jason Miller, creator of Preact</p></div>\n<div id=\"attachment_7312\" style=\"width: 862px\" class=\"wp-caption aligncenter\"><a href=\"https://github.com/trueadm/inferno-fractals\"><img class=\"wp-image-7312 size-full\" src=\"http://swizec.com/blog/wp-content/uploads/2016/12/inferno-tree-small.gif\" alt=\"Implementation: Dominic Gannaway, creator of Inferno\" width=\"852\" height=\"395\" /></a><p class=\"wp-caption-text\">Implementation: Dominic Gannaway, creator of Inferno</p></div>\n<div id=\"attachment_7314\" style=\"width: 862px\" class=\"wp-caption aligncenter\"><a href=\"https://github.com/yyx990803/vue-fractal\"><img class=\"wp-image-7314 size-full\" src=\"http://swizec.com/blog/wp-content/uploads/2016/12/vue-tree-small.gif\" alt=\"Implementation: Evan You, creator of Vue\" width=\"852\" height=\"395\" /></a><p class=\"wp-caption-text\">Implementation: Evan You, creator of Vue</p></div>\n<div id=\"attachment_7324\" style=\"width: 862px\" class=\"wp-caption aligncenter\"><a href=\"https://github.com/teropa/ng-fractals\"><img class=\"wp-image-7324 size-full\" src=\"http://swizec.com/blog/wp-content/uploads/2016/12/ng2-tree-small.gif\" alt=\"Implementation: Tero Parviainen, JavaScript consultant\" width=\"852\" height=\"395\" /></a><p class=\"wp-caption-text\">Implementation: Tero Parviainen, JavaScript consultant</p></div>\n<div id=\"attachment_7325\" style=\"width: 862px\" class=\"wp-caption aligncenter\"><a href=\"https://github.com/wmaurer/cyclejs-fractals\"><img class=\"wp-image-7325 size-full\" src=\"http://swizec.com/blog/wp-content/uploads/2016/12/cyclejs-tree-small-1.gif\" alt=\"Implementation: Wayne Maurer, founder of Lambda IT\" width=\"852\" height=\"395\" /></a><p class=\"wp-caption-text\">Implementation: Wayne Maurer, founder of Lambda IT</p></div>\n<p>Thanks to Jason, Dominic, and Evan for building the forks. You guys rock!</p>\n<p>And thanks to Tero and Wayne for adding their own versions! So exciting! I hope we get more ? Someone mentioned a raw JavaScript version without frameworks; that would be cool.</p>\n<p>Let&#8217;s look at the code. For an in-depth explanation of how it works, go <a href=\"https://swizec.com/blog/dancing-tree-fractal-react/swizec/7288\">here</a>.</p>\n<h2>React</h2>\n<a href=\"https://github.com/Swizec/react-fractals\"><img class=\"alignnone size-full wp-image-7315\" src=\"http://swizec.com/blog/wp-content/uploads/2016/12/react-tree-small.gif\" alt=\"react-tree-small\" /></a>\n<p>Based on Jason&#8217;s and Evan&#8217;s tips, I added mouse event throttling to my demo to make it faster. Turns out my original tree wasn&#8217;t so slow because React is slow. It was slow because I was slamming the rendering engine with so many requests per refresh cycle.</p>\n<p>I tried throttling to <code>requestAnimationFrame</code>, but that didn&#8217;t work so good. Throttling to React&#8217;s redraw cycle was easy and works well.</p>\n<pre lang=\"javascript\">onMouseMove(event) {\n    if (this.running) return;\n    this.running = true;\n\n    // calculate stuff\n\n    this.setState({\n        heightFactor: scaleFactor(y),\n        lean: scaleLean(x)\n    });\n    this.running = false;\n}\n</pre>\n<p>Check if update is running, do update if not. This works because React&#8217;s engine is synchronous.</p>\n<p>It might stop working when React Fiber is out. I think. ¯\\<em>(ツ)</em>/¯</p>\n<h2>Preact</h2>\n<a href=\"https://github.com/developit/preact-fractals\"><img class=\"alignnone size-full wp-image-7313\" src=\"http://swizec.com/blog/wp-content/uploads/2016/12/preact-tree-small.gif\" alt=\"preact-tree-small\" /></a>\n<p>Jason used the <code>preact-compat</code> layer to make Preact pretend that it&#8217;s React. This might impact performance.</p>\n<p>What I love about the Preact example is that it uses async rendering to look smoother. You can see the redraw cycle lag behind the mouse movement producing curious effects.</p>\n<p>I like it.</p>\n<p>Here&#8217;s how he did it: <a href=\"https://github.com/Swizec/react-fractals/compare/master...developit:master\">diff on github</a></p>\n<p>In <code>package.json</code>, he added <code>preact</code>, <code>preact-compat</code>, and preact -compat clones for React libraries. I guess you need the latter so you don&#8217;t have to change your imports.</p>\n<p>He changed the functional stateless <code>Pythagoras</code> component into a stateful component to enable async rendering.</p>\n<pre lang=\"javascript\">// src/Pythagoras.js\nexport default class {\n    render(props) {\n        return Pythagoras(props);\n    }\n}\n</pre>\n<p>And enabled debounced asynchronous rendering:</p>\n<pre lang=\"javascript\">// src/index.js\nimport { options } from 'preact';\noptions.syncComponentUpdates = false;\n\n//option 1:  rIC + setTimeout fallback\nlet timer;\noptions.debounceRendering = f =&gt; {\n    clearTimeout(timer);\n    timer = setTimeout(f, 100);\n    requestIdleCallback(f);\n};\n</pre>\n<p>My favorite part is that you can use Preact as a drop-in replacement for React and it Just Works <em>and</em> works well. Very promising for future performance optimizations in my current apps.</p>\n<h2>Inferno</h2>\n<a href=\"https://github.com/trueadm/inferno-fractals\"><img class=\"alignnone size-full wp-image-7312\" src=\"http://swizec.com/blog/wp-content/uploads/2016/12/inferno-tree-small.gif\" alt=\"inferno-tree-small\" /></a>\n<p>You <em>can</em> use Inferno as a drop-in replacement for React, and at first I did. Dominic says that impacts performance though, so he made a proper fork. You can see the <a href=\"https://github.com/Swizec/react-fractals/compare/master...trueadm:master\">diff on github</a>.</p>\n<p>Dominic changed all <code>react-scripts</code> references to <code>inferno-scripts</code>, and it&#8217;s a good sign that such a thing exists. He also changed <code>react</code> to <code>inferno-beta36</code>, which means my CTO definitely won&#8217;t let me use it in production yet.</p>\n<p>From there, the main changes are to the imports – React becomes Inferno – and he changed some class methods to bound fat arrow functions. I don&#8217;t know if that&#8217;s a stylistic choice or an Inferno requirement.</p>\n<p>He also had to change a string-based ref into a callback ref. Inferno doesn&#8217;t do string-based refs for performance reasons, and we need them so we can use D3 to detect mouse position on SVG. It&#8217;s easier than doing it ourselves.</p>\n<pre lang=\"javascript\">// src/App.js\n\nclass App extends Component {\n    // ...\n    svgElemeRef = (domNode) =&gt; {\n        this.svgElement = domNode;\n    }\n    // ...\n    render() {\n        // ..\n        \n    }\n</pre>\n<p>In the core <code>Pythagoras</code> component, he added two Inferno-specific props: <code>noNormalize</code> and <code>hasNonKeyedChildren</code>.</p>\n<p>According to <a href=\"https://github.com/trueadm/inferno/issues/565\">this issue</a> from 8 days ago, <code>noNormalize</code> is a benchmark-focused flag that improves performance, and I can&#8217;t figure out what <code>hasNonKeyedChildren</code> does. I assume both are performance optimizations for the Virtual DOM diffing algorithm.</p>\n<h2>Vue</h2>\n<a href=\"https://github.com/yyx990803/vue-fractal\"><img class=\"alignnone size-full wp-image-7314\" src=\"http://swizec.com/blog/wp-content/uploads/2016/12/vue-tree-small.gif\" alt=\"vue-tree-small\" /></a>\n<p>This… this took a lot of work. Kudos to Evan and the original forker Phan An!</p>\n<p>Vue doesn&#8217;t aim to mimic React&#8217;s API, so this is an almost complete rewrite. I&#8217;d show you the diff on Github, but it won&#8217;t let me do that. You can <a href=\"https://github.com/yyx990803/vue-fractal\">see the code though</a>.</p>\n<p>You can still recognize the <a href=\"https://github.com/yyx990803/vue-fractal/blob/master/src/components/Pythagoras.js\">core <code>Pythagoras</code> component</a>. Evan used <code>transform-vue-jsx</code> to enable JSX inside Vue. So we know that&#8217;s something you can do.</p>\n<p>The <a href=\"https://github.com/yyx990803/vue-fractal/blob/master/src/App.vue\">main <code>App.vue</code> file</a> though… I&#8217;m not used to reading that, so I can&#8217;t really explain the code. <em>But it looks so familiar.</em></p>\n<p>Let&#8217;s try.</p>\n<p>It&#8217;s split into a <code>&lt;template&gt;</code>, <code>&lt;script&gt;</code> and <code>&lt;style&gt;</code> section. Looks a bit like JSX or HTML, but template props are prefixed with a colon.</p>\n<p>Looks like Vue took the put-it-all-together componentization cue from React but decided to split by language anyway. I don&#8217;t know if that&#8217;s good or bad. It <em>looks</em> cleaner, but in my experience, splitting those eventually becomes burdensome.</p>\n<p>The App component still looks roughly like it used to, but it uses <code>data()</code> to define default state, <code>$refs</code> instead of <code>this.refs</code>, a <code>name</code> attribute instead of naming the class itself, a <code>components</code> attribute to define children, and a <code>methods</code> attribute to define class methods.</p>\n<p>Curious ?</p>\n<h2>Angular 2</h2>\n<a href=\"https://github.com/teropa/ng-fractals\"><img class=\"alignnone size-full wp-image-7324\" src=\"http://swizec.com/blog/wp-content/uploads/2016/12/ng2-tree-small.gif\" alt=\"Implementation: Tero Parviainen, JavaScript consultant\" /></a>\n<p>I&#8217;ve never been a fan of Angular, but this looks pretty good. Although it did feel extremely janky on my machine.</p>\n<p>I don&#8217;t know why. Maybe all that type checking from TypeScript adds runtime overhead after transpiling?</p>\n<p>The code is a major rewrite, obviously. Tero had to port it all into TypeScript and I find that impressive. I sure wouldn&#8217;t ?</p>\n<p>I wonder how the language barrier affects reusability of random libraries you find online ?</p>\n<p>The code also looks like it has many more files. <code>App</code> is split into <code>app.module.ts</code>, <code>app.component.ts</code>, <code>app.component.html</code>, and <code>app.component.css</code>. Same with <code>Pythagoras</code>.</p>\n<p>This implies Angular is sticking with the traditional one-language-per-file webdev separation &#8230; although when you look at an Angular <code>html</code> file &#8230;</p>\n<pre lang=\"javascript\">\n<div class=\"App-header\">\n  <h2>This is a dancing Pythagoras tree</h2>\n</div>\n<p class=\"App-intro\">\n  <svg #svg\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        style=\"border: 1px solid lightgray\">\n    <g app-pythagoras\n       [w]=\"baseW\"\n       [heightFactor]=\"heightFactor\"\n       [lean]=\"lean\"\n       [x]=\"width / 2 - 40\"\n       [y]=\"height - baseW\"\n       [lvl]=\"0\"\n       [maxlvl]=\"currentMax\" />\n  </svg>\n</p>\n</pre>\n<p>That&#8217;s some funny looking HTML.</p>\n<p>I&#8217;m also not sure I understand the difference between a module and a component. It looks like the module declares certain imports, children components, and stuff. But each component still declares its own CSS and template imports.</p>\n<p>Smells like a framework optimized for very large teams. I&#8217;ve never been a part of one of those, so I can&#8217;t say how good it is for the use-case it was designed for.</p>\n<h2>CycleJS</h2>\n<a href=\"https://github.com/wmaurer/cyclejs-fractals\"><img class=\"alignnone size-full wp-image-7325\" src=\"http://swizec.com/blog/wp-content/uploads/2016/12/cyclejs-tree-small-1.gif\" alt=\"Implementation: Wayne Maurer, founder of Lambda IT\" /></a>\n<p>Now this… this was smooth on my machine. Maybe it just feels smooth because I looked at it right after the Angular version, but damn.</p>\n<p>Wayne translated everything into TypeScript, but it doesn&#8217;t look like CycleJS <em>requires</em> that. Despite that, he was able to keep the same simple file structure as the original. I like that.</p>\n<p>It&#8217;s hard for me to tell what he changed because of TypeScript and what&#8217;s different because of CycleJS. Looks like he&#8217;s not using classes to define CycleJS components. The structure looks more like the old school closure approach.</p>\n<pre lang=\"javascript\">export function App(sources: Sources): Sinks {\n    const factorAndLean$ = sources.DOM.select('#the-svg') //...\n \n    const args$ = xs.combine(factorAndLean$, xs.periodic(500) //...\n \n    const pythagoras$ = Pythagoras(args$);\n \n    const vtree$ = pythagoras$.map(x =&gt;\n        div(Styles.App, [ // ...\n        \n    return {\n        DOM: vtree$\n    };\n}\n</pre>\n<p>This would take some getting used to.</p>\n<p>The part I really dislike is how Wayne specifies the DOM in CycleJS. The main App looks like this:</p>\n<pre lang=\"javascript\">        div(Styles.App, [\n            div(Styles.AppHeader, [\n                img(Styles.AppLogo, { attrs: { src: 'cyclejs_logo.svg' } }),\n                h2('This is a dancing Pythagoras tree')\n            ]),\n            p(Styles.AppIntro, [\n                svg('#the-svg', { attrs: { height: svgDimensions.height, width: svgDimensions.width, style: 'border: 1px solid lightgray' } }, [ x ])\n            ])\n        ])\n</pre>\n<p>Looks a lot like using the <code>React.createElement</code> approach and I find that hard to read. CycleJS does support JSX however, so I&#8217;m not sure why he&#8217;s not using it.</p>\n<p>That said, the end result is phenomenal.</p>\n<p>Edit on Dec 24th: as @spion pointed out, it turns out the CycleJS example only renders 2^10 rectangles. Half as much as the other examples, due to how <code>.take</code> works. This has a huge effect on the jankiness.</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/spion\">@spion</a> <a href=\"https://twitter.com/dan_abramov\">@dan_abramov</a> <a href=\"https://twitter.com/waynemaurer\">@waynemaurer</a> <a href=\"https://twitter.com/andrestaltz\">@andrestaltz</a> just checked, document.getElementsByTagName(&#39;rect&#39;).length does indeed return just 1024 🙂</p>\n<p>&mdash; Swizec (@Swizec) <a href=\"https://twitter.com/Swizec/status/812724325392318464\">December 24, 2016</a></p></blockquote>\n<p>Edit 2: fixed the code in a local copy, updated the gif, still smooth as hell. I&#8217;m impressed.</p>\n<h2>Conclusion</h2>\n<p>I have no idea which is fastest. They all look smooth to me. Maaaybe Vue is the smoothest. Or maybe Inferno. I like that Preact enables asynchronous rendering. That was cool to see.I&#8217;m biased against Angular, and found CycleJS hella impressive.</p>\n<p>React is king in the “Good Enough And I Already Know How To Use It” department.</p>\n<p>I don&#8217;t foresee migrating my code to Vue, Angular, or CycleJS any time soon. Too much work. Preact or Inferno as drop-ins? Waiting to see what React Fiber does.</p>\n<p>My biggest takeaway from this experiment though: Buy a new computer. When others made gifs it looked smooth as hell!</p>\n<p>If you want to <strong>learn</strong> more about <strong>drawing interactive pictures</strong>, building <strong>animations</strong>, and creating <strong>declarative data vizualisations</strong>, you should pre-order my new <a href=\"https://gumroad.com/l/mTWg\">React+D3v4 book</a>. It&#8217;s coming out soon, and there will be a chapter on leveraging Preact and Inferno for speed optimization.</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"e564b282-2640-5860-b5f6-a5f28b70f4a8"}}