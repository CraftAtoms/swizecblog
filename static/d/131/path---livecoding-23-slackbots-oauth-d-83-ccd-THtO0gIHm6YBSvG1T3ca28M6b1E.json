{"data":{"wordpressPost":{"title":"Livecoding #23: Slackbots and OAuth","content":"<p><em>This is a Livecoding Recap – an almost-weekly post about interesting things discovered while livecoding ?. Always under 500 words and with pictures. You can follow my channel, <a href=\"https://livecoding.tv/swizec\">here</a>. New streams almost <strong>every Sunday at 2pm PDT</strong>. There’s live chat, come say hai ?</em></p>\n<p><iframe src=\"https://www.livecoding.tv/swizec/videos/4OmVK/embed\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"true\" scrolling=\"no\"></iframe></p>\n<p>This is embarrassing. That <a href=\"https://swizec.com/blog/livecoding-22-a-door-answering-slackbot/swizec/7038\">Slack bot that opens doors</a> from last week… it still doesn&#8217;t work. I thought we almost had it. I thought I’d identified the hard part. I thought it was just a matter of sitting down and smashing it out.</p>\n<p>I was blindsided by OAuth and the exploding complexity that always comes in tutorials and API docs! They show you how simple their API is. How absolutely beautiful to use!</p>\n<p>One line of code, two clicks of set up, and you&#8217;re sending messages to Slack like a champ. Two clicks, a bit of code, and you&#8217;re a bot! You can listen to people&#8217;s conversations.</p>\n<p>Champ! King of the world. ??</p>\n<figure>\n<img src=\"http://i.imgur.com/jdqcwa6.png\" alt=\"\" /><br />\n</figure>\n<p>Oh, you want to <em>actually</em> receive the promised POST requests from those message buttons? Boy, do I have a trip for you!</p>\n<p>First, you have to set up a Slack app. Not an ad-hoc custom integration like you&#8217;ve had until now. Oh no, you need a <em>real</em> app. It takes a few clicks on this screen:</p>\n<figure>\n<img src=\"http://i.imgur.com/X3cgSTS.png\" alt=\"\" /><br />\n</figure>\n<p>Then it&#8217;s going to say that this app is part of your team, <em>but it&#8217;s not</em>. You have to set up OAuth, have a server that can do OAuth, and then authorize your team with this new app. You need to add an <code>https</code> URL on this screen:</p>\n<figure>\n<img src=\"http://i.imgur.com/pr9miPw.png\" alt=\"\" /><br />\n</figure>\n<p>On the server side, you&#8217;re in for a world of doubya-tee-eff, mate. If you&#8217;re on express.js, then you can use <a href=\"https://github.com/simov/grant\">Grant</a> to set up Slack OAuth somewhat painlessly. <em>In theory</em>, this is all it takes:</p>\n<pre lang=\"javascript\">\r\n// app.js\r\nvar session = require('express-session'),\r\n    Grant = require('grant-express');\r\n\r\nvar grant = new Grant({\r\n    server: {\r\n        protocol: 'https',\r\n        host: 'swizec.ngrok.io',\r\n        callback: '/callback',\r\n        transport: 'session',\r\n        state: true\r\n    },\r\n    slack: {\r\n        key: '14110144963.81022664631',\r\n        secret: '24df277cd8e3d24e32087885c6ee7c80',\r\n        scope: ['chat:write:bot', 'chat:write:user', 'channels:read', 'commands', 'incoming-webhook'],\r\n        //callback: '/connect/slack/callback'\r\n    }\r\n});\r\n\r\n// ...\r\n\r\napp.use(session({secret: 'grant',\r\n                 resave: false,\r\n                 saveUninitialized: true}));\r\n\r\napp.use(grant);\r\n</pre>\n<p>This uses express&#8217;s in-memory session storage, which means that as soon as you restart the server, sessions will be forgotten. The good news is that you don&#8217;t have to hold on to them; you just need them long enough to do the OAuth dance.</p>\n<p>Oh ,and that <code>callback</code> parameter Grant asks for? That is <em>not</em> the same as the <code>Redirect URL</code> that Slack asks for. Set them to the same value, and you&#8217;re going for an endless redirect ride. Learned that the hard way. ☺️</p>\n<p>Go to <code>&lt;server&gt;/connect/slack</code> and do the OAuth dance for your team. If all goes well, Slack rewards you with this message:</p>\n<figure>\n<img src=\"http://i.imgur.com/tKSzdCf.png\" alt=\"\" /><br />\n</figure>\n<p>If you go to Slack&#8217;s app management panel, you should see something like this:</p>\n<figure>\n<img src=\"http://i.imgur.com/fXYJiPV.png\" alt=\"\" /><br />\n</figure>\n<p>/partyhard</p>\n<p>Your app is officially set up for your team. The slash command you created while debugging and trying to figure out what&#8217;s up works. You say <code>/hai</code> and it says <code>pong</code>.</p>\n<figure>\n<img src=\"http://i.imgur.com/IIb41yd.gif\" alt=\"\" /><br />\n</figure>\n<p>But when you click a button on a message that you sent, you still get the error. No POST request hits your server. It’s an immediate error. It doesn&#8217;t even <em>try</em> to do the thing.</p>\n<figure>\n<img src=\"http://i.imgur.com/jdqcwa6.png\" alt=\"\" /><br />\n</figure>\n<p>It&#8217;s an identity issue, I think. Based on <a href=\"https://swizec.com/blog/livecoding-22-a-door-answering-slackbot/swizec/7038\">last week&#8217;s livecoding</a>, we&#8217;re sending Slack messages based on an ad-hoc integration API key. But we&#8217;re a real app, so we should send them as the app.</p>\n<p>Slack&#8217;s documentation doesn&#8217;t say how to do that. It talks only about API keys, but apps don&#8217;t get API keys. Or I don&#8217;t understand the docs. Or I&#8217;m blind.</p>\n<p>I should send them an email. ?</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"259bbeb8-efe4-5b4a-b316-6592f1c3a59a"}}