{"data":{"wordpressPost":{"title":"Mixing mixpanel into backbone","content":"<p><em>&#8220;Hey, so nobody&#8217;s looked at our <a class=\"zem_slink\" title=\"Mixpanel\" href=\"http://www.mixpanel.com\" target=\"_blank\" rel=\"homepage\">Mixpanel</a> integration in months and the product has changed a lot, so uh &#8230; can you fix that?&#8221;</em></p>\n<p>Every developer&#8217;s favourite thing to hear. Logs and metrics going out of sync with the product they&#8217;re logging and metricsing. Always fun to fix &#8230;</p>\n<p>How can we avoid ever fixing this again?</p>\n<p>We&#8217;d like an automagic logging or metrics system that fulfills two criteria:</p>\n<ul>\n<li>self-adapting</li>\n<li>doesn&#8217;t show up in the code</li>\n</ul>\n<p>In my case, I had to fix an old javascript integration of Mixpanel. Our approach was a mix of globally assigning <a class=\"zem_slink\" title=\"Observer pattern\" href=\"http://en.wikipedia.org/wiki/Observer_pattern\" target=\"_blank\" rel=\"wikipedia\">event listeners</a> and peppering our view/model/whatever code with <code>mixpanel.track</code> calls.</p>\n<p>The problem is that global event listeners will eventually fall out of sync when a class name changes or a link is removed. Peppering your code with calls to tracking code is even more brittle.</p>\n<p>Tracking calls are essentially comments on your code. Comments and code <em>always</em> drift apart. Always. It&#8217;s just a fact. The same thing happens to tracking calls.</p>\n<p>Except it&#8217;s even worse than comments. At least comments are helpful in theory. Tracking code just muddies the logic of your functions. <code>do_something</code> becomes <code>do_something_and_track_business_event_X</code>.</p>\n<p>Of course you won&#8217;t name your functions like that because you&#8217;re not a tool, but you <em>have</em> introduced an extra side-effect. Nobody likes strange side-effects. Especially the kind that make calls to remote services.</p>\n<p>Therefore, the only solution is moving tracking code an <a class=\"zem_slink\" title=\"Abstraction layer\" href=\"http://en.wikipedia.org/wiki/Abstraction_layer\" target=\"_blank\" rel=\"wikipedia\">abstraction layer</a> higher. Instead of relying on everyone in the team to maintain tracking calls, move them into the framework they&#8217;re using.</p>\n<p>For us it&#8217;s Backbone. So last night I wrote a simple 30 line <a class=\"zem_slink\" title=\"Mixin\" href=\"http://en.wikipedia.org/wiki/Mixin\" target=\"_blank\" rel=\"wikipedia\">mixin</a> for Backbone views that makes sure we track <em>everything</em>.</p>\n<pre lang=\"javascript\">// copied straight from backbone\r\nvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\r\n\r\n// inspired by Backbone\r\nBackbone.View.prototype.delegateEvents = _.wrap(\r\n    Backbone.View.prototype.delegateEvents, function (fn, events) {\r\n        if (!(events || (events = _.result(this, 'events')))) return this;\r\n\r\n        var track = _.bind(function (event) {\r\n            var $target = $(event.currentTarget),\r\n                event_name = $target.attr(\"data-mixpanel\"),\r\n                data = !!this.model ? this.model.toJSON() : {};\r\n\r\n            if (event_name) {\r\n                mixpanel.track(event_name, data);\r\n            }\r\n        }, this);\r\n\r\n        for (var key in events) {\r\n            var match = key.match(delegateEventSplitter),\r\n                type = match[1],\r\n                selector = match[2];\r\n\r\n            if (type == \"click\" || type == \"submit\") {\r\n                if (selector === \"\") {\r\n                    this.$el.on(type, track);\r\n                }else{\r\n                    this.$el.on(type, selector, track);\r\n                }\r\n            }\r\n        }\r\n\r\n        return fn.apply(this);\r\n    });</pre>\n<p>The code wraps and is heavily inspired by <code>Backbone.View.delegateEvents</code>, which is called when a new view is instantiated. Its job is to go through the events configuration hash and bind the view&#8217;s event listeners to correct events on particular <a class=\"zem_slink\" title=\"HTML element\" href=\"http://en.wikipedia.org/wiki/HTML_element\" target=\"_blank\" rel=\"wikipedia\">HTML elements</a>.</p>\n<p>Nifty.</p>\n<p>My mixin does the same, but only cares about <code>click</code> and <code>submit</code> events since those represent most user actions. Every such event is bound to a simple <code>track</code> function, which takes the <code>data-mixpanel</code> property from the element as an event&#8217;s business name, and uses the view&#8217;s whole model as <a class=\"zem_slink\" title=\"Metadata\" href=\"http://en.wikipedia.org/wiki/Metadata\" target=\"_blank\" rel=\"wikipedia\">meta data</a>.</p>\n<p>I figured the more data we can collect the better. You never know what you&#8217;re going to need in the future.</p>\n<p>From now on, we just have to add a <code>data-mixpanel</code> property to any element whose user actions we want to track. No property, no tracking. Simple.</p>\n<p>And yes, I know what you&#8217;re thinking, <em>surely</em> there&#8217;s already a plugin for this. There is, it&#8217;s called <a href=\"https://github.com/bnorton/backbone-mixpanel\">backbone-mixpanel</a>. Looks like a pretty good solution, but for once I wanted to put my NotInventedHere blinds on and make something myself. ðŸ™‚</p>\n<p>Either way, this should remove the friction between us and good actionable metrics.</p>\n<p>PS: yes, before you get up in arms, I do need to add the code that cleans up events by wrapping the <code>Backbone.View.undelegateEvents</code> method.</p>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/?px\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" alt=\"Enhanced by Zemanta\" src=\"http://img.zemanta.com/zemified_e.png?x-id=238011f3-8be3-4b29-a1af-b7f9ac498401\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"897780a3-19c1-5f62-90ee-ce9603259ce8"}}