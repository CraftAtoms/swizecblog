{"data":{"wordpressPost":{"title":"Closure and currying magic for cleaner javascript","content":"<p>Sometimes you find a piece of <a class=\"zem_slink\" title=\"JavaScript\" href=\"http://en.wikipedia.org/wiki/JavaScript\" rel=\"wikipedia\">javascript</a>, a perfect piece of javascript, it does <em>exactly</em> what you need! Perfect! You could spend hours, even days, getting something to work and someone&#8217;s already done it, shared the code on the internets even!</p>\n<p>Hooray!</p>\n<p>But &#8230; the code looks something like this:</p>\n<pre lang=\"javascript\">// to populate later\r\nvar data = [], oldData = [], semiOldData = [];\r\nvar a_switch = \"blah\";\r\n\r\nfunction do_something() {\r\n   // use subset of globals\r\n}\r\n\r\nfunction something_else() {\r\n   // use some other globals\r\n}\r\n\r\n// etc.\r\n\r\nfunction update() {\r\n  // use all of the above\r\n}</pre>\n<p>The code works &#8230; if you only need to use it once. What if you need two independent widgets? Well, you could take the time to recode all of that so it becomes <a class=\"zem_slink\" title=\"Purely functional\" href=\"http://en.wikipedia.org/wiki/Purely_functional\" rel=\"wikipedia\">purely functional</a>.</p>\n<p>But that&#8217;s going to be a problem &#8211; the code heavily relies on state. Ok maybe object oriented? Object oriented kind of sucks in javascript and you&#8217;d have to recode all of that, have to perfectly understand it etc.</p>\n<p>Pain in the arse!</p>\n<h2>Closure magic</h2>\n<p>There&#8217;s a better way &#8211; put it in a closure.</p>\n<pre lang=\"javascript\">var my_widget = (function (data_function) {\r\n// to populate later\r\nvar data = [], oldData = [], semiOldData = [];\r\nvar an_index = 1;\r\n\r\nfunction do_something() {\r\n   // use subset of globals\r\n}\r\n\r\nfunction something_else() {\r\n   // use some other globals\r\n}\r\n\r\n// etc.\r\n\r\nfunction update(index) {\r\n  an_index = index;\r\n  data = data_function();\r\n  // use all of the above\r\n}\r\n\r\nreturn update;\r\n});</pre>\n<p>Now you get to create the widget with a simple function call. Hooray!</p>\n<p>And the function returns its own update function so you can run an update whenever you need. All the state and weirdness is neatly packaged inside the closure, the code itself doesn&#8217;t need to know anything about the outside state.</p>\n<p>By changing the update function a little bit you can even affect the internal state of the closure by calling the <a class=\"zem_slink\" title=\"Currying\" href=\"http://en.wikipedia.org/wiki/Currying\" rel=\"wikipedia\">curried function</a>.</p>\n<h2>Closures upon <a class=\"zem_slink\" title=\"Closure (computer science)\" href=\"http://en.wikipedia.org/wiki/Closure_%28computer_science%29\" rel=\"wikipedia\">closures</a></h2>\n<p>Here&#8217;s where it gets even more magical. Stacking closures to achieve true greatness.</p>\n<p>Code is the best way to explain what I mean &#8230;</p>\n<pre lang=\"javascript\">// these functions are used to slice up data\r\nvar slice_functions = {\r\n        students: function (item) { return !!item.cs_student; },\r\n        others: function (item) { return !item.cs_student; },\r\n        everyone: function (item) { return true; }\r\n    },\r\n        slice_func = slice_functions.students,\r\n\r\n// these functions provide cleaned up data\r\n// all must use the same main slice_func\r\n        data_functions = {\r\n            year_vs_pay: function (year) {\r\n                var data = DATA.filter(slice_func).filter(function (item) {\r\n                    return item.years_study == year;\r\n                }),\r\n                // ...\r\n                return fin_data;\r\n            },\r\n            study_vs_pay: function (study) {\r\n                var data = DATA.filter(slice_func).filter(function (item) {\r\n                    return item.study_time == study;\r\n                }),\r\n                // ...\r\n                return fin_data;\r\n            },\r\n            // ...</pre>\n<p>Those are our data functions, when creating new widgets we can provide them as the <em>data_function</em> argument shown above.</p>\n<p>Now comes the tricky part &#8211; we can externally change the <em>slice_func</em> and all the data_functions (now safely tucked inside closures) <strong>change</strong> their behaviour by using the new slice_function since variables inside closures are pointers rather than copies.</p>\n<p>Magic!</p>\n<p>We have reached a situation where all code is tucked neatly inside closures. The closures themselves have no knowledge of the outside world, there are no flags they need to check, no external data anywhere. All they care about is running the data function and doing their thing.</p>\n<p>And yet, through the magic of closures, we get to globally change their behaviour without worrying about internal state <em>or</em> having to call a specific function to do something on an object.</p>\n<p>To me this feels cleaner than any abstraction <a class=\"zem_slink\" title=\"Object-oriented programming\" href=\"http://en.wikipedia.org/wiki/Object-oriented_programming\" rel=\"wikipedia\">object oriented programming</a> has ever come up with.</p>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles</h6>\n<ul class=\"zemanta-article-ul\">\n<li class=\"zemanta-article-ul-li\"><a href=\"http://www.adafruit.com/blog/2012/03/14/breakout-connect-your-arduino-sensors-and-actuators-to-javascript/\">Breakout &#8211; Connect your Arduino sensors and actuators to javascript</a> (adafruit.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://stackoverflow.com/questions/9684105/calling-javascript-functions-from-a-java-applet\">Calling Javascript functions from a Java Applet</a> (stackoverflow.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://swizec.com/blog/the-commonest-javascript-bug/swizec/3740\">The commonest javascript bug</a> (swizec.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://www.websanova.com/tutorials/jquery/building-collections-efficiently-using-jquery\">Building Collections Efficiently Using jQuery</a> (websanova.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://www.websanova.com/tutorials/jquery/10-coding-tips-to-write-superior-jquery-plugins\">10 Coding Tips to Write Superior jQuery Plugins</a> (websanova.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://stackoverflow.com/questions/9058248/good-examples-for-using-a-closure-in-javascript\">Good examples for using a Closure in Javascript</a> (stackoverflow.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://lostechies.com/derekgreer/2012/02/17/javascript-closures-explained/\">JavaScript Closures Explained</a> (lostechies.com)</li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=dd5a4e07-700e-44df-b113-8195cf2d3133\" alt=\"Enhanced by Zemanta\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"04804e10-2f13-5bd2-bf1a-d29b40de17fb"}}