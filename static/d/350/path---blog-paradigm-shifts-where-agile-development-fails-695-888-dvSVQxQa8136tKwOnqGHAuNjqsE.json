{"data":{"wordpressPost":{"title":"Paradigm shifts &#8211; where agile development fails","content":"<p>As some of you perhaps know, I&#8217;m developing a twitter client and have been for a while. Because I&#8217;ve always been extremely eager to get something useful out quickly as possible and because an important factor in development has always been to accomodate user requests there was really only one development process that could work for me &#8211; agile development.</p>\n<p>Because I need to be able to respond to requirement changes quickly and because it has to be developed fast I can&#8217;t make a design very far in advance and consider it a static robust structure that I have to adhere to. Doing it like that I still wouldn&#8217;t have anything developed and would most probably still be planning like a maniac. However, there were two very painful times in the process, both would be completely averted with a rigid design structure and both are a direct result of being agile.</p>\n<p>Paradigm shifts &#8211; where agile development completely fails. See because of being agile I made a product, a working product that worked lovably well. Then I decided I wanted it to support having more than one user logged in at a time. Yay, paradigm shift. This is the point where I had to rework most of the code to send user id&#8217;s around, store them in objects etc. Overall, a great deal of work making sure everything now works for more than one user at a time, because the previous version was made to work for just one user and was built around the idea that at any point in code the user is globally known and the code can count on that.</p>\n<p>Well that changed. A lot of work to change it.</p>\n<p>Next such large paradigm shift was two weeks ago when I decided it was time to make a protocol abstraction layer and support koornk as well as twitter. Easier said than done! At first I thought I could get away with just putting an abstraction layer object that behaves as a thin wrapper around protocol specific objects that deal with calling the API and converting results into a common form.</p>\n<p>But then, you can&#8217;t guarantee user id&#8217;s will be unique across different APIs. Large change. Then, you can&#8217;t guarantee message id&#8217;s will be unique across API&#8217;s. Another large change. Then you can&#8217;t call everything tweeting, because sometimes the more appropriate status report is clucking and so a bunch of little things need to be changed to fully abstractify an application from an API it was tightly coupled with.</p>\n<p>So to conclude, paradigm shifts are a very difficult and painful process and they only occur when you&#8217;re staying agile.</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"7296d607-5f71-5e98-8e73-f6149a0675ca"}}