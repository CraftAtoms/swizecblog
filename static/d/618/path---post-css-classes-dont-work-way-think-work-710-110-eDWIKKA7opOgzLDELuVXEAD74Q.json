{"data":{"wordpressPost":{"title":"CSS classes don&#8217;t work the way you think they work","content":"<pre><code>&lt;p class=&quot;blue green red&quot;&gt;This is some text&lt;/p&gt;\n</code></pre>\n<p>Which color is this text going to be?</p>\n<p>No cheating, give it a think ??</p>\n<p>.</p>\n<p>.</p>\n<p>.</p>\n<p>.</p>\n<p>Blue. The answer is blue. ?</p>\n<p>Look. I&#8217;m not lying. It&#8217;s really blue.</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"BLvpER\" data-default-tab=\"html,result\" data-user=\"swizec\" data-embed-version=\"2\" data-editable=\"true\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/swizec/pen/BLvpER/\">BLvpER</a> by Swizec Teller (<a href=\"http://codepen.io/swizec\">@swizec</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<p><script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script></p>\n<p>You can use any permutation of <code>blue green red</code> â€“ the text is still blue. Try it! Edit the codepen. Play around ðŸ™‚</p>\n<p>Did you find the pattern?</p>\n<p>CSS classes apply in the order in which they are defined, not the order in which they are invoked. This is <em>not</em> intuitive.</p>\n<p>Look: if you switch around the CSS rules, the text becomes red.</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"EgGWNY\" data-default-tab=\"css,result\" data-user=\"swizec\" data-embed-version=\"2\" data-editable=\"true\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/swizec/pen/EgGWNY/\">EgGWNY</a> by Swizec Teller (<a href=\"http://codepen.io/swizec\">@swizec</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<p><script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script></p>\n<p>Same HTML, same CSS classes, different order of definitions. Try it; change the code.</p>\n<p>Maybe this is obvious to everyone but me, but I spent an embarrassing amount of time yesterday and today debugging some React components. It hits you when common components have default styling, and you want to override it in a specific instance.</p>\n<pre lang=\"javascript\">\nconst P = ({ className, children }) => (\n    <p className={`italic blue ${className}`}>{children}</p>\n); // default P\n\n// ...\n\nconst Error = ({ errorText }) => (\n    <p className=\"red\">Red error!</p>\n); // doesn't become red\n</pre>\n<p>The generic <code>P</code> component returns a <code>&lt;p&gt;</code> element with an <code>italic</code> and a <code>blue</code> class. You can expect text to be italic and blue by default.</p>\n<p>Please don&#8217;t do that in real life. This is just an example.</p>\n<p>It takes a <code>className</code> prop so you can extend classes used.</p>\n<p>But when you use the <code>Error</code> component, which produces <code>&lt;p class=&quot;italic blue red&quot;&gt;Red error!&lt;/p&gt;</code>, it&#8217;s not red. It&#8217;s blue because your CSS defines <code>.red</code> first and <code>.blue</code> second.</p>\n<p>?</p>\n<p>There is no workaround. This is expected behavior. The <a href=\"https://www.w3.org/TR/selectors/#specificity\">relevant part</a> of W3C spec makes no mention of HTML attribute ordering.</p>\n<p>How did I go 15 years without ever noticing? ?</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"04b767b1-7787-5b18-a124-14071412a648"}}