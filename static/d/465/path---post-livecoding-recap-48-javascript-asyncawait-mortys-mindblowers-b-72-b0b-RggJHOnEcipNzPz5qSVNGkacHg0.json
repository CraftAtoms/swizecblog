{"data":{"wordpressPost":{"title":"Livecoding Recap 48: JavaScript async/await and Morty&#8217;s Mindblowers","content":"<p><em>This is a Livecoding Recap ‚Äì an almost-weekly post about interesting things discovered while livecoding. Usually shorter than 500 words. Often with pictures. Livecoding happens almost <strong>every Sunday at 2pm PDT</strong> on multiple channels. You should follow <a href=\"https://www.youtube.com/TheSwizec\">My Youtube</a> channel to catch me live.</em></p>\n<p><iframe width=\"580\" height=\"326\" src=\"https://www.youtube.com/embed/a4g81widnGM?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe></p>\n<p>This Sunday, I created an excuse to learn JavaScript async/await: <a href=\"http://mortysmindblowers.fun\">Morty&#8217;s Mindblowers</a>.</p>\n<p>Async/await is meant to be the bestest way to deal with asynchronous code in JavaScript. Even better than promises. And since the web is littered with async/await tutorials, it must be really hard, right?</p>\n<p>¬Ø&#92;_(„ÉÑ)_/¬Ø</p>\n<p>No‚Ä¶ <a href=\"https://swizec.com/blog/javascript-promises-monads/swizec/7814\">just like Promises</a>, it&#8217;s nothing but a monad. A nice syntax sugarified monad, but still a monad. You can learn how to use async/await in 10 seconds.</p>\n<blockquote class=\"twitter-tweet\" data-width=\"550\">\n<p lang=\"en\" dir=\"ltr\">I&#39;m kind of disappointed in how simple async/await is.</p>\n<p>It&#39;s just a monad with some syntax sugar üòÄ</p>\n<p>&mdash; Swizec (@Swizec) <a href=\"https://twitter.com/Swizec/status/914613801785319425?ref_src=twsrc%5Etfw\">October 1, 2017</a></p></blockquote>\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n<p><a href=\"https://youtu.be/a4g81widnGM?t=2070\">Watch</a>. Read üëá</p>\n<p>If you know Promises, you know async/await. Congratz! üëè</p>\n<p>Let&#8217;s say you want to fetch a list of images from Imgur and narrow it down to videos. With Promises, it looks like this:</p>\n<pre lang=\"javascript\">\nclass Imgur {\n    static URL = 'https://api.imgur.com/3/';\n    static CLIENT_ID = 'c848e36012571f2';\n    \n    static gifs(page) {\n         return fetch(`${Imgur.URL}gallery/hot/rising/${page}`,\n                     {headers: { Authorization: `Client-ID ${Imgur.CLIENT_ID}`}}\n        ).then(res => res.json())\n         .then(json => {\n             if (json.success) {\n                 return json.data.filter(({ type }) => type === 'video/mp4');\n             }else{\n                 throw new Error(json.data.error);\n             }\n         })\n    }\n}\n</pre>\n<p>We have a static <code>gifs()</code> method that uses <code>fetch</code> to talk to Imgur and return a Promise. The promise resolves with either a list of Imgur videos, or it rejects with an API error.</p>\n<p>Using <code>static</code> lets us call this API without instantiating an object. <code>Imgur.gifs()</code> for instance. Great for when you&#8217;re using classes to group stuff and don&#8217;t need objects.</p>\n<p>Ok, so this code is pretty readable, right? Fetch data, then parse it, then do things.</p>\n<p>With async/await, that same code looks like this:</p>\n<pre lang=\"javascript\">\nclass Imgur {\n    static URL = 'https://api.imgur.com/3/';\n    static CLIENT_ID = '<your_id>';\n\n    static async gifs(page) {\n        const res = await fetch(`${Imgur.URL}gallery/hot/rising/${page}`,\n                                {headers: { Authorization: `Client-ID ${Imgur.CLIENT_ID}`}}),\n              json = await res.json();\n\n        if (json.success) {\n            return json.data.filter(({ type }) => type === 'video/mp4');\n        }else{\n            throw new Error(json.data.error);\n        }\n    }\n}\n</pre>\n<p>I don&#8217;t know if that&#8217;s more readable, but I can see the appeal. Your code looks just like any other code. No need to think about async stuff at all.</p>\n<p>You have to put <code>async</code> in front of your function name. That wraps it in a Promise. Anything you return is in a Promise monad. Time bubble to use the metaphor from my <a href=\"https://swizec.com/blog/javascript-promises-monads/swizec/7814\">JavaScript Promises in 2 minutes</a> article.</p>\n<p>You peek into that monad using the <code>await</code> keyword. It&#8217;s like wrapping your code in a <code>.then</code> callback.</p>\n<p>That&#8217;s really all there is to it. Once you say <code>json = await res.json()</code>, anything that uses that <code>json</code> variable gets wrapped in a <code>.then()</code> call.</p>\n<img class=\"alignnone size-full wp-image-7828\" src=\"https://swizec.com/blog/wp-content/uploads/2017/10/This-subreddits-reaction-when-asked-how-we-make-our-gifs-look-so-damn-good-Imgur.gif\" width=\"700\" height=\"393\" />\n<p>Any time you use the <code>Imgur.gifs()</code> method, you have to say <code>await</code> and your function must be wrapped in <code>async</code>.</p>\n<p>Oh, and you can wrap built-in React lifecycle hooks in <code>async</code> and it works as expected. That part is neat. However, you can&#8217;t have async getters. That would be cool.</p>\n<p>So yeah, we got the JavaScript async/await stuff working in a couple minutes, then we spent some half an hour figuring out how Imgur&#8217;s API works, and an hour or two trying to use flexbox to make the <code>&lt;video&gt;</code> tag shrink and grow.</p>\n<p>And in the end, we got <a href=\"http://mortysmindblowers.fun\">Morty&#8217;s Mindblowers</a>. It uses cut scenes from an episode of Rick &amp; Morty to show you random gifs from Imgur&#8217;s frontpage.</p>\n<p>Enjoy ü§ò</p>\n<a href=\"http://mortysmindblowers.fun\"><img src=\"https://swizec.com/blog/wp-content/uploads/2017/10/mortystill-1024x577.png\"  alt=\"\" class=\"alignnone size-large wp-image-7832\" srcset=\"https://swizec.com/blog/wp-content/uploads/2017/10/mortystill-1024x577.png 1024w, https://swizec.com/blog/wp-content/uploads/2017/10/mortystill-300x169.png 300w, https://swizec.com/blog/wp-content/uploads/2017/10/mortystill-768x433.png 768w, https://swizec.com/blog/wp-content/uploads/2017/10/mortystill.png 1128w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"46bf8697-9f73-5b51-b703-21c28ce09f1d"}}