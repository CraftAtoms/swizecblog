{"data":{"wordpressPost":{"title":"Always look for the gem","content":"<p>You can be doing something straightforward. Say, listing some items from the database and giving them an <code>id</code> so javascript can reference them. Because you know names are unique, you decide to use those for <code>id</code>&#8216;s.</p>\n<p>You&#8217;re using them for URL&#8217;s too, so it makes sense. Simplifies <a href=\"http://backbonejs.org/\">Backbone</a> routing code.</p>\n<p>At this point experienced developers get the heebie jeebies. A tiny little voice screaming <em>&#8220;Watch out!&#8221;</em> in the back of their head.</p>\n<p>I couldn&#8217;t remember why using <code>name</code> felt funny, so I ignored the little voice and barged on. I deployed.</p>\n<p>Bam. Didn&#8217;t work.</p>\n<p>After hours of debugging I finally traced the issue down to spaces in item names. Turns out <code>id=\"a word\"</code> doesn&#8217;t work. Who&#8217;d&#8217;ve thought? (hint: everyone)</p>\n<p>But that&#8217;s an easy fix right? Just do something like:</p>\n<pre lang=\"ruby\">\r\nid=\"<%= item.name.gsub(' ', '-') %>\"\r\n</pre>\n<p>Or add a function to the model. Whatever. The point is, all you have to do is replace spaces with dashes. Simple.</p>\n<p>But you&#8217;re wrong. You are creating a slug. It looks easy, but is actually very complicated. Luckily others have solved the problem already. Better than you.</p>\n<p>A quick Google search reveals a bunch of solutions do in fact exist, but <a href=\"https://github.com/rsl/stringex\">Stringex</a> comes out as the best solution for <a class=\"zem_slink\" title=\"Ruby (programming language)\" href=\"http://www.ruby-lang.org/\" target=\"_blank\" rel=\"homepage\">Ruby</a>. There should be plenty for any language you love.</p>\n<p>Why spend an hour looking for and learning how to use a gem instead of solving the problem in two minutes of coding?</p>\n<p>Because -&gt; from Stringex&#8217;s documentation:</p>\n<pre lang=\"ruby\">\r\n# A simple prelude\r\n\"simple English\".to_url => \"simple-english\"\r\n\"it's nothing at all\".to_url => \"its-nothing-at-all\"\r\n\"rock & roll\".to_url => \"rock-and-roll\"\r\n\r\n# Let's show off\r\n\"$12 worth of Ruby power\".to_url => \"12-dollars-worth-of-ruby-power\"\r\n\"10% off if you act now\".to_url => \"10-percent-off-if-you-act-now\"\r\n\r\n# You don't even wanna trust Iconv for this next part\r\n\"kick it en Français\".to_url => \"kick-it-en-francais\"\r\n\"rock it Español style\".to_url => \"rock-it-espanol-style\"\r\n\"tell your readers 你好\".to_url => \"tell-your-readers-ni-hao\"\r\n</pre>\n<p>Impressive to say the least.</p>\n<p>There&#8217;s the simple space to dash conversion, but Stringex handles various symbols and common substrings as well. Converting <code>$12</code> to <code>12-dollars</code> strikes me as something particularly useful I&#8217;d never come up with.</p>\n<p>Truth be told, the most advanced slug generation function I&#8217;ve ever come up with (and I&#8217;ve written many) only stripped non-alphanumeric characters from the string before changing spaces to dashes.</p>\n<p>It sucked.</p>\n<p>When you find yourself solving a simple problem, look for a gem. Focus your attention to the problem at hand and let others take care of the externalities. You won&#8217;t be sorry.</p>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/?px\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" alt=\"Enhanced by Zemanta\" src=\"http://img.zemanta.com/zemified_e.png?x-id=08b189ad-699b-42e3-b0db-11bebd9babfd\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"42177a36-0303-551b-8d43-d9ba03907242"}}