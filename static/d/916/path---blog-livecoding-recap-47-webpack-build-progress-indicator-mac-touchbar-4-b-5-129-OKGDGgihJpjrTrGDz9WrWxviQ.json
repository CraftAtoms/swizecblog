{"data":{"wordpressPost":{"title":"Livecoding Recap 47: Webpack build progress indicator for Mac Touchbar","content":"<p><em>This is a Livecoding Recap ‚Äì an almost-weekly post about interesting things discovered while livecoding. Usually shorter than 500 words. Often with pictures. Livecoding happens almost <strong>every Sunday at 2pm PDT</strong> on multiple channels. You should follow <a href=\"https://www.youtube.com/TheSwizec\">My Youtube</a> channel to catch me live.</em></p>\n<p><iframe width=\"580\" height=\"326\" src=\"https://www.youtube.com/embed/cwNlRu5Dy-Y?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe></p>\n<p>Today, we made history! Webpack progress indicator for the Mac Touchbar! Finally, even web developers can admit that thing is useful üòÅ</p>\n<p>Here it is in action on my day job project üëá</p>\n<blockquote class=\"twitter-tweet\" data-width=\"550\">\n<p lang=\"en\" dir=\"ltr\">Success. <a href=\"https://twitter.com/hashtag/webpack?src=hash\">#webpack</a> progress indicator on Mac Touchbar</p>\n<p>ü§òüèº <a href=\"https://t.co/8aFSv4iv40\">pic.twitter.com/8aFSv4iv40</a></p>\n<p>&mdash; Swizec (@Swizec) <a href=\"https://twitter.com/Swizec/status/909565004642316288\">September 17, 2017</a></p></blockquote>\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n<h2>Here&#8217;s how you set it up</h2>\n<p>You can start using it right now. All you need is an expensive laptop, my <a href=\"https://github.com/Swizec/touchbar_webpack_progress\">Touchbar Nyancat Webpack Progress app</a>, and my fork of <a href=\"https://github.com/Swizec/nyan-progress-webpack-plugin/tree/send-progress-to-touchbar\">nyan-progress-webpack-plugin</a>. Both are on Github.</p>\n<ul>\n<li><a href=\"https://github.com/Swizec/touchbar_webpack_progress\">Download the app</a>, run it. Set it up to run at startup, if you want to be fancy.</li>\n<li>Add my nyan-progress-webpack-plugin to your <code>package.json</code>. I&#8217;ll try to convince @alexkuz to merge it into his published package. When that happens, this step will be easier.</li>\n</ul>\n<pre lang=\"javascript\">\n// package.json\n\"dependencies\" {\n    // ...\n    \"nyan-progress-webpack-plugin\": \"git://github.com/Swizec/nyan-progress-webpack-plugin#send-progress-to-touchbar\",\n}\n</pre>\n<p>Then run installation:</p>\n<pre><code>$ npm install\n</code></pre>\n<p>Now you have my progress indicator. It can talk to your Touchbar when the app from step 1 is running.</p>\n<ul>\n<li> Update your Webpack config.</li>\n</ul>\n<pre lang=\"javascript\">\n// webpack.config.js\n\nplugins: [\n    // ...\n    new require('nyan-progress-webpack-plugin')({\n        sendProgressToTouchbar: true\n    })\n]\n</pre>\n<p>This enables a Nyan Cat webpack progress indicator in your terminal and tells it to send progress to the touchbar as well. It&#8217;s behind a feature flag so @alexkuz doesn&#8217;t get too upset when I make a pull request. Kind of a silly feature üôÇ</p>\n<ul>\n<li>Voil√†! Enjoy your Touchbar Progress indicator. </li>\n</ul>\n<h2>Here&#8217;s how it works</h2>\n<p>This joyful hack stands on the shoulders of giants. We used two pieces of open source software and made them work together:</p>\n<ol>\n<li>Alexkuz&#8217;s <a href=\"https://github.com/alexkuz/nyan-progress-webpack-plugin\">nyan-webpack-progress-indicator</a> provided all the logic to take Webpack&#8217;s build progress and do something</li>\n<li>Avatsaev&#8217;s <a href=\"https://github.com/avatsaev/touchbar_nyancat\">touchbar nyancat</a> provided the Touchbar integration because I don&#8217;t know much about native development.</li>\n</ol>\n<p>We took those two Nyan Cat‚Ä¶ things‚Ä¶ and added an HTTP server. That&#8217;s right. They talk to each other via HTTP because that was the easiest to implement. üòá</p>\n<p>The native app runs a web server built with <a href=\"https://github.com/httpswift/swifter\">Swifter</a>. This part was hard because documentation is scarce and because I&#8217;ve never done Swift code before.</p>\n<p>We added these lines to what looks like the most important Nyan cat file ‚Äì&nbsp;<code>NyanCatCanvas.swift</code>.</p>\n<pre><code class=\"swift\">// NyanCatCanvas.swift\n\nfunc downloadImage() {\n    // stuff that downloads nyan gif\n\n    server[\"/progress/:progress\"] = updateProgress()\n    do {\n        try server.start(12345)\n    } catch {\n        print(error)\n    }\n}\n\nfunc updateProgress() -&gt; ((HttpRequest) -&gt; HttpResponse) {\n    return { r in\n    let progress : NSNumber? = NumberFormatter().number(from: r.params.first!.value)\n\n    if progress != nil {\n        self.xPosition = -680 + 6.8 * CGFloat(progress!)\n\n        return .ok(.html(\"Progress: \\(self.xPosition)\"))\n    }else{\n        return .ok(.html(\"No progress\"))\n    }\n    }\n}\n</code></pre>\n<p>We start the server listening on port <code>12345</code> with <code>server.start(12345)</code> and add a route for <code>/progress/:progress</code>.  We&#8217;re listening to GET request on <code>localhost:12345/progress/&lt;number&gt;</code>. Those call <code>updateProgress()</code>.</p>\n<p>The <code>updateProgress</code> function does a lot of confusing work to convert a maybe string into a computable number. Then it updates <code>self.xPosition</code> with the new position based on progress percentage.</p>\n<p>Updating <code>xPosition</code> automatically triggers a redraw‚Ä¶ somehow. <em>shrug</em></p>\n<p>That&#8217;s all the machinery we need to update our Touchbar from anywhere. Next step is to add an HTTP call to the Webpack progress plugin.</p>\n<p>Like this üëá</p>\n<pre lang=\"javascript\">\n// index.js\nfunction onProgress(...) {\n    // ...\n  if (options.sendProgressToTouchbar) {\n      sendProgressToTouchbar(progress, options);\n  }\n \n    // ...\n}\n\nfunction sendProgressToTouchbar(progress, options) {\n    var http = require('http');\n    var req = http.request({\n        port: options.touchbarPort,\n        hostname: '127.0.0.1',\n        method: 'GET',\n        path: '/progress/'+Math.round(progress*100)\n    });\n    req.end();\n\n}\n</pre>\n<p><code>nyan-progress-webpack-plugin</code> already has a function hooked into <code>onProgress</code> updates from Webpack&#8217;s machinery. We added an HTTP call to our Touchbar app via <code>sendProgressToTouchbar</code>.</p>\n<p><code>sendProgressToTouchbar</code> uses node&#8217;s built-in HTTP client to make a GET request and update the touchbar. There is no error handling because we&#8217;re lazy and don&#8217;t care enough.</p>\n<p>That&#8217;s all the code it took. Thank you, open source community, for making hacks like this easy to build üòÅ</p>\n<h2>Here&#8217;s why this is impractical</h2>\n<p>Apple has decided that the Touchbar should only be controlled by the application that&#8217;s currently in focus. That means you can only use your Touchbar to see Webpack progress when you&#8217;re actively focusing on <a href=\"https://github.com/Swizec/touchbar_webpack_progress\">touchbar_webpack_progress</a>.</p>\n<p>This makes it useless. ‚òπÔ∏è</p>\n<p>Here&#8217;s where I hope the open source community will step in. Take your favorite editor and add this as a plugin. If your editor is running this sort of code, it can show Webpack progress while you continue to write code.</p>\n<p>This is the recipe I envision:</p>\n<ol>\n<li>Be an editor, use Touchbar integration maybe (iA Writer has formatting, Emacs ignores my Touchbar)</li>\n<li>Start server, listen on <code>12345</code></li>\n<li>When progress request comes, switch Touchbar to the progress indicator</li>\n<li>Keep updating until 100%</li>\n<li>Switch back to normal Touchbar functionality</li>\n</ol>\n<p>Can you help make that? Please make it.</p>\n<p>Here&#8217;s all the code: <a href=\"https://github.com/Swizec/touchbar_webpack_progress\">the macOS app</a> and <a href=\"https://github.com/Swizec/nyan-progress-webpack-plugin/tree/send-progress-to-touchbar\">the Webpack plugin</a></p>\n<p>ü§ò</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"f61b2558-8728-5efb-8f0e-2d4d6366c9a2"}}