{"data":{"wordpressPost":{"title":"Here&#8217;s why you should never implement your own caching","content":"<div style=\"position:relative;height:0;padding-bottom:56.25%\"><iframe src=\"https://www.youtube.com/embed/PU8kGUrC1dw?ecver=2\" width=\"640\" height=\"360\" frameborder=\"0\" style=\"position:absolute;width:100%;height:100%;left:0\" allowfullscreen></iframe></div>\n<p>Here&#8217;s an interesting problem for you: build some simple caching.</p>\n<p>Let&#8217;s say you have a server and an app. Your server has to do something every time you release a new app. Asking for reviews is a good example<sup><a id=\"ffn1\" href=\"#fn1\" class=\"footnote\">1</a></sup>. If you automate this, everyone will be happier.</p>\n<p>So you keep track of the latest app version and run checks when users ping your API. The list of versions is going to grow fast-ish, and your <code>SELECT</code> statement has to run in code because Postgres doesn&#8217;t know how to compare version strings.</p>\n<p>In Ruby, finding the latest app version looks like this:</p>\n<pre lang=\"ruby\">\nAppVersion.where(platform: platform)\n          .sort_by{ |v| Gem::Version.new(v.version) }\n          .last\n</pre>\n<p>This looks innocent, but it builds an array of all <code>AppVersion</code> models, then sorts it in Ruby, then takes the last one and discards the rest. It&#8217;s kind of okay when the table is small, but it’s <em>terrible</em> when the table grows big.</p>\n<p>Ruby on Rails&#8217;s and your database&#8217;s default caching strategies can&#8217;t cache this call. You have to run it every time.</p>\n<p>The result only changes every few days. Sometimes, it goes unchanged for weeks. But you still have to check every time a user logs in because maybe they&#8217;re the first person with a new app version, and you need to know when it showed up.</p>\n<p>?</p>\n<h2>A naive caching strategy</h2>\n<p>You should use caching, obviously. Somewhat expensive thing to calculate that is checked often and changes rarely. Cache!</p>\n<p>So you implement the simplest approach: memoization.</p>\n<blockquote><p>\nIn computing, memoization or memoisation is an optimization technique used primarily to speed up computer programs by storing the results of expensive function calls and returning the cached result when the same inputs occur again.\n</p></blockquote>\n<p>Your code looks something like this:</p>\n<pre lang=\"ruby\">\nclass AppVersion < ActiveRecord::Base\n\n  @current = {}\n\n  def self.latest(platform)\n    if @current[platform].nil?\n      @current[platform] = where(platform: platform)\n         .sort_by{ |v| Gem::Version.new(v.version) }\n         .last\n    end\n\n    @current[platform]\n  end\n\n  def self.check_app_version(device)\n    latest = self.latest(device.platform)\n\n    if latest\n      if Gem::Version.new(device.app_version) > Gem::Version.new(latest.version)\n        latest = new_latest(device)\n        @current[device.platform] = latest\n      else\n        AppVersion.find_or_create_by(version: device.app_version,\n                                     platform: device.platform)\n          .update!(last_seen_at: DateTime.now)\n      end\n    else\n      latest = new_latest(device)\n      @current[device.platform] = latest\n    end\n\n    latest\n  end\n</pre>\n<p>?</p>\n<p>Overall, this is the <code>AppVersion</code> model. It stores information about each new app version the server encounters. When a user logs in, we call <code>AppVersion.check_app_version(user.device)</code>.</p>\n<p>This function:</p>\n<ol>\n<li>Fetches the <code>latest</code> app version\n<li> 1.1. `latest` returns saved value if it exists</li>\n<li>1.2. if not, `latest` saves its result in a class instance variable</li>\n<li>If we got a version, we check if the new app is of a newer version</li>\n<li>If user&#8217;s device is newer, we create a new <code>AppVersion</code> entry</li>\n<li>Then we update the class instance variable</li>\n<li>If device is not newer, we update the <code>last_seen_at</code> timestamp</li>\n<li>If this is the first time ever that we&#8217;re checking –&nbsp;there&#8217;s no <code>latest</code> –&nbsp;then we make a new latest and update the class instance variable</li>\n</ol>\n<p>Seems reasonable, right? Calculate value, save value, update value when needed. We rely on class instance variables persisting across requests.</p>\n<p>You do some testing locally, you write some tests. All good. Feature works. Ship it.</p>\n<p>Feature goes to production, you release a new app, it creates 18 entries in the database ?</p>\n<p>What went wrong?</p>\n<h2>The correct caching strategy</h2>\n<p>The clue is in that <code>18</code> number. Our code thought exactly 18 times that it had encountered a new latest app version.</p>\n<p>At the time, we had <code>9</code> Heroku dynos with <code>4</code> threads each running in production. <code>9*4 = 36</code>, which is not 18. <em>But</em> it&#8217;s twice as much as 18 and class instance variables are meant to be shared between threads.</p>\n<p>Perhaps the way Puma shares memory between threads, or potential race conditions in our code, means that it took 2 tries before every thread on a machine knew about the new version. It&#8217;s hard to say <em>why</em> it works out that way, but it does.</p>\n<p>Memoization does not work. Caching is hard.</p>\n<p>In retrospect, it is obvious that this was never going to work. Our &#8220;server&#8221; is distributed among multiple virtual machines. They don&#8217;t share memory. How would they ever have seen each other&#8217;s class instance variables?</p>\n<p>The answer is to stop trying to be clever. Rails has built-in caching that&#8217;s been battle tested and developed by smart people.</p>\n<p>Fixed code looks like this:</p>\n<pre lang=\"ruby\">\ndef self.latest(platform)\n    Rails.cache.fetch(\"latest_app_version/#{platform}\") do\n      where(platform: platform).sort_by{ |v| Gem::Version.new(v.version) }.last\n    end\n  end\n\n  def self.check_app_version(device)\n    latest = self.latest(device.platform)\n\n    if latest\n      if Gem::Version.new(device.app_version) > Gem::Version.new(latest.version)\n        latest = new_latest(device)\n        Rails.cache.delete(\"latest_app_version/#{device.platform}\")\n      else\n        AppVersion.find_or_create_by(version: device.app_version,\n                                     platform: device.platform)\n          .update!(last_seen_at: DateTime.now)\n      end\n    else\n      latest = new_latest(device)\n    end\n\n    latest\n  end\n</pre>\n<p>Much better! Logic is same as before, except that we use <code>Rails.cache</code> as our caching mechanism.</p>\n<p><code>.fetch</code> reads from cache and if there&#8217;s a miss, it runs the provided block and stores its result. <code>.delete</code> deletes the cached value so next time we use <code>latest</code>, it reads from cache.</p>\n<p>The fixed code works because <code>Rails.cache</code> can be configured to use an external caching server –&nbsp;Memcache or Redis for instance. This creates a memory space shared between all server machines and server threads.</p>\n<p>Problem solved, crisis averted, lesson learned. Don&#8217;t be clever. Use the tools your frameworks give you. ?</p>\n<ol id=\"footnotes\">\n<li id=\"fn1\">Apple promotes reviews for the latest app version. It hides previous reviews. If you have frequent updates, like you should, and you have good reviews, like you hope, then all your expensive traffic sees <em>&#8220;This app has not received enough ratings to show an average&#8221;</em>. How encouraging! (By the way, you pay for traffic because this is the real world and if you build it they will come does not work.) <a href=\"#ffn1\">&#8617;</a></li>\n</ol>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"6828f842-9983-5a65-a8cd-865906a8e14c"}}