{"data":{"wordpressPost":{"title":"A for loop is not a for loop is not a for loop","content":"<div class=\"zemanta-img\" style=\"margin: 1em; display: block;\">\n<div style=\"width: 250px\" class=\"wp-caption alignright\"><a href=\"http://www.flickr.com/photos/56861611@N00/6260572607\"><img class=\"zemanta-img-configured\" title=\"IMG_1675\" src=\"http://swizec.com/blog/wp-content/uploads/2011/10/6260572607_be8dca7de4_m2.jpg\" alt=\"IMG_1675\" width=\"240\" height=\"180\" /></a><p class=\"wp-caption-text\">Image by Phliar via Flickr</p></div>\n</div>\n<p>For loops are kind of a big deal.</p>\n<p>So big in fact that it&#8217;s virtually impossible to code any sizeable chunk of code without running into some sort of <a class=\"zem_slink\" title=\"For loop\" href=\"http://en.wikipedia.org/wiki/For_loop\" rel=\"wikipedia\">for loop</a> &#8230; sure, there&#8217;s such awesome things as pure <a class=\"zem_slink\" title=\"Functional programming\" href=\"http://en.wikipedia.org/wiki/Functional_programming\" rel=\"wikipedia\">functional languages</a> where for loops don&#8217;t look like for loops. But I&#8217;m fairly certain most of those eventually turn into some sort of for loop deep down in the bowels of assembler and machine code.</p>\n<p>It is therefore fairly easy to assert that everyone needs to know for loops like the back of their hand.Â But how well do you really know them?</p>\n<p>A few days ago I ran into a silly thing with a couple of friends. We somehow got reminded that C counts the head of a for loop as part of the loop&#8217;s scope, which means variables defined therein don&#8217;t really affect anyone outside the loop. But at the same time, it seems like many (most?) other languages don&#8217;t behave like this.</p>\n<p>It seemed only reasonable to go write a for loop in many languages and see what happens.<!--more--></p>\n<h2>C</h2>\n<pre lang=\"C\">\r\n\r\n#include<stdio.h>\r\n\r\nint main() {\r\n  int i = 5;\r\n\r\n  for (int i=0; i<2; i++) {\r\n    printf(\"%d\\n\", i); // prints 0, 1\r\n  }\r\n\r\n  printf(\"%d\\n\", i); // prints 5\r\n}\r\n</pre>\n<h2>PHP</h2>\n<pre lang=\"php\">\r\n<?php\r\n\r\n$i = 5;\r\n\r\nfor ($i=0; $i<2; $i++) {\r\n  echo \"for:$i\\n\"; // prints 0, 1\r\n}\r\n\r\necho \"after:$i\\n\"; // prints 2\r\n\r\n$i = 5;\r\n\r\nfor ($j=0; $j<2; $j++) {\r\n  $i = $j+1;\r\n  echo \"for:$i\\n\"; // prints 1, 2\r\n}\r\n\r\necho \"after:$i\\n\"; // prints 2\r\n\r\n?>\r\n</pre>\n<h2>Java</h2>\n<pre lang=\"java\">\r\n// does not compile\r\n\r\npublic class For {\r\n    public static void main(String[] args) {\r\n        int i = 5;\r\n\r\n        for (int i; i<2; i++) {\r\n            System.out.println(\"for:\"+i);\r\n        }\r\n\r\n        System.out.println(\"after:\"+i);\r\n    }\r\n}\r\n\r\n</pre>\n<h2>Scala</h2>\n<pre lang=\"scala\">\r\n\r\n\r\nobject forVarReuse extends App {\r\n       var i=5;\r\n\r\n       for (i<-1 to 2) {\r\n           println(\"for:\"+i); // prints 1, 2\r\n       }\r\n\r\n       println(\"after:\"+i); // prints 5\r\n}\r\n</pre>\n<h2>Perl</h2>\n<pre lang=\"perl\">\r\n\r\n$i = 5;\r\n\r\nfor (local $i=0; $i<2; $i++) {\r\n  print \"for:$i\\n\"; # prints 0, 1\r\n}\r\n\r\nprint \"after:$i\\n\"; # prints 2\r\n\r\n$i = 5;\r\n\r\nfor ($j=0; $j<2; $j++) {\r\n  local $i = $j+1;\r\n  print \"for2:$i\\n\"; # prints 1, 2\r\n}\r\n\r\nprint \"after:$i\\n\"; # prints 5\r\n</pre>\n<h2>Ruby</h2>\n<pre lang=\"ruby\">\r\n\r\ni = 5\r\n\r\nfor $i in 1..2\r\n  print \"for:\", $i, \"\\n\" # prints 1, 2\r\nend\r\n\r\nprint \"after:\", i, \"\\n\" # prints 5\r\n</pre>\n<h2>JavaScript</h2>\n<pre lang=\"javascript\">\r\nvar i = 5;\r\n\r\nfor (var i=0; i<2; i++) {\r\n    console.log(\"for:\"+i); // prints 0, 1\r\n}\r\n\r\nconsole.log(\"after:\"+i); // prints 2\r\n\r\ni = 5;\r\n\r\nfor (var j=0; j<2; j++) {\r\n    var i = j+1;\r\n    console.log(\"for2:\"+i); // prints 1, 2\r\n}\r\n\r\nconsole.log(\"after:\"+i); // prints 2</pre>\n<h2>CoffeeScript</h2>\n<pre lang=\"coffeescript\">\r\n\r\ni = 5\r\n\r\nconsole.log i for i in [0,1] # prints 0, 1\r\n\r\nconsole.log i # prints 1\r\n\r\ni = 5\r\n\r\ncount = (i for i in [0,1])\r\n\r\nconsole.log count # prints [ 0, 1 ]\r\n\r\nconsole.log i # prints 1\r\n</pre>\n<h2>Python</h2>\n<pre lang=\"python\">\r\n\r\ni = 5\r\n\r\nfor i in range(2):\r\n    print \"for:\", i\r\n\r\nprint \"after:\", i\r\n\r\ni = 5\r\n\r\nprint [i for i in range(2)] # prints [0, 1]\r\n\r\nprint \"after:\", i\r\n</pre>\n<h2>Conclusion</h2>\n<p>The interesting part is how differently languages of the curly-braces family behave. Some consider the for loop its own scope, many don't. It's interesting to compare JavaScript and Perl. They both have a way to tell a variable to be defined in the local scope, but JavaScript simply doesn't let you do that with fors, apparently only functions have scope of their own.</p>\n<p>Ruby is similar to Perl in this regard. That little dollar sign can change the scope and that's what let us pull off the trick since loops are important enough to warrant scope at all.</p>\n<p>The biggest disappointment is Python. I was honestly expecting the <a class=\"zem_slink\" title=\"List comprehension\" href=\"http://en.wikipedia.org/wiki/List_comprehension\" rel=\"wikipedia\">list comprehension</a> to have its own scope, but alas.</p>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles</h6>\n<ul class=\"zemanta-article-ul\">\n<li class=\"zemanta-article-ul-li\"><a href=\"http://eli.thegreenplace.net/2011/10/19/perls-guess-if-file-is-text-or-binary-implemented-in-python/\">Eli Bendersky: Perl's \"guess if file is text or binary\" implemented in Python</a> (eli.thegreenplace.net)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://r.zemanta.com/?u=http%3A//www.infoworld.com/t/javascript/turn-your-nose-dart-and-instead-smell-the-coffeescript-176361&amp;a=58844108&amp;rid=eb2fce30-bdf3-42c1-b2c4-99be7c2b2888&amp;e=592da843a0319c02f51fddfdf273c138\">Turn your nose up at Dart and instead smell the CoffeeScript</a> (infoworld.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://robots.thoughtbot.com/post/9251081564/coffeescript-spartan-javascript\">This is CoffeeScript</a> (robots.thoughtbot.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://arstechnica.com/business/news/2011/10/javascript-has-problems-can-googles-dart-solve-them.ars\">Feature: JavaScript has problems. Do we need Dart to solve them?</a> (arstechnica.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://dartinside.com/2011/dart-bashing/\">Dart Bashing</a> (dartinside.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://hyperpolyglot.org/scripting\">Hyperpolyglot: PHP, Perl, Python, Ruby</a> (hyperpolyglot.org)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://blog.izs.me/post/10213512387/javascript-is-not-web-assembly\">JavaScript is Not Web Assembly</a> (izs.me)</li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=eb2fce30-bdf3-42c1-b2c4-99be7c2b2888\" alt=\"Enhanced by Zemanta\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"cd35efb0-747a-5af8-99d9-d6397c6b444d"}}