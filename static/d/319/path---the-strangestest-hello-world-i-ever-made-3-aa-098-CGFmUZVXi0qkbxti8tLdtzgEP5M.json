{"data":{"wordpressPost":{"title":"The strangestest Hello World I ever made","content":"<div class=\"zemanta-img\" style=\"margin: 1em; display: block;\">\n<div>\n<dl class=\"wp-caption alignright\" style=\"width: 170px;\">\n<dt class=\"wp-caption-dt\"><a href=\"http://www.flickr.com/photos/48298733@N07/4906662333\"><img title=\"Le Belem\" src=\"http://swizec.com/blog/wp-content/uploads/2010/08/4906662333_7139b3e5cf_m.jpg\" alt=\"Le Belem\" /></a></dt>\n<dd class=\"wp-caption-dd zemanta-img-attribution\" style=\"font-size: 0.8em;\">Image by <a href=\"http://www.flickr.com/photos/48298733@N07/4906662333\">0k1n</a> via Flickr</dd>\n</dl>\n</div>\n</div>\n<p>Earlier this week while under the influence of being stressed out of my mind being CEO of a startup and watching way too much Sherlock (there are only three episodes, watched every one at least four times) I decided that it was time for a new hobby.</p>\n<p>The only requirements for said hobby were:</p>\n<ul>\n<li>mentally very bloody stimulating</li>\n<li>doable in polynomic time (rules out things like &#8216;invent cold fusion&#8217;)</li>\n<li>learn something new</li>\n</ul>\n<p>Obviously the only real solution to this problem is designing a new <a class=\"zem_slink freebase/en/programming_language\" title=\"Programming language\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Programming_language\">programming language</a> and making a <a class=\"zem_slink freebase/en/compiler\" title=\"Compiler\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Compiler\">compiler</a> or <a class=\"zem_slink freebase/en/interpreter\" title=\"Interpreter (computing)\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Interpreter_%28computing%29\">interpreter</a> for it. Sure, the other obvious solution is to find a cool opensource project and become an Important Contributor &#8482;. But I&#8217;m gonna do that anyway, contribute code I&#8217;m developing at Preona to opensource projects that is.</p>\n<p>No I needed something completely different. Totally unrelated to my daily work and so on. Making a language it was!</p>\n<p>Because @skatey reminded me of Monkey Island earlier that day the language is called <a href=\"http://github.com/Swizec/Murray\">Murray</a>.</p>\n<p>Murray is a talking demonic skull in Monkey Island.</p>\n<p>This led to some interesting design ideas. Since obviously the language needs to be inspired by the demonic talking skull &#8230; so let&#8217;s make the whole thing behave like you&#8217;re talking to the computer rather than programming.</p>\n<p>Oh also I wanted it to run on Python and be inspired by <a class=\"zem_slink freebase/guid/9202a8c04000641f80000000000247bb\" title=\"Lisp (programming language)\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Lisp_%28programming_language%29\">Lisp</a>, but without parentheses. No parentheses if at all avoidable!</p>\n<p>Another big design goal is to eventually write a Murray-to-Python compiler in <a href=\"http://github.com/Swizec/Murray\">Murray</a>. Right now I&#8217;m writing it in Python.</p>\n<p>So let&#8217;s recap the primary design goals</p>\n<ul>\n<li>functional</li>\n<li>no parentheses</li>\n<li>as akin to talking as possible</li>\n<li>can compile itself</li>\n<li><a class=\"zem_slink freebase/en/turing_completeness\" title=\"Turing completeness\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Turing_completeness\">Turing complete</a></li>\n</ul>\n<h3 id=\"thehelloworld\">The hello world</h3>\n<p>The hello world turns out to be pretty simple.</p>\n<pre lang=\"murray\">say \"Hello World\"</pre>\n<p>Compiles to python and works. And no, no I&#8217;m not just using a regex to replace &#8216;say&#8217; with &#8216;print&#8217;. I actually wrote a parser for this thing.</p>\n<p>Everything that sticks together is considered a paragraph of code and will essentially evaluate to a big <a class=\"zem_slink freebase/en/function_composition\" title=\"Function composition\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Function_composition\">function composition</a> like so f(g(h(x))). Ok? ok.</p>\n<p>So when I write this:</p>\n<pre lang=\"murray\">say \"hello world\" say \"meow\" say \"hai\"</pre>\n<p>It compiles into something a bit like so: say( &#8220;hello world&#8221;, say(&#8220;meow&#8221;, say(&#8220;hai&#8221;)))</p>\n<p>So the output becomes:</p>\n<pre>hai\r\nNone meow\r\nNone hello world</pre>\n<p>Which doesn&#8217;t seem too logical, the None should go on the other side &#8230; I should fix this.</p>\n<p>But anyway, the None is there because &#8216;say&#8217; doesn&#8217;t return anything, we can fix the wonky output like this:</p>\n<pre lang=\"murray\">say \"hello world\". say \"meow\". say \"hai\"</pre>\n<p>What magic buffonery is this!?</p>\n<p>Well the dot is another function again and <a href=\"http://github.com/Swizec/Murray\">Murray</a> can understand one-char functions even when they are attached to something else. The dot is a simple function anyway, it sort of &#8216;destroys&#8217; output by returning an empty string so it doesn&#8217;t get in the way later on in the execution stack.</p>\n<p>But what about them code paragraphs I mentioned earlier? Well their intended use eventually is to define &#8216;functions&#8217;, but I haven&#8217;t figured this out too much yet. Right now they just do this:</p>\n<pre lang=\"murray\">say \"meow1\"\r\n\r\nsay \"meow2\"</pre>\n<p>This compiles into two distinct function calls so the output is like this:</p>\n<pre>meow1\r\nmeow2</pre>\n<p>Anyway, that&#8217;s all I&#8217;ve got figured out so far. It&#8217;s only been a few days since I started working on this and there&#8217;s a long way still to go. Suggestions very welcome, contributors appreciated, everything is <a class=\"zem_slink freebase/en/open_source\" title=\"Open Source\" rel=\"wikinvest\" href=\"http://www.wikinvest.com/concept/Open_Source\">open source</a> and living on <a href=\"http://github.com/Swizec/Murray\">github</a>. Just fork and ping me about it if you&#8217;re interested ðŸ™‚</p>\n<p>Oh yeah, this Hello World is strange because it took me writing a compiler and making up a lot of stuff.</p>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles by Zemanta</h6>\n<ul class=\"zemanta-article-ul\">\n<li class=\"zemanta-article-ul-li\"><a href=\"http://kirkwylie.blogspot.com/2010/08/i-want-new-programming-language.html\">I Want A New Programming Language</a> (kirkwylie.blogspot.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://www.reddit.com/r/programming/comments/280is/is_lisp_secretly_the_worlds_most_popular/\">Is Lisp secretly the world&#8217;s most popular programming language? : programming</a> (reddit.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://www.paulgraham.com/icadmore.html\">Re: Revenge of the Nerds</a> (paulgraham.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://lambda-the-ultimate.org/node/1646\">Lisp sans (((paren-theses ((hell))))) | Lambda the Ultimate</a> (lambda-the-ultimate.org)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://blog.licenser.net/2010/07/08/on-parentheses\">lice! : On Parentheses</a> (licenser.net)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://thecleancoder.blogspot.com/2010/08/why-clojure.html\">The Clean Coder: Why Clojure?</a> (thecleancoder.blogspot.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://www.oreillynet.com/onlamp/blog/2005/12/why_lisp_still_hasnt_won.html\">Why Lisp Still Hasn&#8217;t Won &#8211; O&#8217;Reilly ONLamp Blog</a> (oreillynet.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://ask.metafilter.com/162577/Help-me-find-something-new-to-do-with-my-time\">Help me find something new to do with my time</a> (ask.metafilter.com)</li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=0f444050-7748-4c28-8a4c-b172081bb171\" alt=\"Enhanced by Zemanta\" /></a><span class=\"zem-script more-related more-info pretty-attribution\"><script src=\"http://static.zemanta.com/readside/loader.js\" type=\"text/javascript\"></script></span></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"94480671-6542-5904-bad9-cc47e4292c0b"}}