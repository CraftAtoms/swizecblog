{"data":{"wordpressPost":{"title":"Handling timezones in python","content":"<div class=\"zemanta-img\" style=\"margin: 1em; display: block;\">\n<div style=\"width: 250px\" class=\"wp-caption alignright\"><a href=\"http://www.flickr.com/photos/49502995517@N01/433029904\"><img class=\"zemanta-img-configured\" title=\"Time Selector\" src=\"http://swizec.com/blog/wp-content/uploads/2011/11/433029904_27dd44a95a_m3.jpg\" alt=\"Time Selector\" width=\"240\" height=\"183\" /></a><p class=\"wp-caption-text\">Image by Telstar Logistics via Flickr</p></div>\n</div>\n<p>A couple of days ago I started refactoring some code to handle <a class=\"zem_slink\" title=\"Lists of time zones\" href=\"http://en.wikipedia.org/wiki/Lists_of_time_zones\" rel=\"wikipedia\">timezones</a> better. The problem manifests as a single time appearing at different times in different parts of the application.</p>\n<p>Granted, a lot of it is more of a UX problem along the lines of my rant on why <a title=\"Why don’t computers understand timezones?\" href=\"http://swizec.com/blog/why-dont-computers-understand-timezones/swizec/2288\">computers don&#8217;t handle timezones intuitively</a>. But there&#8217;s a deeper issue with the fact that the codebase is handling timezones rather naively.</p>\n<p>Until a week ago I would have done it exactly the same way.</p>\n<h2>Naive approach</h2>\n<p>Usually when people first implement timing in an application they (or rather we) don&#8217;t really care about timezones. You just take a timestamp and store it in a database. This suffices for most use cases &#8230; sure the times are in whatever timezone your server is set to but as long as you&#8217;re using the same server for everything and you&#8217;re only using times for timestamps when objects were inserted into the database and for logging &#8230;</p>\n<p>It&#8217;s just not a problem.</p>\n<p>Then you are faced with a distributed environment and suddenly all those timestamps start acting funny, or maybe you have users in different timezones and you want to display times to them.</p>\n<p>Still an easy problem to solve; just handle all times as UTC internally and translate to the proper timezone when producing outputs. Easy as pie right?</p>\n<p>And then you notice strange things happen around daylight savings. Suddenly 3am happens twice on the 31st of October in Slovenia &#8230; but the same thing only happens a week later in the US. And some states in the US don&#8217;t even observe <a class=\"zem_slink\" title=\"Daylight saving time\" href=\"http://en.wikipedia.org/wiki/Daylight_saving_time\" rel=\"wikipedia\">DST</a> and now what do you do?</p>\n<h2>pyTZ</h2>\n<p>Those ambiguous periods are the main thing pytz takes care of.</p>\n<p>To be perfectly honest I never even considered this problem before reading the documentation and having my mind blown. There&#8217;s just so much intricacies over keeping up to date on what each timezone is doing and what particular timezone a user is in right now &#8230; it&#8217;s insane!</p>\n<p>Even though <a href=\"http://pypi.python.org/pypi/pytz\" target=\"_blank\">pytz</a> claims they don&#8217;t take care of ambiguous periods like Poland rewinding their clocks half an hour in 1915 to start using <a class=\"zem_slink\" title=\"Central European Time\" href=\"http://en.wikipedia.org/wiki/Central_European_Time\" rel=\"wikipedia\">CET</a>, they&#8217;re still pretty vital for everything else.</p>\n<p>Of course you&#8217;ll still want to handle all times internally as UTC otherwise doing time arithmetic can get quite hairy, although pytz can supposedly handle that too &#8230; but at least now it should be possible to correctly get the <a class=\"zem_slink\" title=\"Coordinated Universal Time\" href=\"http://en.wikipedia.org/wiki/Coordinated_Universal_Time\" rel=\"wikipedia\">UTC time</a> out of user input and then correctly display the result.</p>\n<p>An example:</p>\n<pre lang=\"python\">from datetime import datetime\r\nfrom pytz import *\r\n\r\neastern = timezone('US/Eastern')\r\nloc_dt = eastern.localize(datetime(2011, 11, 2, 7, 27, 0))\r\nprint loc_dt\r\n# 2011-11-02 07:27:00-04:00\r\n\r\nljubljana = timezone(\"Europe/Ljubljana\")\r\nprint loc_dt.astimezone(ljubljana)\r\n# 2011-11-02 12:27:00+01:00</pre>\n<h2>Conclusion</h2>\n<p>Turns out there&#8217;s much more to timezones than one might think. Just goes to show why all those <em>other</em> coders are spending so much time on trivial stuff &#8230; nothing is really trivial. Nothing.</p>\n<p>And let&#8217;s not even get into <a class=\"zem_slink\" title=\"Leap second\" href=\"http://en.wikipedia.org/wiki/Leap_second\" rel=\"wikipedia\">leap seconds</a>.</p>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles</h6>\n<ul class=\"zemanta-article-ul\">\n<li class=\"zemanta-article-ul-li\"><a href=\"http://lucumr.pocoo.org/2011/7/15/eppur-si-muove/\">Dealing with Timezones in Python</a> (lucumr.pocoo.org)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://thebloggingpath.com/2011/08/28/timestamps-and-timezones/\">Timestamps and timezones&#8230;</a> (thebloggingpath.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://www.sebastianmarshall.com/just-say-no-to-online-calendars\">Just Say No to Online Calendars&#8230;</a> (sebastianmarshall.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://unix4lyfe.org/time/\">What every programmer should know about time</a> (unix4lyfe.org)</li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=ae6a7b39-c233-48c2-bb4b-4d47940ca4b8\" alt=\"Enhanced by Zemanta\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"1f27c954-9cee-565f-8045-6e15fba87515"}}