{"data":{"wordpressPost":{"title":"Livecoding #33: A Map of Global Migrations, Part 2","content":"<p><em>This is a Livecoding Recap ‚Äì an almost-weekly post about interesting things discovered while livecoding ?. Always under 500 words and with pictures. You can follow my channel, <a href=\"https://liveedu.tv/swizec\">here</a>. New content almost <strong>every Sunday at 2pm PDT</strong>. There‚Äôs live chat, come say hai ?</em></p>\n<p><iframe src=\"https://www.liveedu.tv/swizec/videos/Oxp87/embed\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"true\" scrolling=\"no\"></iframe></p>\n<p>This Sunday, we built a colorful map and discovered that a marathon is 138,435 feet long. I don&#39;t know why Google thinks that&#39;s a useful answer to <em>&quot;How long is a marathon?‚Äù</em>.</p>\n<img class=\"alignnone size-full wp-image-7434\" src=\"https://swizec.com/blog/wp-content/uploads/2017/02/map.gif\" width=\"1108\" height=\"557\" />\n<p>Our map shows migrations <em>into</em> the selected country and uses color to show migration magnitude. The more people that moved into a country in 2015, the warmer the color of that country and its curve. Or rather, the more to the right on the <code>d3.interpolateWarm</code> color scale.</p>\n<img src=\"https://raw.githubusercontent.com/d3/d3-scale/master/img/warm.png\" />\n<p>I wouldn&#39;t describe green as warmer than purple‚Ä¶ to be honest, I&#39;m not sure what exactly <code>interpolateWarm</code> is meant to correspond to. But the way we used it, to the right is more and to the left is less. <em>shrug</em></p>\n<p>Guess we&#39;ll have to add a legend next week ?</p>\n<p>But first, the curves. <a href=\"https://swizec.com/blog/livecoding-32-map-global-migrations/swizec/7415\">Last week</a>, we discovered that a curve between two points is a straight line. We fixed that by adding a middle point calculated <a href=\"http://www.virtualnerd.com/algebra-1/radical-expressions-equations/distance-midpoint-formulas/midpoint-formula/midpoint-between-coordinates\">using high school geometry</a>.</p>\n<img class=\"alignnone size-full wp-image-7433\" src=\"https://swizec.com/blog/wp-content/uploads/2017/02/midpoint-screenshot.jpg\" width=\"799\" height=\"449\" srcset=\"https://swizec.com/blog/wp-content/uploads/2017/02/midpoint-screenshot.jpg 799w, https://swizec.com/blog/wp-content/uploads/2017/02/midpoint-screenshot-300x169.jpg 300w, https://swizec.com/blog/wp-content/uploads/2017/02/midpoint-screenshot-768x432.jpg 768w\" sizes=\"(max-width: 799px) 100vw, 799px\" />\n<p>Our new <code>Curve</code> component looks like this:</p>\n<pre lang=\"javascript\">\nconst Curve = ({ start, end, color }) => {\n    const line = d3.line()\n                   .curve(d3.curveBasis),\n          [x1, y1] = start,\n          [x2, y2] = end,\n          middle = [(x1 + x2)/2, (y1 + y2)/2-200];\n\n    return (\n        <path d={line([start, middle, end])}\n              style={{stroke: color,\n                      strokeWidth: '1.6px',\n                      strokeOpacity: '0.7',\n                      fillOpacity: 0}} />\n    );\n};\n</pre>\n<p>A line generator with a curve interpolator, some geometry for the <code>middle</code> point pulled up by <code>-200</code> pixels, and returns a <code>&lt;path&gt;</code> element of a given color, and some other styling. We got the <code>-200</code> number by fiddling around until it looked good.</p>\n<p>That and some looping created a map with very many curves all over it. It was not very useful.</p>\n<img class=\"alignnone size-full wp-image-7432\" src=\"https://swizec.com/blog/wp-content/uploads/2017/02/map-with-all-curves.png\" width=\"873\" height=\"457\" srcset=\"https://swizec.com/blog/wp-content/uploads/2017/02/map-with-all-curves.png 873w, https://swizec.com/blog/wp-content/uploads/2017/02/map-with-all-curves-300x157.png 300w, https://swizec.com/blog/wp-content/uploads/2017/02/map-with-all-curves-768x402.png 768w\" sizes=\"(max-width: 873px) 100vw, 873px\" />\n<p>nikivansevdon suggested we add some sort of filtering, and daemon92 had great ideas around colors and highlighting source countries on the map itself. Thanks guys!</p>\n<p>So we used <a href=\"https://github.com/JedWatson/react-select\">react-select</a> to make a drop down and spent far too much time rejigging our calculations to make the map aware of them. This is where having Redux or MobX becomes useful: When you want to move things around.</p>\n<p>With those, you have data and calculations in a global state somewhere. With our haphazard approach, most logic gets slapped into the nearest component that uses it. It works great until you want to move something, then you&#39;re in a world of pain.</p>\n<p>Watch <a href=\"https://www.liveedu.tv/swizec/videos/Oxp87-a-map-of-global-migrations-in-react-d3-3\">the stream recording</a> from about 1h20min onwards. You&#39;ll see what I mean. Copy-pasting. So much copy-pasting üòÄ</p>\n<p>You can see the final <a href=\"https://github.com/Swizec/migrations-map/blob/10c93fb29117f7b0b84c30a2f598ec2efc72a957/src/Maps.js\">code on Github</a>.</p>\n<p>It came out quite well I think.</p>\n<img class=\"alignnone size-full wp-image-7435\" src=\"https://swizec.com/blog/wp-content/uploads/2017/02/colourful-map.gif\" width=\"1108\" height=\"557\" />\n<p>Next week, we&#39;ll add useful text info, a color legend, and add some animation to make the visualization quicker to understand. I want to add something that shows directionality for those curves.</p>\n<p>If we can get special regions like World, Developed countries, etc. to work, that would be great too. ?</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"827c102a-23b4-5e1d-9bef-a356ded02dad"}}