{"data":{"wordpressPost":{"title":"JavaScript&#8217;s native map reduce and filter are wrong","content":"<p>Last week I saw <a href=\"https://twitter.com/#!/jhartikainen/status/84490101673046016\" target=\"_blank\">a tweet by @jhartikainen</a> that made my heart skip a beat! He totally raped the definition of a one liner and made something that can be beautiful only to a giant <a class=\"zem_slink\" title=\"Functional programming\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Functional_programming\">functional programming</a> nerd.</p>\n<p>The gist that he posted looks like this:</p>\n<pre lang=\"javascript\">//Is this abuse of array functions? ðŸ˜€\r\n'20000001'.split('').reverse().join('').match(/\\d{3}|\\d+$/g).map(function(s){ return s.split('').reverse().join(''); }).reverse().join(' ');\r\n//produces \"20 000 001\"</pre>\n<p>Now this might just look like so much brain sputtering madness to you, but it&#8217;s actually displaying something very awesome about one of my favourite programming languages &#8212; native implementations of map, reduce and so on.</p>\n<div class=\"zemanta-img zemanta-action-dragged\" style=\"margin: 1em; display: block;\">\n<div style=\"width: 250px\" class=\"wp-caption alignright\"><a href=\"http://www.flickr.com/photos/91828644@N00/5883352394\"><img title=\"IMG_2307\" src=\"http://swizec.com/blog/wp-content/uploads/2011/06/5883352394_72b348a448_m.jpg\" alt=\"IMG_2307\" width=\"240\" height=\"160\" /></a><p class=\"wp-caption-text\">Image by Dan Bock via Flickr</p></div>\n</div>\n<p><em style=\"font-size: 1.4em;\">tl;dr &#8211;&gt; JavaScript is starting to mix functional and objective programming in a bad bad way</em></p>\n<p>I&#8217;m not exactly certain when <a class=\"zem_slink\" title=\"JavaScript\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/JavaScript\">JavaScript</a> got native implementations of these as I&#8217;ve been using libraries like <a class=\"zem_slink\" title=\"Underscore.js\" rel=\"homepage\" href=\"http://documentcloud.github.com/underscore/\">underscore.js</a> for a while now to achieve this exact same thing. Actually wikipedia tells me this has been added in version 1.6 way back in November 2005. Six years ago and I didn&#8217;t know a thing about it.</p>\n<p><!--more--></p>\n<p>That&#8217;s just sad. Why don&#8217;t more tutorials online talk about these features? How are people supposed to learn how awesome JavaScript is when most of the community works only with a very small subset of the language?</p>\n<p>Some further searching tells me that the version of JavaScript most browsers currently support is 1.5 and since <a class=\"zem_slink\" title=\"ECMAScript\" rel=\"homepage\" href=\"http://www.ecma-international.org/publications/standards/Ecma-262.htm\">ECMAScript</a> version 5, which is comparable to JavaScript 1.8, was only standardised in &#8230; December 2009, the browsers are quickly trying to pick up slack and get up to speed with that &#8230;</p>\n<p>This makes me sad, I almost don&#8217;t feel like continuing this post &#8230; luckily though, Node.js is pretty good with the latest ECMAScript support so there&#8217;s still hope.</p>\n<h2>What&#8217;s wrong</h2>\n<p>Considering the horror show I just described, writing the rest of this post leaves a bad taste in my mouth, but I think the way JavaScript natively implements some features of functional programming is wrong.</p>\n<p>The way map, reduce, filter and others are implemented in JavaScript is that they are methods of the <a class=\"zem_slink\" title=\"Associative array\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Associative_array\">Array</a> class. And you call them as such:</p>\n<pre lang=\"javascript\">[0,1,2].map(function (i) { return i+1; }); // adds 1 to every member\r\n\r\n[0,1,2].reduce(function (a,b) { return a+b; }); // sums members\r\n\r\n[0,1,2].filter(function (i) { return i &gt;0; });  // removes members smaller than 1</pre>\n<p>As you can see all of these functions are a way to call a certain function on every member of the array. Nothing too special here, anyone who&#8217;s ever even sniffed at functional programming should understand how these three functions work.</p>\n<p>But because JavaScript is a language that is both functional and objective in its design, this code suddenly becomes very ambiguous to read.</p>\n<p>On one hand, you&#8217;re calling functions that are the epitome of functional programming. Obviously there are no side-effects and a copy of the array is returned, leaving the original intact. Immutable data structures and all that functional shebang.</p>\n<p>But on the other hand, you&#8217;re calling these <em>on</em> an array, as the array&#8217;s methods. Obviously these functions belong to the Array and are therefore executed in place and the array&#8217;s state is changed.</p>\n<p>Reading the syntax and knowing the basics of both objective and functional programming, both those opinions look like they should be true. Shouldn&#8217;t they?</p>\n<p>Turns out, in this case, JavaScript returns a copy of the array and nothing at all happens to the original array. As we can demonstrate with the following quick test in the <a class=\"zem_slink\" title=\"Node.js\" rel=\"homepage\" href=\"http://nodejs.org/\">node.js</a> console:</p>\n<pre lang=\"javascript\">Merrick:~ Swizec$ node\r\n&gt; var a = [1,2,3];\r\n&gt; var b = a.map(function (i) { return i+1; });\r\n&gt; a\r\n[ 1, 2, 3 ]\r\n&gt; b\r\n[ 2, 3, 4 ]\r\n&gt; a.map(function (i) { return i+1; });\r\n[ 2, 3, 4 ]\r\n&gt; a\r\n[ 1, 2, 3 ]</pre>\n<p>So it would seem that what we have Â here is a case of functional programming, behaving as functional programming, neatly packaged into an objective syntax.</p>\n<p>Which I guess wouldn&#8217;t actually be that bad were it consistent.</p>\n<p>Other functions used in this exact same way usually change the array&#8217;s state. Both sort and reverse return the new array &#8230; but also change the original array&#8217;s ordering. Similarly every other function on the array ranging from <em>shift</em> andÂ <em>pop</em> to <em>splice </em>change the state of the array they are being called on and return &#8230; something (it depends on the particular function).</p>\n<p>This means that reading JavaScript you are faced with the fact that functions called on objects are sometimes performing actions on the <em>copy</em> of the object and sometimes on <em>the object</em>.</p>\n<p>That&#8217;s just confusing and bloody horrible from a language design standpoint don&#8217;t you think?</p>\n<p>Why couldn&#8217;t they just create new global functions for these awesome functional programming concepts &#8230; I mean, the whole idea there is that functions get parameters and only parameters, functions in functional languages are supposed to be context independent. But here you have context dependent functional functions &#8230; it&#8217;s just a mess.</p>\n<p>Is JavaScript fast becoming like <a class=\"zem_slink\" title=\"PHP\" rel=\"homepage\" href=\"http://www.php.net/\">PHP</a> with its confused standard library? Or is it just going through a little identity crysis?</p>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles</h6>\n<ul class=\"zemanta-article-ul\">\n<li class=\"zemanta-article-ul-li\"><a href=\"http://peter.michaux.ca/articles/javascript-is-dead-long-live-javascript\">JavaScript is Dead. Long Live JavaScript</a> (peter.michaux.ca)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://greatfinds.icrossing.com/the-rise-of-javascript-micro-frameworks/\">The rise of JavaScript micro-frameworks</a> (greatfinds.icrossing.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://blog.anscamobile.com/2011/06/lua-is-more-popular-than-javascript/\">Lua is more popular than JavaScript</a> (anscamobile.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://www.devcurry.com/2011/06/javascript-hash-table.html\">Hash Tables in JavaScript</a> (devcurry.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://blog.duruk.net/2011/06/19/nodelists-and-arrays-in-javascript/\">NodeLists and Arrays in JavaScript</a> (duruk.net)</li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=638fd36f-9891-4a4d-8610-374131a43a05\" alt=\"Enhanced by Zemanta\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"9d2206f7-5330-5ba6-9308-f0d19faa7ad1"}}