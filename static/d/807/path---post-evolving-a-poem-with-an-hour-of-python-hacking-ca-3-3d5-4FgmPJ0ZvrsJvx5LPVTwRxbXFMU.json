{"data":{"wordpressPost":{"title":"Evolving a poem with an hour of python hacking","content":"<div class=\"zemanta-img\" style=\"margin: 1em; display: block;\">\n<div>\n<dl class=\"wp-caption alignright\" style=\"width: 310px;\">\n<dt class=\"wp-caption-dt\"><a href=\"http://commons.wikipedia.org/wiki/File:Oscar_Wilde_3g07095u.jpg\"><img title=\"Three quarter length portrait of Oscar Wilde (...\" src=\"http://swizec.com/blog/wp-content/uploads/2010/12/300px-Oscar_Wilde_3g07095u.jpg\" alt=\"Three quarter length portrait of Oscar Wilde (...\" width=\"300\" height=\"499\" /></a></dt>\n<dd class=\"wp-caption-dd zemanta-img-attribution\" style=\"font-size: 0.8em;\">Image via <a href=\"http://commons.wikipedia.org/wiki/File:Oscar_Wilde_3g07095u.jpg\">Wikipedia</a></dd>\n</dl>\n</div>\n</div>\n<p>On Monday I got a little bored at class. This is something that is likely to happen when you&#8217;re stuck at classes for nearly the whole day.</p>\n<p>During a break a classmate of mine showed me something cool. It was a Java applet that used genetic <a class=\"zem_slink freebase/en/algorithm\" title=\"Algorithm\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Algorithm\">algorithms</a> (we think it was just basic <a class=\"zem_slink freebase/en/evolution\" title=\"Evolution\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Evolution\">evolution</a>) to create a model of a car that can travel over rugged terrain &#8230; Actually thanks to Zemanta I found the link -&gt; <a href=\"http://www.qubit.devisland.net/ga/\" target=\"_blank\">Go here for a very cool genetic algorithm demo</a></p>\n<p>This gave me a cool idea to retry making an algorithm I was making a year ago in <a class=\"zem_slink freebase/guid/9202a8c04000641f80000000000247bb\" title=\"Lisp (programming language)\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Lisp_%28programming_language%29\">Lisp</a>.</p>\n<p>Because wi-fi wasn&#8217;t working I Â wrote it in python this time, simply because I don&#8217;t need to reference documentation to write python.</p>\n<p>So I made something cool. (I think) In an hour of solid hacking I created a simple evolutionary algorithm that given enough time can create pretty much any piece of text by performing random <a class=\"zem_slink freebase/en/mutation\" title=\"Mutation\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Mutation\">mutations</a> and breeding strings together. Â My classmates can verify that it only took an hour.</p>\n<p>Sure, nothing very impressive on a grand scale of things. I mean, what&#8217;s cool about taking a bunch of random characters and applying random transformations to them to create a known piece of text right?</p>\n<p>Well I don&#8217;t know, but my nerd side finds it incredibly satisfying.</p>\n<p>Anyway I tried it with <a href=\"http://en.wikisource.org/wiki/Amor_Intellectualis\" target=\"_blank\">Oscar Wilde&#8217;s Amor Intellectualis</a>.</p>\n<p>You can see the whole code on <a href=\"https://github.com/Swizec/random-coding/blob/master/evolve-text.py\">github</a>.</p>\n<p>To make this post about a little bit more than just geek bravado, I&#8217;m going to try explaining why I believe the algorithm works at all and what makes it pretty successful. Then I&#8217;m going to explain a better approach that maybe I will implement some day.</p>\n<h2>How?</h2>\n<p>Ok so the basics of evolution algorithms are pretty simple. You take a population of random stuff. With every generation you mutate the members, perform breeding amongst the best members and remove the worst members from the population.</p>\n<p>Yep, pretty much like natural selection+evolution in nature.</p>\n<p>Obviously this means that choosing a proper breeding and <a class=\"zem_slink freebase/en/fitness_function\" title=\"Fitness function\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Fitness_function\">fitness functions</a> is crucial here. The mutation function isn&#8217;t very interesting &#8230; and in fact as I discovered it&#8217;s almost better if you don&#8217;t have it at all. The real reason it&#8217;s usually there is because it helps the algorithm get out of local minimums.</p>\n<pre lang=\"python\">def mutate(a):\r\n    return \"\".join([random.choice(ALPHABET) if abs(random.random()-0.5) &lt; MUTATE_CHANCE else k for k in a])</pre>\n<p>Basically <em>mutate</em> just goes through the string and <a class=\"zem_slink freebase/en/randomness\" title=\"Randomness\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Randomness\">randomly</a> changes characters, if some event with a low chance of happening occurs.</p>\n<pre lang=\"python\">def distance(a, b):\r\n    return sum([1 if a[i]!=b[i] else 0 for i in range(len(a))])</pre>\n<p>Distance between strings is my fitness function. It is roughly based on my understanding of Leiningen distance. It simply counts the number of characters that differ between two strings. Very basic stuff.</p>\n<pre lang=\"python\">def compete(population):\r\n    population.sort(key=lambda a: distance(a, TARGET))\r\n    return population</pre>\n<p>My compete function is pretty basic as well. Because of python&#8217;s awesomeness and because my fitness function returns a simple integer, I can simply sort the population by distance. Lovely.</p>\n<pre lang=\"python\">def breed(a, b):\r\n    if random.random()-0.5 &lt; BREED_CHANCE:\r\n        s = random.randint(0, len(a)-10)\r\n        e = s+random.randint(1, BREED_MAX_CHUNK)\r\n        c =  a[0:s]+b[s:e]+a[e:]\r\n        return c\r\n    else:\r\n        return mutate(b)</pre>\n<p>The breed function is where it gets interesting and I firmly believe the way I implemented this, is the reason the algorithm performs as well as it does &#8230; it&#8217;s also probably the reason why it doesn&#8217;t perform better ðŸ™‚</p>\n<p>As you can see what I&#8217;m doing here is I&#8217;m taking a string and replacing a random chunk of it with <em>the same</em> random chunk from a different string. The key thing here is that I&#8217;m <em>not</em> shuffling things around. What this does is that it preserves good candidates in a roughly good state.</p>\n<p>For example, if you&#8217;re at only a single character difference from the target text, this type of breeding assures that nothing but that single character will be changing.</p>\n<p>Also of interest might be how I choose whom to breed. Because the breeding function basically clones a part of a worse subject into a part of a better subject (due to the way I&#8217;m calling it) what I do is I choose the best 20 members and breed the best 60 members with them. Roughly this ratio seems to produce the best results.</p>\n<p>Oh and I had problems with inbreeding. It&#8217;s funny, but if the population was too small and not enough members are breeding what happens is that every member in the population becomes identical, while none of them match the target. Guess all there&#8217;s something to all those hillbilly jokes ðŸ˜€</p>\n<h2>Performance</h2>\n<p>I haven&#8217;t really put this algorithm through its paces, but I was pleasantly surprised when it only took 10 generations to evolve a <a class=\"zem_slink freebase/en/simple_sentence\" title=\"Simple sentence\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Simple_sentence\">simple sentence</a> and only about 150 generations to create a stanza of Hamlet.</p>\n<p>The Oscar Wilde poem mentioned earlier is taking a bit longer. After 1000 generations it seems to be mostly prancing around the 5-8 differences range and showing a general downward trend. The lowest peak I saw was at 4. It will probably finish eventually, but perhaps some tweaking of the settings is needed.</p>\n<p>At the time of writing the algorithm has managed to turn this:</p>\n<pre lang=\"random\">llajC\r\nbeq'abvnM.pvvTSEjl -S\r\nc ue-v,ub,\r\nlWoqf'nmhpojfWNNufyv-EywDCO,m:ayu.fqOMTbew.hCyiOkp:vlgSffDFun.nyiM'np bwlkbkj'EyST.kN.li -og\r\nEeiqctEi.aSCwcjNSwmpnEamhoeODSc.\r\n,wltnOvMN:oprSbi,CobNh-\r\niyw..hbpF-NNk'fusCtgtT.upmetwAjenlWOsAEg\r\nAncoilDSvAO.DmMoiyFttAawTiCjaNu\r\nasoCtynkhO-CoDdWWW,gE\r\niOwuk.yFS v\r\nNmdqtvs'fgiAS,cWtwOotm:\r\nr,dt,FNqen:f-\r\ny,Aa, pMNrDM\r\nEOFFgqjM\r\nMwmtldkD Sb.eq'D:ncc-vdvkpTme,:,'jDabdnNS'p'bFT\r\ngWhudWprFpFywAh.bdCWOwcNk-fbou,,gWosvfTyFhrkACd CrhfbrDN\r\n\r\noMw'cEfiEcqpqS\r\npTdpyFT,u',TEl hmhskd,'jrAs\r\nkgOaetibdEEfqaAyd,vhh.s\r\ndp'Wicr: uMfa'Wl,f,WEdumCfgEDgqfhhFfDu:mnbvM'iAWjSw :\r\nhrb-FltrDkt'atC</pre>\n<p>Into this:</p>\n<pre lang=\"random\">Oft have be trod the vales of Castaly\r\nAnd heard sweet notes of sylvan music blown\r\nFrom antique reeds to common folk unknown:\r\nAnd often launch\r\nd ou  bark upon that sea\r\nWhich the nEne Muses hold in empery,\r\nAnd ploughed free furrows through the wave and foam,\r\nNor spread reluctant sail for more safe home\r\nTill we had freighted well our argosy.\r\n\r\nOf which despoiled treasures these remain,\r\nSor:ello's passion, and the honied line\r\nOf young Endymion, lordly Tamburlaine\r\nDriving his pampered jades, and more than these,\r\nThe seven-fold vision of the Florentine,\r\nAnd grave-browed Milton's solemn harmonies.</pre>\n<h2>Better idea</h2>\n<p>Since this simple hack got me interested in this field, I think I&#8217;ve come up with an even better way of creating texts. One that could perhaps even be capable of creating works of art not known in advance and thus become actually a useful implementation of an evolution algorithm.</p>\n<p>The general idea is such: instead of mixing around random characters and comparing them to a text. What if we would first use this same algorithm to generate words roughly fitting the English syllabic structure.</p>\n<p>Then we could start putting those words together using a similar principle as I&#8217;ve used here. Just make sure when breeding you are working on the level of words. Then your fitness function basically checks for proper poetic structure.</p>\n<p>Voila!</p>\n<p>Not sure that would be at all useful, but it might just be something pretty cool and nerdy to make some day.</p>\n<p>Comments regarding the suggested algorithm especially wanted!</p>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles</h6>\n<ul class=\"zemanta-article-ul\">\n<li class=\"zemanta-article-ul-li\"><a href=\"http://www.qubit.devisland.net/ga/\">Genetic algorithm demo: finding optimal vehicle design (in Flash)</a> (qubit.devisland.net)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://www.boingboing.net/2010/11/30/robots-designed-by-g.html\">Robots designed by genetic algorithms</a> (boingboing.net)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://stackoverflow.com/questions/1538235/\">What problems have you solved using genetic algorithms/genetic programming?</a> (stackoverflow.com)</li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=105348b0-9f25-43ec-b351-f11f53a0dc1b\" alt=\"Enhanced by Zemanta\" /></a><span class=\"zem-script more-related more-info pretty-attribution\"><script src=\"http://static.zemanta.com/readside/loader.js\" type=\"text/javascript\"></script></span></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"5373a5ec-d78e-5cb1-bd5b-f7949d0bdd22"}}