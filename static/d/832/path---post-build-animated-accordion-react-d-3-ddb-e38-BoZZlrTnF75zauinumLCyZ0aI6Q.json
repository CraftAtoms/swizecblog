{"data":{"wordpressPost":{"title":"Build an animated pure SVG dynamic height accordion with React and D3","content":"<p><iframe src=\"https://codesandbox.io/embed/r02j7p45w4\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe></p>\n<p>This is a proof of concept I built for a client. They were building an event flow data visualization and weren&#8217;t happy with how finicky and hard to use their components turned out.</p>\n<p>So they asked me for help üí™</p>\n<h2>Goal</h2>\n<p>The goal was to have an event flow visualization where icons represent different types of events, are connected with an unbroken line, and show additional information when clicked. The additional information can contain sub-flows, further data visualization, or just text.</p>\n<p>It‚Äôs inspired by how GitHub visualizes the PR process but is intended for richer graphics. Hence why it has to be in SVG.</p>\n<div id=\"attachment_8417\" style=\"width: 906px\" class=\"wp-caption alignnone\"><img class=\"alignnone size-full wp-image-8417\" src=\"https://swizec.com/blog/wp-content/uploads/2018/06/githubscreenshot.jpg\" alt=\"GitHub shows the PR process using connected event icons with descriptions\" width=\"896\" height=\"580\" srcset=\"https://swizec.com/blog/wp-content/uploads/2018/06/githubscreenshot.jpg 896w, https://swizec.com/blog/wp-content/uploads/2018/06/githubscreenshot-300x194.jpg 300w, https://swizec.com/blog/wp-content/uploads/2018/06/githubscreenshot-768x497.jpg 768w\" sizes=\"(max-width: 896px) 100vw, 896px\" /><p class=\"wp-caption-text\">GitHub shows the PR process using connected event icons with descriptions</p></div>\n<h2>Problems to solve / gotchas to catch</h2>\n<p>The trouble begins when you realize SVG is <em>terrible</em> for layout. You want SVG because it&#8217;s great for dataviz ‚Äìfun shapes, vector graphics, full control of element positioning. Great.</p>\n<p>But also full control of element positioning. üò©</p>\n<blockquote class=\"twitter-tweet\" data-width=\"550\" data-dnt=\"true\">\n<p lang=\"en\" dir=\"ltr\">Surely can‚Äôt be harder than text layiut in SVG</p>\n<p>&mdash; Swizec (@Swizec) <a href=\"https://twitter.com/Swizec/status/999619898555826176?ref_src=twsrc%5Etfw\">May 24, 2018</a></p></blockquote>\n<p><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n<p>With great power comes great amounts of work, you see. Where HTML performs basic layouting for you, SVG does not. Want text to flow into a new line? Do it yourself. Want elements to push other elements out of the way? Do it yourself. Want anything to happen? Do it yourself.</p>\n<p>This is great when you have all the information up front.</p>\n<p>But it‚Äôs terrible when you can&#8217;t know the size of some elements. Like the height of those dynamic blocks on the right.</p>\n<p>My client tried several approaches and finally settled on a component structure a little like this üëá</p>\n<div id=\"attachment_8415\" style=\"width: 1088px\" class=\"wp-caption alignnone\"><img class=\"alignnone size-full wp-image-8415\" src=\"https://swizec.com/blog/wp-content/uploads/2018/06/component-structure1.jpg\" alt=\"Almost good enough structure\" width=\"1078\" height=\"1029\" srcset=\"https://swizec.com/blog/wp-content/uploads/2018/06/component-structure1.jpg 1078w, https://swizec.com/blog/wp-content/uploads/2018/06/component-structure1-300x286.jpg 300w, https://swizec.com/blog/wp-content/uploads/2018/06/component-structure1-768x733.jpg 768w, https://swizec.com/blog/wp-content/uploads/2018/06/component-structure1-1024x977.jpg 1024w\" sizes=\"(max-width: 1078px) 100vw, 1078px\" /><p class=\"wp-caption-text\">Almost good enough structure</p></div>\n<p>Each row is a <code>div</code> that contains an <code>svg</code> on the left and a <code>div</code> on the right. The SVG renders our icon and the vertical line. The <code>div</code> contains potentially expanding descriptions.</p>\n<p>When the inner <code>div</code> becomes bigger, it resizes the container <code>div</code>. This pushes the rows below further down.</p>\n<p>All great üëå</p>\n<p>But it&#8217;s finicky, difficult to align, and you don&#8217;t even wanna know what happens when someone resizes their browser and elements start breaking into new lines.</p>\n<p>The objective, therefore, is to build a solution that:</p>\n<ul>\n<li>is not finicky</li>\n<li>has a simple API</li>\n<li>works with arbitrary row heights</li>\n<li>can handle rows resizing after initial render</li>\n<li>allows users to render anything into this structure</li>\n</ul>\n<h2>The solution</h2>\n<p>Render everything inside an SVG, use <code>foreignObject</code> to support auto text layouting on the right, and abuse React ref callbacks to deal with dynamic height.</p>\n<p>In a nutshell üëá</p>\n<img class=\"alignnone size-full wp-image-8416\" src=\"https://swizec.com/blog/wp-content/uploads/2018/06/accordionflow-sketch.jpg\" width=\"1471\" height=\"1979\" srcset=\"https://swizec.com/blog/wp-content/uploads/2018/06/accordionflow-sketch.jpg 1471w, https://swizec.com/blog/wp-content/uploads/2018/06/accordionflow-sketch-223x300.jpg 223w, https://swizec.com/blog/wp-content/uploads/2018/06/accordionflow-sketch-768x1033.jpg 768w, https://swizec.com/blog/wp-content/uploads/2018/06/accordionflow-sketch-761x1024.jpg 761w\" sizes=\"(max-width: 1471px) 100vw, 1471px\" />\n<ul>\n<li><code>&lt;AccordionFlow&gt;</code> renders rows</li>\n<li><code>&lt;AccordionFlow&gt;</code> holds an array of known or default row heights, used for vertical positioning</li>\n<li><code>&lt;Row&gt;</code> gets 2 render props, <code>icon</code> and <code>content</code></li>\n<li><code>icon</code> renders the left side</li>\n<li><code>content</code> renders the right side inside a <code>&lt;foreignObject&gt;</code></li>\n<li>a ref callback on <code>content</code> triggers a height update callback</li>\n<li>the height update callback updates a list of heights in <code>&lt;AccordionFlow&gt;</code></li>\n<li>this triggers a re-render and each <code>&lt;Row&gt;</code> declaratively transitions itself into its new position</li>\n<li>when the <code>content</code> updates itself, it calls a callback that tells <code>&lt;Row&gt;</code> its height has changed</li>\n<li>the same reflow happens as before</li>\n</ul>\n<p>Savvy? Here&#8217;s how it works again</p>\n<p><iframe src=\"https://codesandbox.io/embed/r02j7p45w4\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe></p>\n<p>Let&#8217;s look at the code üôÇ</p>\n<h2>index.js</h2>\n<p>You can think of this as the consumer side. Whomever needs to render our <code>AccordionFlow</code>.</p>\n<p>It starts by creating an array of arrays to represent our data. Each has an <code>&lt;Icon&gt;</code> and a <code>&lt;Content&gt;</code>.</p>\n<pre lang=\"javascript\">// index.js prep data\n\nconst icons = [<Circle />, <Rectangle />, <Triangle />],\n  flowData = d3range(10).map(i => [\n    icons[i % 3],\n    contentUpdated => (\n      <DynamicContent title={`Row ${i}`} contentUpdated={contentUpdated}>\n        {d3range(10)\n          .slice(0, i)\n          .map(() => faker.lorem.paragraph())}\n      </DynamicContent>\n    )\n  ]);\n</pre>\n<p>Icon is a plain component. We&#8217;re rendering it as a compound component with no frills. <code><DynamicContent></code> is wrapped in a function because it&#8217;s going to be used as a render prop. It gets the callback function it can call to dynamically update its height after initial rendering.</p>\n<p>We need this so <code>AccordionFlow</code> can know when to push other rows out of the way.</p>\n<p>Rendering our dataviz is meant to be simple üëá</p>\n<pre lang=\"javascript\">// index.js render method\n    <svg width=\"600\" height=\"2240\">\n      <AccordionFlow data={flowData} />\n    </svg>\n</pre>\n<p>Svg is very tall to make room for expanding. We <em>could</em> wrap <code>AccordionFlow</code> in additional callbacks and make svg height dynamic, but this is a proof of concept üôÇ</p>\n<h2><AccordionFlow></h2>\n<p>AccordionFlow is where we render every row, the vertical line on the left, keep a list of known heights for each row, and handle vertical positioning.</p>\n<p>Using idiomatic but not the most readable code, it comes out to 30 lines. üíÅ‚Äç‚ôÄÔ∏è</p>\n<pre lang=\"javascript\">// AccordionFlow\n\nclass AccordionFlow extends React.Component {\n  defaultHeight = 50;\n  state = {\n    heights: this.props.data.map(_ => this.defaultHeight)\n  };\n  render() {\n    const { data } = this.props,\n      { heights } = this.state;\n\n    return (\n      <g transform=\"translate(0, 20)\">\n        <line\n          x1={15}\n          x2={15}\n          y1={10}\n          y2={heights.reduce((sum, h) => sum + h, 0)}\n          stroke=\"lightgrey\"\n          strokeWidth=\"2.5\"\n        />\n        {data.map(([icon, content], i) => (\n          <Row\n            icon={icon}\n            content={content}\n            y={heights.slice(0, i).reduce((sum, h) => sum + h, 0)}\n            width={450}\n            key={i}\n            reportHeight={height => {\n              let tmp = [...heights];\n              tmp[i] =\n                height !== undefined &amp;&amp; height > this.defaultHeight\n                  ? height\n                  : this.defaultHeight;\n              this.setState({ heights: tmp });\n            }}\n          />\n        ))}\n      </g>\n    );\n  }\n}\n</pre>\n<p>We start with default <code>heights</code> of <code>50</code> pixels, and render a grouping element <code>&lt;g&gt;</code> to help with positioning. Inside we render a vertical <code>&lt;line&gt;</code> to connect all icons, then go into a loop of rows.</p>\n<p>Each <code>&lt;Row&gt;</code> gets</p>\n<ul>\n<li>an <code>icon</code> render prop</li>\n<li>a <code>content</code> render prop</li>\n<li>vertical position <code>y</code> calculated as the sum of all <code>heights</code> so far</li>\n<li>a <code>width</code>, which helps it figure out its height</li>\n<li>a <code>key</code> just so React doesn&#39;t complain</li>\n<li>a <code>reportHeight</code> callback, which updates a particular height in our <code>heights</code> array</li>\n</ul>\n<p>We should probably move that callback into a class method, but we need to encapsulate the index. Best we could do is something like <code>height => this.reportHeight(height, i)</code>.</p>\n<h2><Row></h2>\n<p>The <code><Row></code> component is more beastly. It renders the icon and the content, handles height callbacks, and uses my <a href=\"https://swizec.com/blog/declarative-d3-transitions-react/swizec/8323\">declarative D3 transitions with React 16.3+</a> approach to animate its vertical positioning.</p>\n<p>64 lines of code in total.</p>\n<pre lang=\"javascript\">class Row extends React.Component {\n  state = {\n    open: false,\n    y: this.props.y\n  };\n  \n  toggleOpen = () => this.setState({ open: !this.state.open });\n\n    // needed for animation\n  rowRef = React.createRef();\n\n    // magic dynamic height detection\n  contentRefCallback = element => {\n    if (element) {\n      this.contentRef = element;\n      this.props.reportHeight(element.getBoundingClientRect().height);\n    } else {\n      this.props.reportHeight();\n    }\n  };\n\n  contentUpdated = () => {\n    this.props.reportHeight(this.contentRef.getBoundingClientRect().height);\n  };\n\n  componentDidUpdate() {\n    // handle animation\n  }\n\n  render() {\n      // render stuff\n  }\n}\n</pre>\n<p>Our <code><Row></code> component uses <code>state</code> to keep track of whether it&#8217;s <code>open</code> and its vertical position <code>y</code>.</p>\n<p>We use <code>toggleOpen</code> to flip the <code>open</code> switch. Right now, that just means the difference between <code>content</code> being rendered or not.</p>\n<p>The fun stuff happens in <code>contentRefCallback</code>. We use this as a <a href=\"https://reactjs.org/docs/refs-and-the-dom.html#callback-refs\">React ref callback</a>, which is a method that React calls when a new element is rendered into the DOM.</p>\n<p>We use this opportunity to save the ref as a component property for future reference, get its height using <code>getBoundingClientRect</code>, and call the <code>reportHeight</code> callback to tell <code><AccordionRow></code> about our new height.</p>\n<p>Something similar happens in <code>contentUpdated</code>. It&#8217;s a callback we pass into the <code>content</code> render prop so it can tell us when something changes. We then re-check our new height and report it up the hierarchy.</p>\n<h3>render</h3>\n<p>The <code>render</code> method puts all of this together.</p>\n<pre lang=\"javascript\">  render() {\n    const { icon, content, width } = this.props,\n      { y } = this.state;\n\n    return (\n      <g transform={`translate(5, ${y})`} ref={this.rowRef}>\n        <g onClick={this.toggleOpen} style={{ cursor: \"pointer\" }}>\n          {icon}\n        </g>\n        {this.state.open ? (\n          <foreignObject\n            x={20}\n            y={-20}\n            width={width}\n            style={{ border: \"1px solid red\" }}\n          >\n            <div ref={this.contentRefCallback}>\n              {typeof content === \"function\"\n                ? content(this.contentUpdated)\n                : content}\n            </div>\n          </foreignObject>\n        ) : null}\n      </g>\n    );\n  }\n</pre>\n<p>We start with a grouping element <code><g></code> that handles positioning and sets the <code>rowRef</code>.</p>\n<p>Inside, we render first a grouping element with a click callback and our <code>icon</code>. This lets us open and close a row.</p>\n<p>Followed by a conditional rendering of a <code>foreignObject</code> that contains our <code>content</code>. Foreign objects are SVG elements that let you render just about anything. HTML, more SVG, &#8230;. HTML. Mostly HTML, that&#8217;s the magic.</p>\n<p>This <code>foreignObject</code> has an <code>x,y</code> position to compensate for some funniness, and a <code>width</code> that helps your browser&#8217;s layouting engine decide what to do.</p>\n<p>It then contains a <code>div</code> so we can attach our <code>contentRefCallback</code> because putting it on <code>foreignObject</code> always reported height as <code>0</code>. I don&#8217;t know why.</p>\n<p>We then render our <code>content</code> as either a functional render prop being passed the <code>contentUpdated</code> callback, or a simple component.</p>\n<h3>componentDidUpdate</h3>\n<p><code>componentDidUpdate</code> declaratively handles the vertical transitioning of every row&#8217;s vertical position. You should read my <a href=\"https://swizec.com/blog/declarative-d3-transitions-react/swizec/8323\">Declarative D3 transitions with React 16.3</a> article for details.</p>\n<pre lang=\"javascript\">  componentDidUpdate() {\n    const { y } = this.props;\n    d3\n      .select(this.rowRef.current)\n      .transition()\n      .duration(500)\n      .ease(d3.easeCubicInOut)\n      .attr(\"transform\", `translate(5, ${y})`)\n      .on(\"end\", () => {\n        this.setState({\n          y\n        });\n      });\n  }\n</pre>\n<p>The idea is that we take the new <code>y</code> prop, transition our DOM node directly using D3, then update our <code>state</code> to keep React in sync with reality.</p>\n<h2><DynamicContent></h2>\n<p>To be honest, <code>&lt;DynamicContent&gt;</code> isn&#39;t the fun part of this code. I include it here for completeness.</p>\n<p>It&#8217;s a component that renders a title and some paragraphs, waits 1.2 seconds, then adds another paragraph. There&#8217;s also a spinner to make things more interesting.</p>\n<pre lang=\"javascript\">lass DynamicContent extends React.Component {\n  state = {\n    paragraphs: this.props.children,\n    spinner: true\n  };\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        paragraphs: [...this.state.paragraphs, faker.lorem.paragraph()],\n        spinner: false\n      });\n      this.props.contentUpdated();\n    }, 1200);\n  }\n\n  render() {\n    const { title } = this.props,\n      { paragraphs, spinner } = this.state;\n\n    return (\n      <React.Fragment>\n        <h3>{title}</h3>\n        {paragraphs.map(c => {c}</p>)}\n        <p>\n          {spinner &amp;&amp; (\n            <Spinner\n              name=\"cube-grid\"\n              color=\"green\"\n              fadeIn=\"none\"\n              style={{ margin: \"0 auto\" }}\n            />\n          )}\n        \n      </React.Fragment>\n    );\n  }\n}\n</pre>\n<p>See, state holds paragraphs and a spinner flag. <code>componentDidMount</code> has a timeout of 1.2 seconds, then adds another paragraph and calls the <code>contentUpdated</code> callback.</p>\n<p>The render method returns a <code>React.Fragment</code> containing an <code>h3</code> with the <code>title</code>, a bunch of paragraphs, and an optional <code>Spinner</code> from <a href=\"https://github.com/KyleAMathews/react-spinkit\">react-spinkit</a>.</p>\n<p>Nothing special, but the dynamic stuff could wreak havoc with our <code>AccordionFlow</code> without that callback.</p>\n<p>Happy hacking ü§ì</p>\n<h2>Should I open source this?</h2>\n<p>What do you think, should I open source this? Would anyone find it useful? Ping me on Twitter or Reddit since I&#8217;m prob posting this to Reddit üòõ</p>\n<blockquote class=\"twitter-tweet\" data-width=\"550\" data-dnt=\"true\">\n<p lang=\"en\" dir=\"ltr\">üìñ Boom, new in-depth article It&#39;s been a while üòÖ</p>\n<p>Build an animated pure SVG dynamic height accordion dataviz with <a href=\"https://twitter.com/hashtag/React?src=hash&amp;ref_src=twsrc%5Etfw\">#React</a> and <a href=\"https://twitter.com/hashtag/D3?src=hash&amp;ref_src=twsrc%5Etfw\">#D3</a> üìä</p>\n<p>Should I open source this? ü§î Designed to be flexible and easy to use</p>\n<p>üëâ <a href=\"https://t.co/AlfBxCGzkf\">https://t.co/AlfBxCGzkf</a> <a href=\"https://t.co/Azyvx3tsj0\">pic.twitter.com/Azyvx3tsj0</a></p>\n<p>&mdash; Swizec (@Swizec) <a href=\"https://twitter.com/Swizec/status/1002602899845738496?ref_src=twsrc%5Etfw\">June 1, 2018</a></p></blockquote>\n<p><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"71867501-9bd0-5872-bf09-5eac7042899f"}}