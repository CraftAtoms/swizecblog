{"data":{"wordpressPost":{"title":"Livecoding #22: A door-answering Slackbot","content":"<p><em>This is a Livecoding Recap – an almost-weekly post about interesting things discovered while livecoding ?. Always under 500 words and with pictures. You can follow my channel, <a href=\"https://livecoding.tv/swizec\">here</a>. New streams almost <strong>every Sunday at 2pm PDT</strong>. There’s live chat, come say hai ?</em></p>\n<p><iframe src=\"https://www.livecoding.tv/swizec/videos/k1jom/embed\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"true\" scrolling=\"no\"></iframe></p>\n<p>Aaaaaalmost hacked together a Slack bot that can answer the door. There&#8217;s one last step to figure out and then we are ready to rock. ??</p>\n<p>Buildings in the US, or at least in San Francisco, have buzzers that connect to a phone rather than a purpose-built wall-mounted device. You set it up with your phone, and whenever someone wants to come visit, your phone rings, you say Hello, and buzz them in.</p>\n<p>It’s perfect for the home. It’s <em>really</em> annoying for anyone stuck with buzzer duty at the office.</p>\n<p>A Slack bot can do that for us. Here&#8217;s the idea:</p>\n<ul>\n<li>give the buzzer a Twilio phone number</li>\n<li>build a small node.js server to answer the phone</li>\n<li>send Slack message with an <em>&#8220;I am so and so&#8221;</em> audio clip</li>\n<li>offer <code>Deny</code> and <code>Let them in</code> buttons</li>\n<li>anyone can buzz anyone in</li>\n<li>profit.</li>\n</ul>\n<p>The profit part comes if Slack lets me release this as a, say, $10/month service. We&#8217;ll see. ?</p>\n<p>You can also play with it as an <a href=\"https://github.com/Swizec/door-answer-slackbot\">open source project on Github</a>. But it&#8217;s not really ready for prime-time yet. The code is a mess, and there&#8217;s no README file to tell you how to set it up.</p>\n<p>The bright side is that you can see all my API keys in the livecoding video. I&#8217;m going to change those. Probably.</p>\n<p>When Twilio receives a phone call, it posts to our webhook on <code>&lt;server&gt;/call</code>. This is the start of our user experience. We reply with <code>Hello! State your name, then press anything</code>. Like this:</p>\n<pre lang=\"javascript\">\r\nrouter.post('/call', function (req, res, next) {\r\n    const caller = req.body.Caller;\r\n    const callSid = req.body.CallSid;\r\n\r\n    let twiml = new twilio.TwimlResponse();\r\n\r\n    twiml.say('Hello! State your name, then press any key.', {voice: 'alice'});\r\n\r\n    twiml.record({\r\n        action: `/call/recording/${callSid}`,\r\n        //transcribe: true,\r\n        //transcribeCallback: `/call/recording/${callSid}`,\r\n        maxLength: 60\r\n    });\r\n\r\n    res.type('text/xml');\r\n    res.send(twiml.toString());\r\n});\r\n</pre>\n<p>That <code>twiml</code> stuff constructs a response using TwiML, a Twilio-extended XML language. Twilio can turn <code>&lt;Say&gt;text&lt;/Say&gt;</code> commands into spoken dialogue using various voice synthesizers. You’ve gotta use proper punctuation though. It sounds weird otherwise.</p>\n<p>We ask Twilio to record a response and send the audio clip to our <code>/call/recording/&lt;id&gt;</code> API. In that API, we send a Slack text and put the caller on hold.</p>\n<pre lang=\"javascript\">\r\nrouter.post('/call/recording/:callSid', (req, res, next) => {\r\n    const callSid = req.params.callSid;\r\n    const twiml = new twilio.TwimlResponse();\r\n    const recordingUrl = req.body.RecordingUrl;\r\n\r\n    let data = {\r\n        attachments: [{\r\n            fallback: 'Somebody is at the door',\r\n            title: 'Somebody is at the door',\r\n            title_link: recordingUrl,\r\n            text: 'Click link to hear the recording',\r\n            callback_id: `door_open:${callSid}`,\r\n            actions: [\r\n                {\r\n                    name: 'open_door',\r\n                    text: 'Let them in',\r\n                    type: 'button',\r\n                    value: 'open_door'\r\n                },\r\n                {\r\n                    name: 'deny_access',\r\n                    text: 'No.',\r\n                    type: 'button',\r\n                    value: 'deny_access'\r\n                }\r\n            ]\r\n        }]\r\n    };\r\n\r\n    webSlack.chat.postMessage('#bot-testing', '', data, () => {\r\n        twiml.say('Thank you. Please hold.', {voice: 'alice'});\r\n        twiml.pause(240);\r\n\r\n        res.type('text/xml');\r\n        res.send(twiml.toString());\r\n    });\r\n});\r\n</pre>\n<p>We get the audio clip as a URL, and we post to Slack using their Web client thingy. The real-time-messaging client can&#8217;t do complex messages.</p>\n<p>This is what you get on Slack:</p>\n<figure>\n<img src=\"http://i.imgur.com/E5JakQs.png\" alt=\"\" /><br />\n</figure>\n<p>Now comes the part I haven&#8217;t figured out yet:</p>\n<ol>\n<li>Build the API for those Slack buttons – it always throws an error ?</li>\n<li>Figure out how to continue sending to a Twilio call outside of the original webhoook, if I know the original call ID.</li>\n</ol>\n<p>The first bit is just a matter of figuring out my config. Slack gives clear instructions for doing that; I just gave up too soon.</p>\n<p>The second bit, though&#8230; that&#8217;s hard. I can&#8217;t find any documentation for it, and I haven&#8217;t had any luck Googling for it either.</p>\n<p>Gonna talk to Twilio&#8217;s help team and finish this up next Sunday. Don’t forget to come watch.</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"80e60db2-c651-5a9d-a702-79d4a7f1d17c"}}