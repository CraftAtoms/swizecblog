{"data":{"wordpressPost":{"title":"An elegant way to randomly change every list member in Haskell","content":"<p>Randomness is a bit of a strange concept in <a class=\"zem_slink\" title=\"Haskell (programming language)\" href=\"http://haskell.org\" rel=\"homepage\" target=\"_blank\">Haskell</a>. </p>\n<p>As I discovered writing about <a href=\"http://swizec.com/blog/haskell-and-randomness/swizec/4763\" target=\"_blank\">Haskell and Randomness</a> a few weeks ago, the best way to avoid doing everything inside the IO monad is to write functions that always return the random generator.</p>\n<p>The crux of the matter is that random generators are long mathematical sequences. If you keep using the same index, you&#8217;ll keep getting the same &#8220;random&#8221; value. You <em>have</em> to make sure the random generator progresses.</p>\n<p>Increasing a number by a random value would look something like this:</p>\n<pre lang=\"haskell\">\r\nimport System.Random\r\n\r\naddRand::(RandomGen g) => g -> Int -> (g, Int)\r\naddRand gen x = let (a, gen') = randomR (0, 20) gen\r\n                in (gen', x+a)\r\nmain = do\r\n  generator <- newStdGen\r\n\r\n  print $ snd $ addRand generator 5\r\n  -- prints 15\r\n</pre>\n<p>While this approach is great for changing a single value, it breaks down when you try to randomly change a whole list:</p>\n<pre lang=\"haskell\">  \r\n  print $ map (snd . (addRand generator)) [1,1,1,1]\r\n  -- prints [11,11,11,11]\r\n</pre>\n<p>Bummer! We applied a random function to every list member. And got a list of identical values!</p>\n<p>The problem is that every time <em>addRand</em> gets called, it uses the same random generator. This means we're always using the same number in the random generator series.</p>\n<p>We need a way to perform a fold and a map at the same time. A map, so the function is applied to every list item and we get a new list, and a fold where the generator is used as the accumulator. </p>\n<p>We might be tempted to write something like this monstrosity:</p>\n<pre lang=\"haskell\">\r\naddRand'::(RandomGen g) => g -> [Int] -> [(g, Int)]\r\naddRand' gen [x] = [addRand gen x]\r\naddRand' gen (x:xs) = let (gen', x') = addRand gen x\r\n                     in (gen', x'):(addRand' gen' xs)\r\n\r\n-- and then in main\r\n  print $ map (snd) $ addRand' generator [1,1,1,1]\r\n  -- prints [11,3,13,14]</pre>\n<p>This works. Every number in the list is different!</p>\n<p>But the code is somewhat terrible and difficult to reason about.</p>\n<p>Luckily, Haskell has got us covered and comes with a standard function called <em>mapAccumL</em>, which is a combination of a fold and a map:</p>\n<pre lang=\"haskell\">  \r\n  print $ snd $ mapAccumL addRand generator [1,1,1,1]\r\n  -- prints [11,3,13,14]\r\n</pre>\n<p>Cleaner, less work, more obvious what's going on. And it just happens to be perfect for writing <a class=\"zem_slink\" title=\"Evolutionary algorithm\" href=\"http://en.wikipedia.org/wiki/Evolutionary_algorithm\" rel=\"wikipedia\" target=\"_blank\">evolutionary algorithms</a> in Haskell. But more on that later, hopefully as early as Friday.</p>\n<p>Here's the whole code:</p>\n<pre lang=\"haskell\">\r\n\r\nimport System.Random\r\nimport Data.List\r\n\r\naddRand::(RandomGen g) => g -> Int -> (g, Int)\r\naddRand gen x = let (a, gen') = randomR (0, 20) gen\r\n                in (gen', x+a)\r\n\r\naddRand'::(RandomGen g) => g -> [Int] -> [(g, Int)]\r\naddRand' gen [x] = [addRand gen x]\r\naddRand' gen (x:xs) = let (gen', x') = addRand gen x\r\n                     in (gen', x'):(addRand' gen' xs)\r\n\r\nmain = do\r\n  generator <- newStdGen\r\n\r\n  print $ snd $ addRand generator 5\r\n  -- prints 15\r\n\r\n  print $ map (snd . (addRand generator)) [1,1,1,1]\r\n  -- prints [11,11,11,11]\r\n\r\n  print $ map (snd) $ addRand' generator [1,1,1,1]\r\n  -- prints [11,3,13,14]\r\n\r\n  print $ snd $ mapAccumL addRand generator [1,1,1,1]\r\n  -- prints [11,3,13,14]\r\n\r\n</pre>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles</h6>\n<ul class=\"zemanta-article-ul zemanta-article-ul-image\" style=\"margin: 0; padding: 0; overflow: hidden;\">\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://swizec.com/blog/haskell-and-randomness/swizec/4763\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/97837627_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://swizec.com/blog/haskell-and-randomness/swizec/4763\" target=\"_blank\">Haskell and randomness</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://www.reddit.com/comments/vi425\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/noimg_116_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://www.reddit.com/comments/vi425\" target=\"_blank\">What was your \"ah ha\" moment with Haskell?</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://www.pokerlistings.com/strategy/psychology/on-randomness\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/noimg_76_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://www.pokerlistings.com/strategy/psychology/on-randomness\" target=\"_blank\">On Randomness</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://www.pokerlistings.com/blog/random-number-generators-for-dummies\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/noimg_15_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://www.pokerlistings.com/blog/random-number-generators-for-dummies\" target=\"_blank\">Random Number Generators for Dummies - Poker Blog</a></li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/?px\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=5433b6d5-80a7-4bfb-90d3-81ae0cd76716\" alt=\"Enhanced by Zemanta\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"b1801766-fdeb-5175-b5a4-95eed0331dce"}}