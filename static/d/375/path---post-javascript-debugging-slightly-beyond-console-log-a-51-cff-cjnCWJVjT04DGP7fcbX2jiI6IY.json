{"data":{"wordpressPost":{"title":"Javascript debugging [slightly] beyond console.log","content":"<div style=\"width: 690px\" class=\"wp-caption alignnone\"><img title=\"debugger;\" alt=\"debugger;\" src=\"https://draftin.com:443/images/25871?token=9nSMQZvgu-5zU5W2miB9UWdX_YwtIbwJKnZsRV2TEhoLcr8QFJi-teuGfw-InXMn6GT4ZKyi5d703eUas3OqMQ8\" width=\"680\" height=\"433\" /><p class=\"wp-caption-text\">debugger;</p></div>\n<p>My favourite tool for javascript debugging is <code>console.log</code>.</p>\n<p>I mean, I <em>love</em> <code>console.log</code>. If I ever get a programming tattoo, it&#8217;s going to be <code>console.log</code> or some variation thereof. Simple to use, works every time, and every programming language I&#8217;ve used since I was 9 has had some variation of it.</p>\n<p><a class=\"zem_slink\" title=\"Pascal (programming language)\" href=\"http://en.wikipedia.org/wiki/Pascal_%28programming_language%29\" target=\"_blank\" rel=\"wikipedia\">Pascal</a> acting up? Not sure what&#8217;s going on? <code>writeln</code></p>\n<p><a class=\"zem_slink\" title=\"Python (programming language)\" href=\"http://www.python.org/\" target=\"_blank\" rel=\"homepage\">Python</a> being silly? <code>print</code></p>\n<p>C acting funny? <code>printf</code></p>\n<p><a class=\"zem_slink\" title=\"Cascading Style Sheets\" href=\"http://en.wikipedia.org/wiki/Cascading_Style_Sheets\" target=\"_blank\" rel=\"wikipedia\">CSS</a> weird? <code>border: 1px solid red</code></p>\n<p><a class=\"zem_slink\" title=\"HTML\" href=\"http://en.wikipedia.org/wiki/HTML\" target=\"_blank\" rel=\"wikipedia\">HTML</a> messing with you? Nah, <a class=\"zem_slink\" title=\"Google Chrome\" href=\"http://www.google.com/chrome\" target=\"_blank\" rel=\"homepage\">Chrome</a>&#8216;s element inspector.</p>\n<p>But as much as I love <code>console.log</code>, sometimes it just does not do. Sure, if you have a proper test suite <code>console.log</code> is always enough. But you don&#8217;t always have a proper test suite.</p>\n<p>Let me explain.</p>\n<p>When you want to understand what&#8217;s going on and where exactly a piece of code goes wrong, you do something like this.</p>\n<pre lang=\"javascript\">var do_something = function (arg1) {\r\n    console.log(\"got into function\", arg1);\r\n    var foo = get_my_foo(arg1);\r\n    do_another_thing();\r\n    console.log(\"foo changed?\", foo);\r\n    return foo;\r\n}</pre>\n<p>Not the prettiest. But it works. You can tell what&#8217;s going on.</p>\n<p>You know for certain the function was called, what the argument value was, and you know the value of <code>foo</code> when it returns.</p>\n<p>Perfect for calling the code once. But what if it&#8217;s part of a list building mechanism?</p>\n<pre lang=\"javascript\">a_lot_of_things.map(function (thing) {\r\n    var label = do_something(thing);\r\n    $(\"ul\").append(\r\n        $(\"<li></li>\").html(label) \r\n    ); \r\n});\r\n</pre>\n<p>Wellp, now you&#8217;ve got a bunch of console output to look through. Annoying, but manageable. You can still tell which argument produces which output.</p>\n<p>But we&#8217;re stretching the limits of <code>console.log</code> here.</p>\n<p>Now what if somebody does this?</p>\n<pre lang=\"javascript\">async.map(a_lot_of_things,\r\n    function (thing) {\r\n        var label = do_something(thing);\r\n        $(\"ul\").append(\r\n            $(\"<li></li>\").html(label) \r\n    ); \r\n});\r\n</pre>\n<p>Wow, that&#8217;s annoying. Your <code>do_something</code> function is called asynchronously. The output is all jumbled up!</p>\n<p>Very annoying. But you can map input to output in your mind. They&#8217;re both printed right next to each other.</p>\n<p>It&#8217;s just harder because you have to read the whole output every time and can&#8217;t jump to the line you&#8217;re interested in. The problem is ALWAYS with just one of the elements. Obviously.</p>\n<p>Wow, we&#8217;re really stretching that <code>console.log</code>. Let&#8217;s break it.</p>\n<pre lang=\"javascript\">var do_something = function (arg1, callback) {\r\n    console.log(\"got into function\", arg1);\r\n    var foo = get_my_foo(arg1);\r\n    setTimeout(function () {\r\n        do_another_thing();\r\n        console.log(\"foo changed?\", foo);\r\n        callback(foo);\r\n    }, 100);\r\n}\r\n\r\nasync.map(a_lot_of_things,\r\n    function (thing) {\r\n        do_something(thing, function (label) {\r\n            $(\"ul\").append(\r\n                $(\"<li></li>\").html(label) \r\n        );\r\n    });\r\n});\r\n</pre>\n<p>You wouldn&#8217;t just spray <code>setTimeout</code>s in your code like that. But now you have an asynchronous function. Maybe it&#8217;s an Angular watch, you&#8217;re responding to a promise, or something.</p>\n<p>Point is, all of your <code>console.log</code> outputs are now jumbled up and useless. Something like this:</p>\n<pre lang=\"html\">got into function, foo1\r\ngot into function, foo3\r\nfoo changed?, yes\r\ngot into function, foo2\r\nfoo changed?, no\r\ngot into function, foo4\r\ngot into function, foo5\r\nfoo changed?, yes\r\nfoo changed?, no\r\nfoo changed?, yes</pre>\n<p>Wow, talk about useless!</p>\n<p>When faced with a situation like this, I would start adding <code>alert()</code>s to my code. It stops execution and lets you look at the output in a particular moment.</p>\n<p>But it blocks the entire browser, you can&#8217;t look around much, and clicking all those pop ups is annoying as hell. Especially once you&#8217;ve found the culprit, but can&#8217;t just refresh the page.</p>\n<p><code>alert()</code> disables Cmd+R because it steals focus from the window. You <em>have to</em> get to the end of the loop before you can stop it.</p>\n<p>üôÅ</p>\n<p>A few weeks ago I stumbled onto a better way through someone&#8217;s throwaway comment. <code>debugger;</code></p>\n<p>It. Is. Magic.</p>\n<p>Instead of that second print statement, <code>console.log(\"foo changed?\", foo)</code>, we&#8217;d put <code>debugger;</code>. When Chrome, and other modern browsers?, sees that statement, it stops.</p>\n<p>But it doesn&#8217;t just stop. It gives you a debugger.</p>\n<div style=\"width: 690px\" class=\"wp-caption alignnone\"><img title=\"The debugger, initial view\" alt=\"The debugger, initial view\" src=\"https://draftin.com:443/images/25868?token=1zEmDAU3OVJSlTeoV_-MlIhKGCCCgfoUC7N8hUoeHm3DAL0_05-t4wJRfWUEey60ee6oKaloiX4jQmWzTTe9L0E\" width=\"680\" height=\"433\" /><p class=\"wp-caption-text\">The debugger, initial view</p></div>\n<p>You can&#8217;t see it in the screenshot, but even <a class=\"zem_slink\" title=\"Graphics Interchange Format\" href=\"http://en.wikipedia.org/wiki/Graphics_Interchange_Format\" target=\"_blank\" rel=\"wikipedia\">GIFs</a> are stopped. A moment ago that Santa was dancing, now everything is in <em>&#8220;Holy shit, he&#8217;s debugging!&#8221;</em> mode.</p>\n<p>The code that triggered <code>debugger;</code> is in the middle. A bunch of inspection tools are on the right. On top of the screen is an <em>&#8220;I&#8217;m done now, please continue&#8221;</em> button.</p>\n<p>But more importantly, the console is in current scope! You can do whatever you want.</p>\n<div style=\"width: 660px\" class=\"wp-caption alignnone\"><img title=\"Console is in current scope\" alt=\"Console is in current scope\" src=\"https://draftin.com:443/images/25870?token=9bSZRyT_hfsRlr-vW233TKP2Xmaw6Gi4G8YS9OifD0uKIdgskr0lEQCmbprxw9zNar_PJrUrKAMc-PCKJDgDszs\" width=\"650\" height=\"217\" /><p class=\"wp-caption-text\">Console is in current scope</p></div>\n<p>And once you&#8217;ve found the culprit, you can just refresh the page. No waiting for all the <code>alert()</code>s to show up.</p>\n<p>Now, I&#8217;m not going to stop using <code>console.log</code> any time soon. But knowing about <code>debugger</code> has made my life easier many times.</p>\n<p>I only wish I&#8217;d known about it sooner.</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"0f26c765-1738-5b98-9f5f-cc2cb96e08e3"}}