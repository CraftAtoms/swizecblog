{"data":{"wordpressPost":{"title":"Natural Language Generation system architectures","content":"<p>This post is summarized from Chapter 3 of <a href=\"http://staf.cs.ui.ac.id/~maruli/\" target=\"_blank\">Ruli Manurung</a>&#8216;s <em><a href=\"https://docs.google.com/viewer?url=http%3A%2F%2Fwww.inf.ed.ac.uk%2Fpublications%2Fthesis%2Fonline%2FIP040022.pdf\" target=\"_blank\">An evolutionary algorithm approach to poetry generation</a></em> from 2003 &#8211; it is essentially 10 years old research from a fast moving field of science. However, these are core principles and techniques; a casual perusal of wikipedia indicates they are still valid.</p>\n<p>If you know of something new and spectacular, I&#8217;d love to know.</p>\n<h2><a class=\"zem_slink\" title=\"Natural language generation\" href=\"http://en.wikipedia.org/wiki/Natural_language_generation\" rel=\"wikipedia\" target=\"_blank\">Natural Language Generation</a></h2>\n<p>So what is natural language generation anyway? The only thing everyone can agree on is that the algorithm should take some manner of input and output a sensible text that a human can read and understand.</p>\n<div style=\"width: 323px\" class=\"wp-caption alignright\"><img title=\"Trisk - a conversational robot\" src=\"http://web.media.mit.edu/~dkroy/img/research/feature/trisk.jpg\" alt=\"Trisk - a conversational robot\" width=\"313\" height=\"315\" /><p class=\"wp-caption-text\">Trisk - a conversational robot</p></div>\n<p>Formally defined, a NLG system should accept a <em>&lt;k,c,u,d&gt;</em> tuple, where <em>k</em> is the knowledge source, <em>c</em> is the communicative goal, <em>u</em> is the user model and <em>d</em> is the discourse model. Essentially this means that <em>&#8220;You know K and you want to say C to U, using the style of D&#8221;</em> &#8230; remember back to your high school days &#8211; before writing an essay the teacher would tell you exactly this.</p>\n<p>The output &#8230; well that&#8217;s easier, it should make sense, fulfill the communicative goal and look like it was written at least by a trained monkey.</p>\n<p>A NLG system usually involves three processes:</p>\n<ol>\n<li><a class=\"zem_slink\" title=\"Content determination\" href=\"http://en.wikipedia.org/wiki/Content_determination\" rel=\"wikipedia\" target=\"_blank\">Content determination</a> &#8211; what you&#8217;re going to say, based on knowledge, communicative goal and user&#8217;s expectations</li>\n<li>Sentence planning &#8211; how are you going to say it. Remember, semantically sane!</li>\n<li>Surface realisation &#8211; the final output, which specific words to use, do sentences follow each other nicely and so on. You could call this <em>style </em>or <em>flow</em>.</li>\n</ol>\n<h2>Traditional architecture</h2>\n<p>Traditionally this has been approached by discretely implementing the three stages and assembling them into a pipeline of some sort.</p>\n<div id=\"attachment_4539\" style=\"width: 577px\" class=\"wp-caption alignnone\"><a href=\"http://swizec.com/blog/wp-content/uploads/2012/05/three-reiter-pipeline-architecture.png\"><img class=\"size-full wp-image-4539\" title=\"Three reiter pipeline architecture\" src=\"http://swizec.com/blog/wp-content/uploads/2012/05/three-reiter-pipeline-architecture.png\" alt=\"Three reiter pipeline architecture\" width=\"567\" height=\"121\" srcset=\"https://swizec.com/blog/wp-content/uploads/2012/05/three-reiter-pipeline-architecture.png 567w, https://swizec.com/blog/wp-content/uploads/2012/05/three-reiter-pipeline-architecture-300x64.png 300w\" sizes=\"(max-width: 567px) 100vw, 567px\" /></a></dt>\n</dl>\n</div>\n<p>More modernly <a href=\"http://en.wikipedia.org/wiki/Natural_language_generation#Stages\" target=\"_blank\">Wikipedia suggests a six stage solution</a> divided into: Content determination, <a class=\"zem_slink\" title=\"Document structuring\" href=\"http://en.wikipedia.org/wiki/Document_structuring\" rel=\"wikipedia\" target=\"_blank\">Document structuring</a>, Aggregation, <a class=\"zem_slink\" title=\"Lexical choice\" href=\"http://en.wikipedia.org/wiki/Lexical_choice\" rel=\"wikipedia\" target=\"_blank\">Lexical choice</a>, <a class=\"zem_slink\" title=\"Referring expression generation\" href=\"http://en.wikipedia.org/wiki/Referring_expression_generation\" rel=\"wikipedia\" target=\"_blank\">Referring expression generation</a> and Realisation. However this is still essentially the same approach.</p>\n<p>But what if you don&#8217;t have a clear communicative goal and just want to say something interesting about a subject? Or perhaps a later stage might find a better solution that has been disallowed by an earlier stage.</p>\n<p>A number of different architectures have emerged to combat these problems:</p>\n<a href=\"http://swizec.com/blog/wp-content/uploads/2012/05/NLG-architectures.png\"><img class=\"alignnone size-full wp-image-4540\" title=\"NLG architectures\" src=\"http://swizec.com/blog/wp-content/uploads/2012/05/NLG-architectures.png\" alt=\"NLG architectures\" width=\"381\" height=\"344\" srcset=\"https://swizec.com/blog/wp-content/uploads/2012/05/NLG-architectures.png 381w, https://swizec.com/blog/wp-content/uploads/2012/05/NLG-architectures-300x270.png 300w\" sizes=\"(max-width: 381px) 100vw, 381px\" /></a>\n<p>The <strong>revision approach</strong> combats problems by iteratively fixing each stage in hopes of finding something better, <strong>feedback</strong> simply feeds findings from later stages back into earlier stages, which can open up options that would otherwise be pruned away, <strong>blackboard</strong> is particularly interesting because it uses a common space where results from different stages are posted so every stage has access to what&#8217;s already out there.</p>\n<p>But without a clear communicative goal or end user in mind, the <strong>integrated</strong> approach looks most promising.</p>\n<h2>NLG as a search problem</h2>\n<p>One way to approach natural language generation in an integrated manner is by posing it as a search problem &#8211; you have a search space of possible solutions, your job is merely to find the best.</p>\n<div class=\"mceTemp\">\n<dl id=\"\" class=\"wp-caption alignright\" style=\"width: 361px;\">\n<dt class=\"wp-caption-dt\"><img class=\"  \" title=\"A search space\" src=\"http://graphvisualizer.org/images/examples/nc_gilbert.png\" alt=\"A search space\" width=\"351\" height=\"221\" /><p class=\"wp-caption-text\">A search space</p></div>\n<p>This can be done in many ways:</p>\n<ul>\n<li><strong>hillclimbing</strong> &#8211; take a random spot on the map. With each step, consider all possible moves and move in the best direction. Hope you don&#8217;t get trapped in a local maximum</li>\n<li><strong>systemic search</strong>&#8211; go through all possible solutions and find the best one. Problem with this approach is that it can take a while to finish, but you always get the most optimal solutionFour main ways exist to implement this: chart generation (use charts to define the search space and go from there), <a class=\"zem_slink\" title=\"Reason maintenance\" href=\"http://en.wikipedia.org/wiki/Reason_maintenance\" rel=\"wikipedia\" target=\"_blank\">truth maintenance systems</a> (have assumptions, make sure they stay true), &#8220;redefining the search problem&#8221; (a lot of invalid choices can be pruned out based on linguistic knowledge, which helps with the explosive search space size), constraint logic programming (everyone who&#8217;s done a prolog course has seen this I think)</li>\n<li><strong>stochastic search</strong> &#8211; this is my favorite approach since it involves a bunch of interesting algorithms. The basic idea is that you can define a set of constraints and then &#8220;guess&#8221; solutions based on those constraints. But since each constraint is probabilistic, you have a lot of flexibility in coming up with solutions.</li>\n</ul>\n<h2>Overgeneration and ranking</h2>\n<p>This approach is based on the model of an <em>author</em> and a <em>reviewer</em>. The author continuously outputs a bunch of plausible solutions that the reviewer then ranks on viability and finally picks one to present to the user.</p>\n<a href=\"http://swizec.com/blog/wp-content/uploads/2012/05/author-reviewer-model.png\"><img class=\"alignnone size-full wp-image-4541\" title=\"Author-reviewer model\" src=\"http://swizec.com/blog/wp-content/uploads/2012/05/author-reviewer-model.png\" alt=\"Author-reviewer model\" width=\"721\" height=\"377\" srcset=\"https://swizec.com/blog/wp-content/uploads/2012/05/author-reviewer-model.png 721w, https://swizec.com/blog/wp-content/uploads/2012/05/author-reviewer-model-300x156.png 300w\" sizes=\"(max-width: 721px) 100vw, 721px\" /></a>\n<p>The beauty of this approach lies in the fact that each part of the system only has to concern itself with what it does best, while they still collaborate so you aren&#8217;t trapped in a pipeline architecture.</p>\n<h2>Opportunistic planning</h2>\n<p>Opportunistic planning is an approach that works best when you don&#8217;t have a clearly defined communicative goal &#8211; so how do you know when you&#8217;ve found the solution?</p>\n<div style=\"width: 310px\" class=\"wp-caption alignright\"><img title=\"A jewelry\" src=\"http://3.bp.blogspot.com/-sxeHKJFWoSY/TahM2cBBSoI/AAAAAAAAA9U/velz_DWTJdg/s1600/antique-jewelry-antique-jewellery.jpg\" alt=\"A jewelry\" width=\"300\" height=\"300\" /><p class=\"wp-caption-text\">A jewelry</p></div>\n<p>This approach was developed for a system that produced description labels for items in a museum. From what I understand users could virtually click around a collection of jewelry, giving the NLG system a simple goal of <em>tell me something interesting about this.</em></p>\n<p>Without any clear goals and users, even without much advance knowledge of what the system will be talking about, the only viable approach is generating text based on opportunity, like a human guide would.</p>\n<p>The crowning moment is when it can connect subsequent items into  something like <em>&#8220;&#8230;and it was work like this which directly inspired work like the Roger Morris brooch on the stand which we looked at earlier”</em></p>\n<h2>Poetry?</h2>\n<p>Poetry suffers from a lot of the problems other NLG systems have already had to tackle &#8211; a unity of content and form, lack of clearly defined goals etc.</p>\n<p>Therefore the best approach we can take is some combination of opportunistic planning, which gives us the ability to have lightbulb moments while writing poetry, and stochastic search, which gives us the needed flexibility in the face of many constraints without any goals.</p>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles</h6>\n<ul class=\"zemanta-article-ul\">\n<li class=\"zemanta-article-ul-li\"><a href=\"http://swizec.com/blog/science-wednesday-defining-poetry/swizec/4079\" target=\"_blank\">Science Wednesday: Defining poetry</a> (swizec.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://swizec.com/blog/making-our-irc-bot-talk/swizec/4243\" target=\"_blank\">Making our irc bot talk</a> (swizec.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://lingpipe-blog.com/2012/03/31/natural-language-generation-for-spam/\" target=\"_blank\">Natural Language Generation for Spam</a> (lingpipe-blog.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://swizec.com/blog/science-wednesday-towards-a-computational-model-of-poetry-generation/swizec/3855\" target=\"_blank\">Science Wednesday: Towards a computational model of poetry generation</a> (swizec.com)</li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/?px\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=d650edd8-aed4-4c7a-b260-90132b553987\" alt=\"Enhanced by Zemanta\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"dd71692f-75b2-5ba4-9658-8e44d58c2718"}}