{"data":{"wordpressPost":{"title":"Hard work is a total waste of time","content":"<div class=\"zemanta-img\" style=\"margin: 1em; display: block;\">\n<div>\n<dl class=\"wp-caption alignright\" style=\"width: 310px;\">\n<dt class=\"wp-caption-dt\"><a href=\"http://commons.wikipedia.org/wiki/File:SteacieLibrary.jpg\"><img title=\"Steacie Science and Engineering Library at Yor...\" src=\"http://swizec.com/blog/wp-content/uploads/2010/09/300px-SteacieLibrary.jpg\" alt=\"Steacie Science and Engineering Library at Yor...\" width=\"300\" height=\"225\" /></a></dt>\n<dd class=\"wp-caption-dd zemanta-img-attribution\" style=\"font-size: 0.8em;\">Image via <a href=\"http://commons.wikipedia.org/wiki/File:SteacieLibrary.jpg\">Wikipedia</a></dd>\n</dl>\n</div>\n</div>\n<p>Sometimes a series of great decisions can lead to a place where the best decision is a horrendously bad decision.</p>\n<p>And you just don&#8217;t realise. Boole algebra taught us early in school that a chain of good implications means the next implication will be pretty good too. Then again, not really. It might be bette to take a step back, look at the bigger bigger picture and make a totally new decision.</p>\n<p>Very recently, hell, yesterday, this happened to me. Something nudged me from CEO mode into developer mode. To fully analyze this we have to go back to the beginning of this summer when we embarked on The Mission with <a href=\"http://preona.net/\" target=\"_blank\">Preona</a> and finally started building <a href=\"http://lazyreadr.com/\">LazyReadr </a>after months of promises and figuring out if anyone&#8217;s interested.</p>\n<h3>What happen?</h3>\n<p>One of the first decisions we made was to run everything on Google&#8217;s <a class=\"zem_slink freebase/en/google_app_engine\" title=\"Google App Engine\" rel=\"homepage\" href=\"http://code.google.com/appengine/\">App Engine</a>. Mostly because we saw what a pain it was keeping a <a class=\"zem_slink freebase/en/web_service\" title=\"Web service\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Web_service\">web service</a> running realiably and we are expecting there to be quite a heavy load when we have to parse a lot of articles and stuff.</p>\n<p>Then somewhere in the middle of August it was time to start performing proper article <a class=\"zem_slink freebase/en/web_scraping\" title=\"Web scraping\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Web_scraping\">scraping</a> &#8211; taking a link and returning the main text without all the ads and navigation and other crap. After a few attempts with different services ranging from AlchemyAPI to a few different homebrew solutions we decided on Boilerpipe.</p>\n<p>Boilerpipe is a Java library that does one thing and does it well &#8211; it extracts text from links. Great, java, so it runs on AppEngine and does what we need.</p>\n<p>Fast forward two weeks and we realise that maybe this Boilerpipe thing isn&#8217;t that great after all. Everything it does is return text. But we need to know when an article has 5 pictures in it, or subtitles, links &#8230; stuff like that.</p>\n<div class=\"zemanta-img zemanta-action-dragged\" style=\"margin: 1em; display: block;\">\n<div>\n<dl class=\"wp-caption alignright\" style=\"width: 310px;\">\n<dt class=\"wp-caption-dt\"><a href=\"http://commons.wikipedia.org/wiki/File:NodeJS.png\"><img title=\"The logo of the Node.js Project from the offic...\" src=\"http://swizec.com/blog/wp-content/uploads/2010/09/300px-NodeJS.png\" alt=\"The logo of the Node.js Project from the offic...\" width=\"300\" height=\"79\" /></a></dt>\n<dd class=\"wp-caption-dd zemanta-img-attribution\" style=\"font-size: 0.8em;\">Image via <a href=\"http://commons.wikipedia.org/wiki/File:NodeJS.png\">Wikipedia</a></dd>\n</dl>\n</div>\n</div>\n<p>Since Boilerpipe can&#8217;t do that and none of our homebrew solutions are good enough at finding content the only place left for us to go was Readability, an <a class=\"zem_slink\" title=\"Arc90\" rel=\"homepage\" href=\"http://www.arc90.com/\">Arc90</a> &#8220;experiment&#8221;, which just happens to be the best content extraction bookmarklet I have ever seen.</p>\n<p>There&#8217;s a catch though. It runs on javascript and rewriting all the code into python or java so we can run it server-side just isn&#8217;t an option. Especially not when it&#8217;s apparently under active development and we&#8217;d have to go to great lengths to keep up.</p>\n<p>Welcome <a class=\"zem_slink freebase/guid/9202a8c04000641f80000000001ec74c\" title=\"Rhino (JavaScript engine)\" rel=\"homepage\" href=\"http://www.mozilla.org/rhino/\">Rhino</a>. A javasript engine that runs on Java.</p>\n<p>Welcome Env.js. A fake browser implemented in <a class=\"zem_slink freebase/en/javascript\" title=\"JavaScript\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/JavaScript\">JavaScript</a>.</p>\n<p>Combine the two and voila, we can load up a <a class=\"zem_slink freebase/en/website\" title=\"Website\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Website\">website</a> into a fake browser running within a fake javascript environment and run readability just like it was in a browser! yay!</p>\n<p>Well &#8230; no. Stuff didn&#8217;t work. Env.js was too big for Java. There were bugs. Problems. Lots of stuff. I toiled heavily for three weeks or so until I finally got it working. But by god I got it working!</p>\n<p>Sure it took me understanding stuff about Env.js internals I never cared about. But I got it working!</p>\n<p>Exhausted, I deployed the final code onto App Engine.</p>\n<p>it died</p>\n<p>The whole website in browser in javascript in java was just too slow. App Engine&#8217;s 30s restriction was too much and everything just plain old died.</p>\n<p>Dead end.</p>\n<p>Effort wasted.</p>\n<p>But then I started getting an idea. What about <a class=\"zem_slink freebase/en/node_js\" title=\"Node.js\" rel=\"homepage\" href=\"http://nodejs.org/\">node.js</a>? That&#8217;s javascript. On the server. And it&#8217;s fast! Surely I can run env.js in there and get everything working right?</p>\n<p>Not exactly, but there is a project called <a href=\"http://github.com/tmpvar/jsdom\" target=\"_blank\">jsdom</a>.</p>\n<p>Three hours later. Working web scraper. Except now it scrapes huge complex websites in a few seconds!</p>\n<p>Hoorah! Then a day of patching up jsdom since it&#8217;s a youngish project and everything doesn&#8217;t work yet and we have a very sturdy scraper. Whoaw!</p>\n<h3>The lesson learned</h3>\n<p>expecting high load -&gt; AppEngine -&gt; Java -&gt; Rhino -&gt; Env.js -&gt; not-working-project-and-several-weeks-wasted</p>\n<p>alternative:</p>\n<p>node.js -&gt; jsdom -&gt; stuff-works-in-a-day-of-work</p>\n<p>So I guess what I&#8217;m trying to say besides the fact I&#8217;m sooper happy I got stuff working, is that I learned my lesson and that I shouldn&#8217;t base my decisions solely on the previous decisions I&#8217;ve made. Even if all of them were good decisions by themselves.</p>\n<p>PS: I&#8217;m contemplating whether we should make this service public and am leaning heavily on the Yes option. What do you guys think? Need an efficient and good web scraping API?</p>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles by Zemanta</h6>\n<ul class=\"zemanta-article-ul\">\n<li class=\"zemanta-article-ul-li\"><a href=\"http://blog.nodejitsu.com/jsdom-jquery-in-5-lines-on-nodejs\">Using jQuery and node.js to scrape html pages in 5 lines</a> (nodejitsu.com)</li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=4671db4b-1c09-4cc2-9c53-825c17a80c65\" alt=\"Enhanced by Zemanta\" /></a><span class=\"zem-script more-related more-info pretty-attribution\"><script src=\"http://static.zemanta.com/readside/loader.js\" type=\"text/javascript\"></script></span></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"2b6905ef-00e9-5919-af39-e64f496fb679"}}