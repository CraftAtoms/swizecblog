{"data":{"wordpressPost":{"title":"Processing as-you-read in clojure","content":"<div class=\"zemanta-img\" style=\"margin: 1em; display: block;\">\n<div>\n<dl class=\"wp-caption alignright\" style=\"width: 310px;\">\n<dt class=\"wp-caption-dt\"><a href=\"http://commons.wikipedia.org/wiki/Image:SixHardDriveFormFactors.jpg\"><img title=\"Six hard disk drives with cases opened showing...\" src=\"http://swizec.com/blog/wp-content/uploads/2010/04/300px-SixHardDriveFormFactors.jpg\" alt=\"Six hard disk drives with cases opened showing...\" width=\"300\" height=\"225\" /></a></dt>\n<dd class=\"wp-caption-dd zemanta-img-attribution\" style=\"font-size: 0.8em;\">Image via <a href=\"http://commons.wikipedia.org/wiki/Image:SixHardDriveFormFactors.jpg\">Wikipedia</a></dd>\n</dl>\n</div>\n</div>\n<p>Sometimes we&#8217;re given a stupid <a class=\"zem_slink freebase/en/algorithm\" title=\"Algorithm\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Algorithm\">algorithm</a> or two to implement at this or that course at uni. This time &#8217;round they wanted us to implement something called external <a class=\"zem_slink freebase/en/matrix\" title=\"Matrix (mathematics)\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Matrix_%28mathematics%29\">matrix</a> transposition &#8230; the idea is that you have to <a class=\"zem_slink freebase/en/transpose\" title=\"Transpose\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Transpose\">transpose</a> a matrix live from the <a class=\"zem_slink freebase/en/hard_disk\" title=\"Hard disk drive\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Hard_disk_drive\">hard drive</a> because it is potentially so bloody huge you can&#8217;t store a single row in memory.</p>\n<p>Which is a bit silly, who&#8217;s got 60+ gig huge matrixes these days? You&#8217;re doing it wrong if you need that many dimensions! VERY wrong!</p>\n<p>But anyway, what really struck me as a bit silly is that they were big nazis when it comes to how we&#8217;re supposed to do this. Needs to compile with their specific command, can only be done in <a class=\"zem_slink freebase/guid/9202a8c04000641f800000000f8545aa\" title=\"Java (programming language)\" rel=\"homepage\" href=\"http://java.sun.com\">Java</a> or C/C++ &#8230; yeah fuck you and fuck your grade, let&#8217;s <em>learn</em> something.</p>\n<p>So I went and did it in <a class=\"zem_slink freebase/en/clojure\" title=\"Clojure\" rel=\"homepage\" href=\"http://clojure.org\">Clojure</a> &#8230; well not really since I didn&#8217;t finish, but I came close.</p>\n<p>Surprisingly, it is in fact very <em>very</em> hard to process data live as it&#8217;s being read in a functional environment. Every library that&#8217;s already out there open-read-closes the file, at best you get something that can read lines and allows you to work on every line as it&#8217;s being read, but oh no, not characters. Nope, what sort of bloody idiot would want <em>that</em>?</p>\n<p>Well &#8230; me.</p>\n<p>So here is my implementation, probably not the most elegant thing out there since I&#8217;m new to this, of what Java people call &#8220;nextInt&#8221;. It returns the next integer in a file as a proper integer and so on.</p>\n<pre lang=\"clojure\">(ns io (:require [clojure.contrib.io :as io]))\r\n\r\n(defn read-char [rdr]\r\n   (char (.read rdr)))\r\n\r\n(defn delimiter? [c]\r\n  (if (or (&lt; (int c) (int '\\0)) (&gt; (int c) (int '\\9)) (= c nil)) true false))\r\n\r\n(defn digit [c place]\r\n  (* (- (int c) 48) (Math/pow 10 (- place 1))))\r\n\r\n(defn numify [seq acc]\r\n  (if (= seq nil)\r\n    (int acc)\r\n    (numify (next seq)\r\n\t    (+ acc (digit (first seq) (count seq))))))\r\n\r\n(defn read-number [rdr acc]\r\n  (let [c (read-char rdr)]\r\n    (if (delimiter? c)\r\n      (numify acc 0)\r\n      (read-number rdr (concat acc [c])))))</pre>\n<p>You call it with an open reader and an empty [] thingy because, the latter because I couldn&#8217;t figure out optional <a class=\"zem_slink freebase/guid/9202a8c04000641f800000000f117fa8\" title=\"Function (mathematics)\" rel=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Function_%28mathematics%29\">function</a> arguments.</p>\n<p>And if anyone&#8217;s interested, here&#8217;s the rest of the code that opens a file where the first number denotes the number of columns in the matrix and then contains the rest of it delimited with spaces or tabs or anything non-numerical, and copies every row into a separate file so a transposition can then be done (didn&#8217;t quite get to this part)</p>\n<pre lang=\"clojure\">(defn copy-number [rdr writer]\r\n  (.write writer (str (read-number rdr []) \" \")))\r\n\r\n(defn copy-row [rdr writer i]\r\n  (copy-number rdr writer)\r\n  (if (&gt; i 1) (copy-row rdr writer (dec i))))\r\n\r\n(defn break-row [rdr i columns]\r\n  (try\r\n   (with-open [writer (io/writer (str \"podatki-0-\" i))]\r\n     (copy-row rdr writer columns))\r\n   (break-row rdr (inc i) columns)\r\n  (catch Exception e\r\n    nil)))\r\n\r\n(defn transpose-matrix [file-name]\r\n  (with-open [rdr (io/reader file-name)]\r\n    (let [columns (read-number rdr [])]\r\n      (break-row rdr 0 columns))))\r\n\r\n(transpose-matrix \"/home/swizec/Documents/APS2/input.txt\")</pre>\n<p>PS: that try/catch in there is fugly, but I didn&#8217;t know how else to check for EOF *blush*</p>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Reblog this post [with Zemanta]\" href=\"http://reblog.zemanta.com/zemified/40a33885-b638-42dc-8b23-c0933a1af6bb/\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/reblog_e.png?x-id=40a33885-b638-42dc-8b23-c0933a1af6bb\" alt=\"Reblog this post [with Zemanta]\" /></a><span class=\"zem-script more-related more-info pretty-attribution\"><script src=\"http://static.zemanta.com/readside/loader.js\" type=\"text/javascript\"></script></span></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"679abb40-3ad9-515d-bd89-39dfff24722d"}}