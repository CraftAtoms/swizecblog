{"data":{"wordpressPost":{"title":"Single page web apps: the worst of both worlds","content":"<img class=\"alignnone\" title=\"Server memory span, xkcd\" src=\"http://imgs.xkcd.com/comics/server_attention_span.png\" alt=\"Server memory span, xkcd\" width=\"666\" height=\"179\" />\n<p>Single <a class=\"zem_slink\" title=\"Web page\" href=\"http://en.wikipedia.org/wiki/Web_page\" rel=\"wikipedia\" target=\"_blank\">page</a> <a class=\"zem_slink\" title=\"Web application\" href=\"http://en.wikipedia.org/wiki/Web_application\" rel=\"wikipedia\" target=\"_blank\">web apps</a> are the promised land of modern javascript MVC frameworks like Backbone or Ember.</p>\n<p>Deliver a dynamic experience right to the browser, they said, use the <a class=\"zem_slink\" title=\"Server (computing)\" href=\"http://en.wikipedia.org/wiki/Server_%28computing%29\" rel=\"wikipedia\" target=\"_blank\">server</a> like a smart database, they said. Your site will be quicker and your users will love it, they said. Page loads in the blink of a second, static content via <a class=\"zem_slink\" title=\"Content delivery network\" href=\"http://en.wikipedia.org/wiki/Content_delivery_network\" rel=\"wikipedia\" target=\"_blank\">CDN</a>, no more flickery full page reloads &#8230; they said.</p>\n<p>All of those promises are true.</p>\n<p>Servers should handle data. They&#8217;re very good at that and having a central authority to handle <a class=\"zem_slink\" title=\"Data consistency\" href=\"http://en.wikipedia.org/wiki/Data_consistency\" rel=\"wikipedia\" target=\"_blank\">data consistency</a> amongst clients is perhaps the simplest distributed system architecture one can think of. Sure, it gets a bit complicate when <em>&#8220;A server&#8221;</em> becomes a few tens of boxes spread out in data centers across the globe, but that&#8217;s still not the client&#8217;s problem.</p>\n<p>Conversely, clients are <em>exceptionally</em> good at presenting data! It&#8217;s practically all they do. They give some data to the user, then they sit quietly in the user&#8217;s face <del>waiting</del>screaming to be poked so they can send some changes back to the server.</p>\n<p>This separation makes sense.</p>\n<p>Makes organising teams easier, separating talent becomes a walk in the park, it&#8217;s even friendlier for the user who doesn&#8217;t have to wait for a signal to travel halfway around the world just to open a menu!</p>\n<p>Win-win-win!</p>\n<h2>Not really.</h2>\n<div style=\"width: 310px\" class=\"wp-caption alignright\"><img title=\"Trello - perhaps the best web app I've seen\" src=\"http://farm9.staticflickr.com/8438/7997838999_ab00c71330.jpg\" alt=\"Trello - perhaps the best web app I've seen\" width=\"300\" height=\"200\" /><p class=\"wp-caption-text\">Trello &#8211; perhaps the best web app I&#8217;ve seen</p></div>\n<p>Good single page web apps are a bitch to develop. A bitch with a few screws loose, to put it mildly.</p>\n<p>In traditional web development the one thing you can count on is everything being stateless. A request comes in containing everything you need to know, <em>maybe</em> you have to fetch a few things from a database. Once you&#8217;ve answered the request, that&#8217;s it, you don&#8217;t care about the client until a new request comes in.</p>\n<p>This is easy. Easy to reason about, easy to make robust, easy to test and easy to avoid strange errors. You&#8217;re basically ensuring a clean slate <em>every time</em>.</p>\n<p>In traditional app development, you know for a fact everything is <a class=\"zem_slink\" title=\"State (computer science)\" href=\"http://en.wikipedia.org/wiki/State_%28computer_science%29\" rel=\"wikipedia\" target=\"_blank\">stateful</a>. You keep things in memory and you <em>know</em> that&#8217;s where they will remain until the app is closed and reopened. Nothing will randomly go missing and nobody seriously expects you to maintain state across sessions.</p>\n<p>Yeah yeah, sometimes gunk can accumulate when an app is left running too long. A restart either of the machine or the app usually solves the problem and even though many apps and even OS&#8217;s have started experimenting with cross-session state it still isn&#8217;t expected.</p>\n<p>A lot of people don&#8217;t even want to <em>restore tabs</em>!</p>\n<p>This clear divide between websites and apps helps in a lot of ways. Mostly it separates developers into those who don&#8217;t have a problem re-imagining their universe around every request from those who prefer dealing with accumulating memory gunk.</p>\n<p>And then come modern web apps. Sitting confusingly on the fence between both worlds.</p>\n<p>Very simple in theory &#8211; the server is stateless and the frontend is stateful.</p>\n<p>But think about it. The frontend is stateful in the sense that very complex things can happen when the user clicks around. Data changes in memory and we expect the data to stay there, javascript being asynchronous aaaaalmost creates all the same problems traditional developers deal with in regards to multi-threaded code and it&#8217;s very easy to accumulate all that gunk and start producing some <em>very</em> strange errors.</p>\n<p>Then your user clicks refresh.</p>\n<p>Sometimes right after losing wi-fi signal in the middle of sending a request to the server &#8230; or they closed the browser. Maybe it&#8217;s not even the same user because they shared a link!</p>\n<p>Bang! Your app stateful just lost state.</p>\n<p>After a refresh the user expects to see exactly the same things they saw before. That&#8217;s how the web works, right? You click around and you send a link to somebody and <em>it&#8217;s the same thing</em>. You don&#8217;t expect to sometimes get the homepage and sometimes a blog post when going to <em>/blog/some-title-of-a-post</em></p>\n<p>As developers we&#8217;ve found ourselves in a situation where we must assume our app is both stateless <strong>and </strong>stateful. Every <a class=\"zem_slink\" title=\"Uniform Resource Locator\" href=\"http://en.wikipedia.org/wiki/Uniform_Resource_Locator\" rel=\"wikipedia\" target=\"_blank\">URL</a> still points to a unique page, but if you got there after a reload, all the models must be refetched from server &#8211; preferably the server would bootstrap them into place &#8211; all open sockets must be re-established and a bunch of other minor things have to be taken care of.</p>\n<p>All in all, you get at least double of the complexity and for what? A shinier and smoother experience for the user &#8230; which is exactly what we want.</p>\n<p>I would love to propose a good solution for this problem. But I can&#8217;t. I am left sitting here, wondering, <em>hoping</em> for a humane solution to this conundrum. My Google searches are coming up short.</p>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles</h6>\n<ul class=\"zemanta-article-ul zemanta-article-ul-image\" style=\"margin: 0; padding: 0; overflow: hidden;\">\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://stackoverflow.com/questions/13323384/web-app-development-questions\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/noimg_114_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://stackoverflow.com/questions/13323384/web-app-development-questions\" target=\"_blank\">Web app development questions</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://www.i-programmer.info/professional-programmer/i-programmer/4982-the-disasterous-fragmentation-of-web-apps.html\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/noimg_128_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://www.i-programmer.info/professional-programmer/i-programmer/4982-the-disasterous-fragmentation-of-web-apps.html\" target=\"_blank\">The Disastrous Fragmentation Of Web Apps</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://blog.dynatrace.com/2012/09/26/why-page-size-matters-even-more-for-mobile-web-apps/\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/noimg_74_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://blog.dynatrace.com/2012/09/26/why-page-size-matters-even-more-for-mobile-web-apps/\" target=\"_blank\">Why Page Size Matters even more for Mobile Web Apps</a></li>\n<li class=\"zemanta-article-ul-li-image zemanta-article-ul-li\" style=\"padding: 0; background: none; list-style: none; display: block; float: left; vertical-align: top; text-align: left; width: 84px; font-size: 11px; margin: 2px 10px 10px 2px;\"><a style=\"box-shadow: 0px 0px 4px #999; padding: 2px; display: block; border-radius: 2px; text-decoration: none;\" href=\"http://betakit.com/2012/10/31/mention-launches-social-media-and-web-monitoring-app-to-take-on-google-alerts\" target=\"_blank\"><img style=\"padding: 0; margin: 0; border: 0; display: block; width: 80px; max-width: 100%;\" src=\"http://i.zemanta.com/122561695_80_80.jpg\" alt=\"\" /></a><a style=\"display: block; overflow: hidden; text-decoration: none; line-height: 12pt; height: 80px; padding: 5px 2px 0 2px;\" href=\"http://betakit.com/2012/10/31/mention-launches-social-media-and-web-monitoring-app-to-take-on-google-alerts\" target=\"_blank\">Mention Launches Social Media and Web Monitoring App to Take On Google Alerts</a></li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/?px\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=e0b4d69c-e979-45b9-a912-6cbeb3833898\" alt=\"Enhanced by Zemanta\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"02ff2bbd-e876-5877-b260-e46ce84bb2b5"}}