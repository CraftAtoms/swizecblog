{"data":{"wordpressPost":{"title":"Deca &#8211; a cool systems programming language","content":"<div style=\"width: 202px\" class=\"wp-caption alignright\"><a href=\"http://www.flickr.com/photos/28486074@N08/4972036859\"><img class=\"zemanta-img-inserted zemanta-img-configured\" title=\"DeCA partners with military to help promote su...\" src=\"http://swizec.com/blog/wp-content/uploads/2012/01/4972036859_feeca3b936_m8.jpg\" alt=\"DeCA partners with military to help promote su...\" width=\"192\" height=\"240\" /></a><p class=\"wp-caption-text\">Image by Morning Calm News via Flickr</p></div>\n<p>This post is a summary of  Eli Gottlieb&#8217;s thesis on the <a href=\"http://decac.googlecode.com/files/Deca%20Thesis.pdf\">Deca programming language</a> from May 2011. In short <em>Deca is a language designed to provide the advanced features of sophisticated, <a class=\"zem_slink\" title=\"High-level programming language\" href=\"http://en.wikipedia.org/wiki/High-level_programming_language\" rel=\"wikipedia\">high-level programming languages</a>while still programming as close as possible to the bare metal. It brings in the functional, object-oriented and generic programming paradigms without requiring a garbage collector or a threading system.</em></p>\n<blockquote><p>Since it is a programming-language thesis, it is also dedicated to every programmer who ever wanted a better language but could not use a virtual machine or a run-time library. To them I dedicate this thesis and say: <em>I am become type theory, destroyer of minds.</em></p></blockquote>\n<h2>Problems of systems programming</h2>\n<p>I once contemplated doing some Linux kernel hacking, but decided to lie down until the feeling passes. That is my closest brush with systems programming and after reading this thesis &#8211; yikes.</p>\n<p>Essentially the problems are what you&#8217;d expect when dealing with hardware-imposed limitations, lacking useful abstractions and safety features &#8211; in fact, you&#8217;re usually the one creating these.</p>\n<ol>\n<li><strong>precise data representation</strong> &#8211; working so close to bare metal means datatypes must correspond directly to their hardware representations. You can&#8217;t just have a magical List datatype<em>,</em> you <em>can</em> have a block of memory though</li>\n<li><strong>safety properties and confined unsafety </strong>&#8211; the most common form of safety is <em>\n<div style=\"width: 310px\" class=\"wp-caption alignleft\"><a href=\"http://commons.wikipedia.org/wiki/File:Kernel-panic.jpg\"><img class=\"zemanta-img-inserted zemanta-img-configured\" title=\"English: Kernel panic Magyar: &quot;Kernel pan...\" src=\"http://swizec.com/blog/wp-content/uploads/2012/01/300px-Kernel-panic6.jpg\" alt=\"English: Kernel panic Magyar: &quot;Kernel pan...\" width=\"300\" height=\"200\" /></a><p class=\"wp-caption-text\">Panic</p></div>\n<p><a class=\"zem_slink\" title=\"Type safety\" href=\"http://en.wikipedia.org/wiki/Type_safety\" rel=\"wikipedia\">type safety</a>, </em>the idea being that the compiler makes sure you aren&#8217;t trying to multiply a sack of potates with a banana. But other safety features a good language should provide according to Gottlieb are <em><a href=\"http://en.wikipedia.org/wiki/Escape_analysis\" target=\"_blank\">escape analysis</a></em> for pointers, <em><a class=\"zem_slink\" title=\"Region-based memory management\" href=\"http://en.wikipedia.org/wiki/Region-based_memory_management\" rel=\"wikipedia\">region-based memory management</a></em> and<em> <a href=\"http://en.wikipedia.org/wiki/Type_safety#Definitions\" target=\"_blank\">preservation and progress</a></em> (well-typedness)</li>\n<li><strong>abstraction, encapsulation, modularity </strong>&#8211; most modern languages provide ways of packaging code so it can be reused and encapsulated. For instance: when you are using a stack structure, you don&#8217;t really care whether it&#8217;s implemented as a list or a memory vector.</li>\n<li><strong>extensibility </strong>&#8211; a way to extend the language itself with new features (for example, making the + operator work with new data types). So far possible solutions for this exist as <a class=\"zem_slink\" title=\"Object-oriented programming\" href=\"http://en.wikipedia.org/wiki/Object-oriented_programming\" rel=\"wikipedia\">OOP</a>, ad-hoc polymorphism, macros and so on, but it remains an open question and the perfect solution might not even exist</li>\n<li><strong>Stroustroup&#8217;s rule </strong>&#8211; the lead designer of C++ <a class=\"zem_slink\" title=\"Bjarne Stroustrup\" href=\"http://www.research.att.com/~bs/homepage.html\" rel=\"homepage\">Bjarne Stroustrup</a> once presented a rule that <em>What you don&#8217;t use, you don&#8217;t pay for.</em> But in many high-level languages automatic memory management runs whether you need it or not, or every function needs exception handling &#8230; all big problems in the limited confines of bare metal programming.</li>\n</ol>\n<h2>Deca&#8217;s solutions</h2>\n<div style=\"width: 310px\" class=\"wp-caption alignright\"><a href=\"http://commons.wikipedia.org/wiki/File:Safety.JPG\"><img class=\"zemanta-img-inserted zemanta-img-configured\" title=\"English: Safety\" src=\"http://swizec.com/blog/wp-content/uploads/2012/01/300px-Safety6.jpg\" alt=\"English: Safety\" width=\"300\" height=\"450\" /></a><p class=\"wp-caption-text\">Image via Wikipedia</p></div>\n<ol>\n<li><strong>unboxed data types </strong>&#8211; for those of us who didn&#8217;t know, <a href=\"http://www.haskell.org/ghc/docs/latest/html/users_guide/primitives.html\" target=\"_blank\">boxed types</a> are represented by a point to an object; in Deca all types are compiled down to raw unboxed representations &#8211; just a value &#8211; so when the code is running there&#8217;s no more overhead. There are also two kinds of pointers (scoped and referenced) that allow you to use a pointer as if it was a variable, which sounds pretty cool from my experience with explicit pointers.</li>\n<li><strong>type safety </strong>&#8211; admittedly, this section went a bit over my head, but Deca uses a magical combination of static type inference (static typing where the compiler guesses stuff for you) and bit-casting &#8211; this is a system that allows you to eschew type safety under certain conditions because systems programmers apparently need that. If you care for this sort of thing -&gt; Deca uses a modified <a class=\"zem_slink\" title=\"Type inference\" href=\"http://en.wikipedia.org/wiki/Type_inference\" rel=\"wikipedia\">Hindley-Milner</a> inference algorithm that also allows subtyping</li>\n<li><strong>module system </strong>&#8211; just as you&#8217;d expect of any modern language, you can package things into modules and modules into modules</li>\n<li><strong>encapsulated <a class=\"zem_slink\" title=\"Type system\" href=\"http://en.wikipedia.org/wiki/Type_system\" rel=\"wikipedia\">existential types</a> </strong>&#8211; these are best known as the type-theoretic encoding of abstract data types &#8211; giving us the ability to use data structures without knowing all the internal logic. In Deca these exist as a language extension and the whole thing works out just like it did for Caml</li>\n<li><strong>extensible types </strong>&#8211; Deca provides two ways of extending data types. The internal way of &#8220;open-sum variant types&#8221;, which I don&#8217;t understand and the thesis isn&#8217;t very specific as to what thi means. The other are good old friendly classes, which we all understand and love from object-oriented languages</li>\n<li><strong>symmetric multiple dispatch </strong>&#8211; dynamic dispatch is a way to dynamically decide which method to call in order to process a particular message (polymorphism, pattern matching etc.) Deca does this by having a partially ordered list of possible methods, walking through it and when it finds something that can execute the given arguments, it is the most specific binding.</li>\n<li><strong>low-level encodings of high-level features </strong>&#8211; this section of the thesis is a bit longer, but it essentially boils down to the idea of using the <a href=\"http://en.wikipedia.org/wiki/LLVM\" target=\"_blank\">LLVM</a> to run compiled code and making sure all the features explained above are compiled to their most basic incarnations. According to another section of the thesis this also ensures adherence to Stroustrup&#8217;s rule</li>\n</ol>\n<h2>An example</h2>\n<p>I would love to personally produce an example of what Deca looks like, but I&#8217;m already having enough <a title=\"Learning me a Haskell\" href=\"http://swizec.com/blog/learning-me-a-haskell/swizec/3272\">fun learning Haskell</a>, so here&#8217;s an official example of a List implementation.</p>\n<pre lang=\"deca\">\r\n\r\nmodule list\r\n\r\nimport malloc\r\n\r\ntype List<a> = class(e,n) extends Sequence<a> {\r\n  element: a:= e;\r\n  next: @List:= n;\r\n}\r\n\r\nfunction cons(element,next) {\r\n  malloc.malloc(pool => new(pool)(List(element,next)))\r\n}\r\n\r\nfunction car(lst: @List) {\r\n  match *lst {\r\n    case Cons(head,tail) => Some(head)\r\n    case Nil => None\r\n  }\r\n}\r\n\r\nfunction cdr(lst: @List) {\r\n  match *lst {\r\n    case Cons(head,tail) => tail\r\n    case Nil => Nil\r\n  }\r\n}\r\n\r\nend\r\n\r\n</pre>\n<h2>Conclusion</h2>\n<p>The thesis itself also compares Deca to other modern high-level languages for systems programming like <a href=\"http://lambda-the-ultimate.org/node/4023\" target=\"_blank\">Clay</a>, <a class=\"zem_slink\" title=\"BitC\" href=\"http://www.bitc-lang.org/\" rel=\"homepage\">BitC</a>, <a href=\"http://en.wikipedia.org/wiki/Cyclone_programming_language\" target=\"_blank\">Cyclone</a> and Java &#8220;with magic&#8221;. That section didn&#8217;t feel too important, the resolution is simply that Deca is <em>better</em>.</p>\n<p>Unfortunately though, Deca itself doesn&#8217;t look to be ready for real-world use just yet. Even though the language itself is pretty much defined and its grammar is known, no complete compiler yet exists. The <a href=\"http://code.google.com/p/decac/\" target=\"_blank\">official compiler, decac,</a> developed by Gottlieb doesn&#8217;t yet support all the features and I&#8217;ve heard rumors it has been scrapped and is being developed anew because some fundamental issues were discovered.</p>\n<p>All in all, this looks like an interesting language to keep an eye on if you&#8217;re a systems programmer, but I feel C will be the king for a long while yet.</p>\n<h6 class=\"zemanta-related-title\" style=\"font-size: 1em;\">Related articles</h6>\n<ul class=\"zemanta-article-ul\">\n<li class=\"zemanta-article-ul-li\"><a href=\"http://americannationnews.wordpress.com/2012/01/02/are-you-a-programming-freek/\">Are you a programming freek?</a> (americannationnews.wordpress.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://wiki.answers.com/Q/What_is_meant_by_high_level_language_in_IT\">What is meant by high level language in IT</a> (wiki.answers.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://stackoverflow.com/questions/8697033/is-it-possible-to-make-a-high-level-compiled-language\">Is it possible to make a high level compiled language?</a> (stackoverflow.com)</li>\n<li class=\"zemanta-article-ul-li\"><a href=\"http://wiki.answers.com/Q/What_are_different_application_areas_of_programming_language\">What are different application areas of programming language</a> (wiki.answers.com)</li>\n</ul>\n<div class=\"zemanta-pixie\" style=\"margin-top: 10px; height: 15px;\"><a class=\"zemanta-pixie-a\" title=\"Enhanced by Zemanta\" href=\"http://www.zemanta.com/\"><img class=\"zemanta-pixie-img\" style=\"border: none; float: right;\" src=\"http://img.zemanta.com/zemified_e.png?x-id=da758ab3-ef49-445c-82e5-d0740a42b9a2\" alt=\"Enhanced by Zemanta\" /></a></div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"269a5c20-73bf-572c-a20d-82640759deb9"}}