{"data":{"wordpressPost":{"title":"Counting web sessions with JavaScript","content":"<p>What do you do if your boss comes up to you and asks, <em>&#8220;So how many times must a person come to our app before they give us $500?&#8221;</em></p>\n<p>It&#8217;s an important question. How many touch points does your sales process require? Do you need 2 ad clicks or 5? Two shiny demos or one fat video?</p>\n<p>As an engineer, you might not care, but this is the stuff that keeps your CEO and growth lead and head of product up at night. A business owner that can answer that ðŸ‘† question reliably is god amongst men.</p>\n<p>It&#8217;s an important question, therefore Google Analytics has the answer, right?</p>\n<p>Wrong.</p>\n<p>The best Google Analytics can do is this view:</p>\n<div id=\"attachment_7596\" style=\"width: 1227px\" class=\"wp-caption alignnone\"><img class=\"alignnone size-full wp-image-7596\" src=\"https://swizec.com/blog/wp-content/uploads/2017/05/histogram_screenshot.jpg\" alt=\"GA Count of Sessions view\" width=\"1217\" height=\"539\" srcset=\"https://swizec.com/blog/wp-content/uploads/2017/05/histogram_screenshot.jpg 1217w, https://swizec.com/blog/wp-content/uploads/2017/05/histogram_screenshot-300x133.jpg 300w, https://swizec.com/blog/wp-content/uploads/2017/05/histogram_screenshot-768x340.jpg 768w, https://swizec.com/blog/wp-content/uploads/2017/05/histogram_screenshot-1024x454.jpg 1024w\" sizes=\"(max-width: 1217px) 100vw, 1217px\" /><p class=\"wp-caption-text\">GA Count of Sessions view</p></div>\n<p>This histogram tells you that out of the 24,187 people that visited swizec.com in the last 30 days, 24,187 of them started their first session. 2,103 started their 2nd, all the way down to the 127 people who started their 201st session.</p>\n<p>Those people areâ€¦ odd. My blog is not <em>that</em> interesting ðŸ¤” Even I don&#8217;t visit the site that much.</p>\n<p>Ok, so Google Analytics doesn&#8217;t want to tell us how many sessions a particular user had before they converted. But what&#8217;s a session anyway?</p>\n<p>This is <a href=\"https://support.google.com/analytics/answer/2731565?hl=en\">how a web session is defined in GA</a>. The tl;dr is that a new session starts after every:</p>\n<ul>\n<li>30 minutes of inactivity</li>\n<li>midnight</li>\n<li><code>utm_campaign</code> query change</li>\n</ul>\n<p>We count something as a new session every 30 minutes (even if the site was left open), on every new day, and following every new ad click. I don&#8217;t know why Google defined web sessions this way, but if you&#8217;re building business intelligence, it&#8217;s best to use standard definitions.</p>\n<p><strong>So how do you count those web sessions?</strong></p>\n<p>Well, you need to keep track of the 3 parameters above, and you need to keep track of a counter. Then you up the counter on every change. That gives you the count and you can do whatever you want.</p>\n<p>Save it to the backend via some sort of API perhaps ðŸ˜‰</p>\n<img class=\"alignnone size-full wp-image-7597\" src=\"https://swizec.com/blog/wp-content/uploads/2017/05/localstorage_screenshot.png\" width=\"2434\" height=\"222\" srcset=\"https://swizec.com/blog/wp-content/uploads/2017/05/localstorage_screenshot.png 2434w, https://swizec.com/blog/wp-content/uploads/2017/05/localstorage_screenshot-300x27.png 300w, https://swizec.com/blog/wp-content/uploads/2017/05/localstorage_screenshot-768x70.png 768w, https://swizec.com/blog/wp-content/uploads/2017/05/localstorage_screenshot-1024x93.png 1024w\" sizes=\"(max-width: 2434px) 100vw, 2434px\" />\n<p>Here&#8217;s the solution I came up with. You can use it as <a href=\"https://github.com/Swizec/web-session-counter\">an npm module</a>, or read onwards to learn how it works.</p>\n<h2>WebSessionCounter</h2>\n<p>To make your life easier, I made this <a href=\"https://www.npmjs.com/package/web-session-counter\">web-session-counter npm module</a>. You can see the <a href=\"https://github.com/Swizec/web-session-counter\">full code on Github</a>, too.</p>\n<p>Install the utility with <code>npm install web-session-counter</code>, then use it like this:</p>\n<pre lang=\"javascript\">\nimport WebSessionCounter from 'web-session-counter';\n\n// Do this on user activity\nWebSessionCounter.update();\n\n// To get the total count of sessions\nconst count = WebSessionCounter.count;\n</pre>\n<p><code>WebSessionCounter</code> automatically calls <code>.update()</code> on every initialization. When you import the library, that is. It&#8217;s a singleton. You can get the current count through the <code>.count</code> property.</p>\n<p>I suggest calling <code>.update()</code> every time your user performs a significant action. In my day job, we tie this to our internal funnel tracking. Whenever we track an event for business analytics, we update the counter as well.</p>\n<p>If your thing is built as a single page app, you have to keep calling <code>.update()</code>. Otherwise, you might miss the 30-minute inactivity window or make it look too big.</p>\n<p>If you often reload the page, don&#8217;t worry about calling <code>.update()</code>. The reload will do it for you.</p>\n<h3>Here&#8217;s how it works</h3>\n<p>The gist of <code>WebSessionCounter</code> is this 71-line class.</p>\n<pre lang=\"javascript\">\nclass WebSessionCounter {\n    constructor() {\n        this.update();\n    }\n\n    get count() {\n        if (canUseLocalStorage) {\n            return Number(window.localStorage.getItem('user_web_session_count'));\n        }else{\n            return NaN;\n        }\n    }\n\n    set count(val) {\n        window.localStorage.setItem('user_web_session_count', val);\n    }\n\n    get lastActive() {\n        const time = window.localStorage.getItem('user_web_session_last_active');\n\n        if (time) {\n            return moment(time);\n        }else{\n            return moment();\n        }\n    }\n\n    set lastActive(time) {\n        window.localStorage.setItem('user_web_session_last_active', time.toISOString());\n    }\n\n    get lastUtmCampaign() {\n        return window.localStorage.getItem('user_web_session_utm_campaign');\n    }\n\n    set lastUtmCampaign(val) {\n        window.localStorage.setItem('user_web_session_utm_campaign', val);\n    }\n\n    get currentUtmCampaign() {\n        const [ path, query = '' ] = window.location.href.split('?'),\n              { utm_campaign = '' } = querystring.parse(query);\n\n        return utm_campaign;\n    }\n\n    update() {\n        if (canUseLocalStorage) {\n            let count = this.count,\n                time = this.lastActive;\n\n            if (count === 0 || this.isNewSession()) {\n                this.count = count + 1;\n                this.lastActive = moment();\n                this.lastUtmCampaign = this.currentUtmCampaign;\n            }\n        }\n    }\n\n    isNewSession() {\n        // use definition from https://support.google.com/analytics/answer/2731565?hl=en\n\n        const time = this.lastActive,\n              now = moment();\n\n        return [\n            moment.duration(now.diff(time)).asMinutes() > 30,\n            now.format('YYYY-MM-DD') !== time.format('YYYY-MM-DD'),\n            this.lastUtmCampaign !== this.currentUtmCampaign\n        ].some(b => b);\n    }\n}\n</pre>\n<p>When I say &#8220;gist&#8221;, I mean that&#8217;s all there is to it. Doesn&#8217;t look like much, but it did take me an hour or two to write. You can use my <code>web-session-counter</code> module, and it will take you 5 minutes. ðŸ™‚</p>\n<p>We have 3 sets of getters and setters for the <code>count</code>, the <code>lastActive</code> timestamp, and <code>lastUtmCampaign</code>. Getters read values from local storage; setters save them.</p>\n<p>The <code>currentUtmCampaign</code> getter reads the URL and returns the current value of <code>utm_campaign</code>. Having a pair of getters for current and last <code>utm_campaign</code> helps us detect changes.</p>\n<blockquote class=\"twitter-tweet\" data-width=\"550\">\n<p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/Swizec\">@Swizec</a> Seems fine for generated code</p>\n<p>&mdash; Sven SAULEAU (@svensauleau) <a href=\"https://twitter.com/svensauleau/status/862401992110551042\">May 10, 2017</a></p></blockquote>\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n<p>Our business logic lies in the <code>update</code> and <code>isNewSession</code> methods.</p>\n<pre lang=\"javascript\">\n    update() {\n        if (canUseLocalStorage) {\n            let count = this.count;\n\n            if (count === 0 || this.isNewSession()) {\n                this.count = count + 1;\n                this.lastActive = moment();\n                this.lastUtmCampaign = this.currentUtmCampaign;\n            }\n        }\n    }\n\n    isNewSession() {\n        // use definition from https://support.google.com/analytics/answer/2731565?hl=en\n\n        const time = this.lastActive,\n              now = moment();\n\n        return [\n            moment.duration(now.diff(time)).asMinutes() > 30,\n            now.format('YYYY-MM-DD') !== time.format('YYYY-MM-DD'),\n            this.lastUtmCampaign !== this.currentUtmCampaign\n        ].some(b => b);\n    }\n</pre>\n<p><code>update</code> first checks if local storage is available. Wouldn&#8217;t wanna throw errors and kill all JavaScript if it isn&#8217;t.</p>\n<p>If we can use local storage, then we get the current <code>count</code> from local storage. If the <code>count</code> is zero or <code>isNewSession</code> returns <code>true</code>, we have to update info in local storage.</p>\n<p>We increase the <code>count</code>, update the <code>lastActive</code> timestamp, and store the current <code>utm_campaign</code> value.</p>\n<p>To detect new sessions, we use a helper method â€“&nbsp;<code>isNewSession</code>. Some say my code isn&#8217;t readable, but I think it&#8217;s not too bad. The function name tells you what it does ðŸ˜œ</p>\n<p>The first condition checks if 30 minutes have passed since the last update, the second checks if the date has changed, and the third check if the <code>utm_campaign</code> is different. <code>.some(b =&gt; b)</code> returns <code>true</code> if any of the conditions are truthy.</p>\n<blockquote class=\"twitter-tweet\" data-width=\"550\">\n<p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/Swizec\">@Swizec</a> <a href=\"https://twitter.com/montogeek\">@montogeek</a> An alternative that isn&#39;t significantly longer, but IMO much clearer <a href=\"https://t.co/iJ2ulJIjEW\">pic.twitter.com/iJ2ulJIjEW</a></p>\n<p>&mdash; Sigurt Bladt Dinesen (@Bladtman) <a href=\"https://twitter.com/Bladtman/status/862432478572752896\">May 10, 2017</a></p></blockquote>\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n<h2>Caveats</h2>\n<p>Users can clear local storage and you lose track. That&#8217;s okay; real users don&#8217;t do that. Only cheeky engineers.</p>\n<p>Some browsers don&#8217;t have local storage, like Safari in incognito mode for example. That&#8217;s okay; those users don&#8217;t want to be tracked, so you shouldn&#8217;t track them.</p>\n<p>Happy hacking. ðŸ¤“</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"47010ebc-701c-5cfc-85a5-a760f5b8166e"}}