{"data":{"wordpressPost":{"title":"Yet another hard lesson about time","content":"<blockquote><p>\nYo Swiz, some users complained their exam ends immediately.\n</p></blockquote>\n<blockquote><p>\nHm… that&#39;s weird ?\n</p></blockquote>\n<p>So began my two day hunt for a bug.</p>\n<p>To become a <a href=\"https://www.yup.com/become-tutor\">Yup tutor</a>, you have to pass a subject exam: 25 questions about math, chemistry, or physics in 45 minutes. It&#39;s hard as hell; I tried.</p>\n<img class=\"alignnone size-full wp-image-7383\" src=\"https://swizec.com/blog/wp-content/uploads/2017/01/exam-timer.gif\" width=\"348\" height=\"73\" />\n<p>There&#39;s a timer in the corner ticking down. 45 minutes, and then you&#39;re done. A dialog shows up telling you time’s up. Easy peasy to build, right? Get a start time, add 45 minutes, count down. When timer hits zero, stop. 90% of the time, it works every time.</p>\n<p>And then there’re <em>those</em> 7 people. For them, the timer hits zero 1 second after it starts. 45 minutes. Tick. Zero.</p>\n<p>o.O</p>\n<p>I looked through the code. No race conditions. You click Start, the server creates an exam, makes a <code>started_at</code> timestamp, adds 45 minutes, and tells the frontend when your exam should end. On every <a href=\"https://swizec.com/blog/modeling-time-react/swizec/7200\">Clock tick</a>, the counter updates ,and a MobX observer checks if you&#39;re out of time.</p>\n<img class=\"alignnone size-full wp-image-7384\" src=\"https://swizec.com/blog/wp-content/uploads/2017/01/time-diagram-1.jpg\" width=\"600\" height=\"800\" srcset=\"https://swizec.com/blog/wp-content/uploads/2017/01/time-diagram-1.jpg 600w, https://swizec.com/blog/wp-content/uploads/2017/01/time-diagram-1-225x300.jpg 225w\" sizes=\"(max-width: 600px) 100vw, 600px\" />\n<p>Very straightforward.</p>\n<p>We&#39;re using React and MobX, so the frontend behaves like a state machine. There&#39;s no way we&#39;re rendering stale views, no way for poorly garbage collected views to cause problems, and the more I played with the frontend state machine, the sturdier it looked.</p>\n<p>Here&#39;s an excerpt:</p>\n<pre lang=\"javascript\">\nclass SubjectExam {\n    constructor(user, subject) {\n        when(() => this.isOutOfTime,\n             () => {\n                 if (!this.finished) {\n                     this.finish();\n                 }\n             }\n        );\n    }\n    \n    @computed get isOutOfTime() {\n        return !_.isNull(this.timeLeft) && this.timeLeft <= 0;\n    }\n    \n    @computed get timeLeft() {\n        if (this.should_end_by) {\n            return moment.duration(moment.unix(this.should_end_by).diff(Clock.time));\n        }else{\n            return null;\n        }\n    }\n}\n</pre>\n<p>MobX&#39;s <code>when</code> creates an autorun that checks the condition function, <code>() =&gt; this.isOutOfTime</code>, every time its value changes. When it evaluates to <code>true</code>, it runs the given function. In this case, that’s an action that finishes the subject exam.</p>\n<p>The reason this works is hidden in <code>@computed timeLeft()</code>. It depends on <code>Clock.time</code>, which is a global MobX store that updates every second. It’s based on my <a href=\"https://swizec.com/blog/modeling-time-react/swizec/7200\">Modeling time in React &amp; MobX</a> approach.</p>\n<p>Diffing the server-provided <code>should_end_by</code> timestamp and <code>Clock.time</code> tells us how much time is left. It works great and produces a countdown timer when you add some rendering.</p>\n<p>The nice feature of this approach is that the timer is stable. You can refresh and navigate the page as much as you want. The server calculates the time, so it doesn&#39;t care.</p>\n<p>But… those 7 people… why was the time up after 1 second? Can you guess?</p>\n<p>I found no pattern in who the applicants were, when they took the exam, what timezone they were in, or which browser they used. It&#39;s not a bug in MomentJS. None of the cases happened around a DST, day, month, or year boundary.</p>\n<p><em>It should work.</em></p>\n<p>?</p>\n<p>The only remaining explanation is that their system time was waaaaaayyy in the future. More than 45 minutes. I don&#39;t know why their computers thought they were in the future, but it&#39;s the only explanation that works.</p>\n<p>How do you fix it?</p>\n<p>You don&#39;t rely on user time. Instead of calculating a <code>should_end_by</code> timestamp on the server, calculate the delta. Look only at the delta when doing a countdown.</p>\n<p>Like this:</p>\n<img class=\"alignnone size-full wp-image-7385\" src=\"https://swizec.com/blog/wp-content/uploads/2017/01/time-diagram-2.jpg\" width=\"600\" height=\"800\" srcset=\"https://swizec.com/blog/wp-content/uploads/2017/01/time-diagram-2.jpg 600w, https://swizec.com/blog/wp-content/uploads/2017/01/time-diagram-2-225x300.jpg 225w\" sizes=\"(max-width: 600px) 100vw, 600px\" />\n<p>The exam starts, the server looks at current time and returns <code>45min</code>. User reloads, server looks at current time, calculates delta from start time, returns new time remaining.</p>\n<p>On the frontend, you create a local <code>shouldEndAt</code> timestamp when you load the exam – <code>time + delta_from_server</code> – then count down from there.</p>\n<p>Lesson learned. Time is so hard that you can&#39;t even rely on people&#39;s clocks being accurate to within 1 hour. Add it to the <a href=\"http://infiniteundo.com/post/25326999628/falsehoods-programmers-believe-about-time\">Falsehoods Programmers Believe About Time</a> pile.</p>\n<p>?</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"87661088-d1f9-57e2-b1f0-263a131a8942"}}