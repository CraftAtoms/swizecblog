{"data":{"wordpressPost":{"title":"It ain&#8217;t stupid if it works","content":"<p>How do you send your friendly neighborhood data scientist 1,571,043 messages to play with?</p>\n<p>?</p>\n<p>Well, the easiest would be something like this:</p>\n<pre><code>username: MR_SCIENTIST\npassword: PLEASE_DONT_FUCK_UP_OUR_PRODUCTION_DATABASE\nurl: postgres://user:pass@ec2-54-225-230-243.compute-1.amazonaws.com:5432/somepath\n</code></pre>\n<p>Excellent! It took you 30 seconds to find the credentials and 2 minutes to write an email. Now all The Scientist has to do is connect to your database, learn an undocumented schema of 114 tables, run some queries, and make absolutely certain that he doesn&#8217;t mess anything up. He also have to be careful because this is production data and if something goes wrong here, the latest untested backup is 8 hours old.</p>\n<p>Ok, the &#8220;access to production&#8221; part is bad.</p>\n<p>Surely there&#8217;s a slave database somewhere that has a copy of all data!? Lol, nope.</p>\n<p>A-ha! Send the latest binary dump. That way The Scientist can load it up locally and fetch whatever he needs.</p>\n<p>That&#8217;s 21GB of data. 1.8GB compressed. It&#8217;s not <em>that</em> big for a production DB, but it sure sucks whenever you load it on your laptop. It takes forever to download from the server and upload back to another server.</p>\n<p>No, no, that won&#8217;t work. The analysis doesn&#8217;t need everything you have, and The Scientist sure as hell doesn&#8217;t wanna learn your crazy 100+ table schema.</p>\n<p>Not like you understand the whole thing yourself. Just the parts you built.</p>\n<img src=\"http://i.imgur.com/WPQMsys.jpg\" />\n<p>CSV! Comma separated values. It&#8217;s plaintext, it&#8217;s easy to build, easy to read, it&#8217;s from the 70&#8217;s, it works.</p>\n<blockquote><p>Comma-separated values is a data format that pre-dates personal computers by more than a decade: the IBM Fortran (level H extended) compiler under OS/360 supported them in 1972.[5] List-directed (&#8220;free form&#8221;) input/output was defined in FORTRAN 77, approved in 1978. /&#8230;/ Comma-separated value lists are easier to type (for example into punched cards) than fixed-column-aligned data, /&#8230;/</p></blockquote>\n<p>That&#8217;s right. CSV is so old that it was designed to make writing <strong>punch-cards</strong> easier. Possibly by hand.</p>\n<p>And yet, it was first <a href=\"https://en.wikipedia.org/wiki/Comma-separated_values#History\">standardized in 2005</a>. How hard is it to write <code>value1,value2,value3</code> consistently across systems?</p>\n<p>¯\\<em>_(ツ)_/¯<br />\n</em></p>\n<p>Great! You&#8217;re going to send The Scientist a CSV plaintext file. But how do you get it?</p>\n<p>Well, you&#8217;re gonna have to connect to the server. That&#8217;s where connecting to the database is easier. And because you&#8217;re me, you&#8217;re running Rails there.</p>\n<p>You can do something like this:</p>\n<pre lang=\"ruby\">\ntimespan = many_days_ago.beginning_of_day .. 1.day.ago.end_of_day\nputs \"session_id,created_at,sent_from,sent_to,content_type,text\"\nMessage.where(created_at: timespan).find_each { |msg|\n  puts [\n        msg.chat_id,\n        msg.created_at,\n        msg.sent_from,\n        msg.sent_to,\n        msg.content_type,\n        msg.text\n       ].to_csv\n} ; 0\n</pre>\n<p>That selects all messages from a <code>timespan</code>, walks through them 1000 at a time, and prints a new line of CSV to standard output for each message. Add a <code>puts</code> for the header, and hey presto, a CSV file is born!</p>\n<p>So how do you get all this data off your server?</p>\n<p>You run the commands, pipe output to a file using <code>&gt; epic_data.csv</code>, then <a href=\"https://en.wikipedia.org/wiki/Secure_copy\">scp</a> the file from your server to your laptop. Lol, nope.</p>\n<p>You&#8217;re on Heroku. Every time you connect to The Server, you&#8217;re actually creating a new one-off dyno that exists only for the lifetime of your connection. All the same basic state as when you deployed, none of the new state.</p>\n<p>You can dump files into <code>/tmp</code> or <code>/home/whatever</code> all day, but you&#8217;ll never get them off.</p>\n<p><em>&#8220;Ah!&#8221;</em>, you say, <em>&#8220;But I can make my dumper script upload the CSV to S3 or something and give me a link&#8221;</em></p>\n<p>Yes. Yes, you can. And then you have to deal with all that.</p>\n<p><strong><em>OR</em></strong> you could spin up a rails console with <code>heroku run rails c</code>, run the code above, watch a million and a half lines of CSV fly by on your terminal then…</p>\n<p>&#8230;</p>\n<p>&#8230; copy-paste the whole thing into a text editor.</p>\n<p>?</p>\n<p>That&#8217;s exactly what I did. It worked, too.</p>\n<p>Run command. Drag-select the first few characters. Scroll to bottom. Wait until text stops flying. Took about 30min. Computer starting to get jittery as Terminal ate RAM like crazy.</p>\n<p>Shift-click at the bottom of the output. Cmd+C. Click into Emacs. Cmd+V. Beach ball of death.</p>\n<p>3 minutes later, a 160MB CSV shows up. Cmd+S. Computers are amazing.</p>\n<p>It ain&#8217;t stupid if it works™.</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"206b2581-f246-541f-bea0-0f6d8b80afe7"}}