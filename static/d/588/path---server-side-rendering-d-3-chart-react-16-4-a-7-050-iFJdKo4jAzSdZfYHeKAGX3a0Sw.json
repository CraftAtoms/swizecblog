{"data":{"wordpressPost":{"title":"Server-side rendering a D3 chart with React 16","content":"<p>The Flash of Doom is one of the most annoying issues with D3 charts. You load the page, then you load the data, <em>then</em> you render your chart.</p>\n<p>Everyone&#8217;s staring at a blank screen while the data loads.</p>\n<p>With React 16, we can fix that using server-side rendering and the new <code>ReactDOM.hydrate</code> feature. The idea is to serve a fully rendered chart in the initial HTML payload, then take over with JavaScript and become a normal webapp.</p>\n<img class=\"alignnone size-full wp-image-7823\" src=\"https://swizec.com/blog/wp-content/uploads/2017/09/server-side-d3.gif\" width=\"824\" height=\"641\" />\n<p>Pay close attention to that gif. The flashing red shows repaints.</p>\n<p>When I reload the page, the whole thing re-renders and shows a line chart. Axes show up after a little while, and they&#8217;re the only part of the page that re-renders.</p>\n<p>Here&#8217;s a slower version without the flashing.</p>\n<img class=\"alignnone size-full wp-image-7822\" src=\"https://swizec.com/blog/wp-content/uploads/2017/09/server-side-d3-no-flash.gif\" width=\"824\" height=\"641\" />\n<p>Here&#8217;s what you&#8217;re seeing ðŸ‘‡</p>\n<ol>\n<li>You hit reload</li>\n<li>Server reads <code>index.html</code> from <a href=\"https://github.com/facebookincubator/create-react-app\">create-react-app</a></li>\n<li>Server reads local CSV file with data</li>\n<li>Server renders <code>&lt;App /&gt;</code> into root HTML element</li>\n<li>Server sends the full <code>index.html</code> to your browser</li>\n<li>Browser shows HTML with the chart</li>\n<li>Browser loads remote CSV file with data</li>\n<li>Browser runs <code>ReactDOM.hydrate()</code> to render <code>&lt;App /&gt;</code></li>\n<li><code>&lt;App /&gt;</code> takes over the DOM and becomes a normal webapp</li>\n</ol>\n<p>Some parts of this are efficient.</p>\n<p><code>ReactDOM.hydrate</code> avoids re-rendering parts of the DOM that were already rendered by your server. In our case, that&#8217;s everything except the axes.</p>\n<p>Some parts of this are inefficient.</p>\n<p>The server shouldn&#8217;t need to read the CSV and HTML files on every request. You could do that on startup and save the strings in a variable. They&#8217;re static.</p>\n<p>We&#8217;re also rendering <code>&lt;App /&gt;</code> and running all of our React code twice. But this doesn&#8217;t need to happen every time on the server. Cache that stuff!</p>\n<h2>How to</h2>\n<p>You can try it out for yourself <a href=\"https://github.com/Swizec/server-side-d3-poc\">on Github</a>.</p>\n<p>The hardest part was adding a small Express server to <code>create-react-app</code> that supports <code>import</code> and React syntax. I couldn&#8217;t figure it out on my own, so I used <a href=\"https://medium.com/@benlu/ssr-with-create-react-app-v2-1b8b520681d9\">Ben Lu&#8217;s</a> amazing <a href=\"https://medium.com/@benlu/ssr-with-create-react-app-v2-1b8b520681d9\">SSR with create-react-app</a> guide.</p>\n<p>The main trick seems to be installing <code>ignore-styles</code> so your server doesn&#8217;t error out when <code>require</code>-ing CSS files (no webpack), and figuring out just the right incantation of Express setup to get the server working. I tried simplifying his setup, but it didn&#8217;t work.</p>\n<p>In the end, your best bet might be to just copy his <code>server/</code> directory and go from there. Adapt <code>server/universal.js</code> to render your <code>&lt;App /&gt;</code> instead of his ReactRouter stuff.</p>\n<p>You also have to go into <code>public/index.html</code> and add <code>{{SSR}}</code> to the body of <code>&lt;div id=\"root\"&gt;</code>. The server looks for <code>{{SSR}}</code> and replaces it with the rendered HTML from your React app.</p>\n<p>You can see my server-side code that reads a CSV file and renders the chart into a string <a href=\"https://github.com/Swizec/server-side-d3-poc/blob/master/server/universal.js\">on Github</a>.</p>\n<h2>Adapting your React D3 app to server-side</h2>\n<p>Adjusting to server-side rendering required a small mind shift in the way I built my chart. Usually, I like to use <code>componentWillMount</code> in the <code>&lt;App /&gt;</code> component to load data. Until data loads, the app renders a <code>null</code>; after that, it returns a chart component.</p>\n<p>This makes apps easy to build and avoids issues with undefined data when rendering.</p>\n<p>But it throws away all benefits of server-side rendering. With the <code>componentWillMount</code> approach, you&#8217;re loading the fully rendered chart, replacing it with an empty component, then re-rendering it once data loads on the client.</p>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/3/3b/Paris_Tuileries_Garden_Facepalm_statue.jpg\" />\n<p>Here&#8217;s what you do instead: Accept data as props. Only load in <code>componentWillMount</code> if no data was given.</p>\n<p>Like this ðŸ‘‡</p>\n<pre lang=\"javascript\">\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: (props.data || []).map(this.rowParse)\n        }\n    }\n\n    dateParse = d3.timeParse(\"%d %b %Y\");\n\n    rowParse = ({ date, time, runner }) => ({\n        date: this.dateParse(date),\n        time: time.split(':')\n                  .map(Number)\n                  .reverse()\n                  .reduce((t, n, i) => i > 0 ? t+n*60**i : n),\n        runner\n    });\n\n    componentWillMount() {\n        if (!this.state.data.length) {\n            d3.csv(\"https://raw.githubusercontent.com/Swizec/server-side-d3-poc/master/src/data.csv\")\n              .row(this.rowParse)\n              .get(data => this.setState({ data }))\n        }\n    }\n    \n    // render stuff\n}\n</pre>\n<p>In the <code>constructor</code>, we copy data from props into <code>state</code>. That&#8217;s because components that load their own data usually keep it in state and putting it there means fewer changes to the rest of your code.</p>\n<p><code>rowParse</code> is a helper method that turns individual rows from CVS strings into correct data types: dates for <code>date</code>, seconds for <code>time</code> to win the marathon, and <code>runner</code> stays a string.</p>\n<p>In <code>componentWillMount</code>, we now check if data is already present. If it isn&#8217;t, we load it and everything works the same as it always has.</p>\n<h2>Hydrate <em>after</em> data loads</h2>\n<p>The final piece of the puzzle is hydrating your app <em>after</em> your data is done loading. You&#8217;re already showing a chart, so there&#8217;s no need to be hasty and <code>ReactDOM.hydrate</code> as soon as your JavaScript loads.</p>\n<blockquote class=\"twitter-tweet\" data-width=\"550\">\n<p lang=\"en\" dir=\"ltr\">No, once you hydrate, you hydrate. That said you can wait before hydrating.</p>\n<p>&mdash; Dan Abramov (@dan_abramov) <a href=\"https://twitter.com/dan_abramov/status/913353504856723458?ref_src=twsrc%5Etfw\">September 28, 2017</a></p></blockquote>\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n<p>You can&#8217;t detect that your component already had children and avoid replacing them until you&#8217;re ready. Instead, you can wait to hydrate in the first place.</p>\n<pre lang=\"javascript\">\nd3.csv(\"https://raw.githubusercontent.com/Swizec/server-side-d3-poc/master/src/data.csv\")\n  .row(this.rowParse)\n  .get(data =>\n      ReactDOM.hydrate(<App data={data} />, document.getElementById('root'))\n  );\n</pre>\n<p>And you have successfully solved the Flash of Doom seen in most D3 charts.</p>\n<p>\\o/</p>\n<h2>Caveat</h2>\n<p>Now you need a server. No more static page serverless webapp for your beautiful chart. No gh-pages and simple hostingâ€¦</p>\n<p>You <em>could</em> use now.sh, and that&#8217;s nice, but I don&#8217;t know how to make it run my server. See ðŸ‘‰ <a href=\"https://server-side-d3-poc-mamdozxwze.now.sh\">https://server-side-d3-poc-mamdozxwze.now.sh</a></p>\n<p>The panacea is to figure out how to tweak the create-react-app build process to insert your server-side rendered <code>&lt;App&gt;</code> right into its <code>index.html</code>. That&#8217;s what I really want.</p>\n<p>I wonder if they&#8217;d accept a PR for that ðŸ¤”</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"57de0fd7-da37-5fae-aa44-b70f03d60123"}}