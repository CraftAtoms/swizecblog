{"data":{"wordpressPost":{"title":"JavaScript can fetch() now and it&#8217;s not THAT great","content":"<p>As I was researching <a href=\"https://swizec.com/blog/i-broke-ajax-in-chrome-52-%F0%9F%98%B1/swizec/6914\">that Chrome 52 bug</a> yesterday, my friend <a href=\"https://twitter.com/Smotko\">Smotko</a> showed me something cool: <code>fetch()</code>.</p>\n<p>It&#8217;s a native JavaScript function for AJAX GET requests. I don&#8217;t know what stage it is, but Chrome, Edge, Firefox, and Opera all support it. Safari doesn&#8217;t. Nor do any default mobile browsers, only Android Chrome.</p>\n<p>You can use this <a href=\"https://gist.github.com/Couto/b29676dd1ab8714a818f\">Babel fetch polyfill</a> to bridge the gap. I wonder if that&#8217;s good enough to convince our CTO to let me use this. ?</p>\n<p>Then again, why? Oh yeah, that strange Chrome 52 bug doesn&#8217;t happen and all I&#8217;d have to do was change that one API wrapper function that we use for everything … and thus change our whole codebase … and wreak havoc. ?</p>\n<p>But The Bug doesn&#8217;t happen! Let me show you.</p>\n<img src=\"http://swizec.com/blog/wp-content/uploads/2016/08/fetch.gif\" alt=\"fetch()\" class=\"alignnone size-full wp-image-6924\" />\n<p>Ugh, promises don&#8217;t work in the console. That&#8217;s a bummer … never did like promises. It&#8217;s really just weird syntax sugar for callbacks.</p>\n<pre lang=\"javascript\">\r\nfetch('bla.json')\r\n             .then(response => {\r\n                 console.log(response.ok); // prints true\r\n                 console.log(response.body); // ReadableStream O.o\r\n             });\r\n</pre>\n<p><code>fetch()</code> issues an AJAX request to the server. When it&#8217;s done, it triggers the <code>then</code> part of its promise and gives it a <code>response</code> object. This object can do many useful things, one of which is to tell you if it was successful. Another is to give you a ReadableStream.</p>\n<p>You probably don&#8217;t care about readable streams, so there are functions to parse JSON or get raw text. We&#8217;re in the brave new world of promises, so those are promises too.</p>\n<p>They work like this:</p>\n<pre lang=\"javascript\">\r\nfetch('bla.json')\r\n             .then(response => {\r\n                 response.json()\r\n                         .then((json) => console.log(json)); // Object {id: 1, hai: \"hello\"}\r\n\r\n                 response.text()\r\n                         .then((text) => console.log(text)); // nothing\r\n             });\r\n</pre>\n<p>The <code>json().then()</code> combination prints a JavaScript object parsed from our data. Which feels roundabout, but the internet tells me that promises are better than The Callback Hell.</p>\n<p>This:</p>\n<pre lang=\"javascript\">\r\nfetch(url).then(data => data.body.json().then(real_data => doStuff))\r\n</pre>\n<p>Is supposed to be better than:</p>\n<pre lang=\"javascript\">\r\nrequest.get('bla.json').end((err, res) => console.log(res.body));\r\n</pre>\n<p>¯_(ツ)_/¯</p>\n<p>But lets get back to the story: You can&#8217;t read the fetch response body twice. See that <code>.text()</code> call? That throws an error saying that oh hey, the body has already been read, so you can&#8217;t do it again.</p>\n<p>Maybe there&#8217;s no good reason you&#8217;d want to do that, but what if I <em>do</em> want to?</p>\n<p>There&#8217;s an even worse caveat, though. Let me show you what happens when your <code>fetch()</code> call returns a 404.</p>\n<pre lang=\"javascript\">\r\nfetch('nope.json')\r\n           .catch(() => console.log('something went wrong')) // no error\r\n           .then((res) => console.log(res.ok)); // but not okay either\r\n\r\n</pre>\n<p>With promises, <code>catch()</code> should give us a chance to catch errors. This keeps our code cleaner because <code>then()</code> can focus on the happy path.</p>\n<p>Somebody decided a 404 error is not a good enough reason to reject the promise. You still have to put a lot of error handling into your happy path.</p>\n<p>?</p>\n<p>But <a href=\"https://swizec.com/blog/i-broke-ajax-in-chrome-52-%F0%9F%98%B1/swizec/6914\">The Bug</a> doesn&#8217;t happen! I tried. You can repeat the same request in the <code>then()</code> callback and its <code>then()</code> callback works just fine.</p>\n<p>There is an official explanation for how the bug happens in the <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=633696\">bug report</a> from 8 days ago. A <a href=\"https://codereview.chromium.org/2210473002/\">fix also exists</a>, but it&#8217;s not merged yet.</p>\n<p>This debacle makes me wish I was braver when first seeing this behavior 3 months ago. Way back when it was Chrome Canary and I thought surely someone would fix it.</p>\n<p>What a strange ride it&#8217;s been.</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"0aa2798b-d766-59c3-a43d-6062cc47f5c0"}}