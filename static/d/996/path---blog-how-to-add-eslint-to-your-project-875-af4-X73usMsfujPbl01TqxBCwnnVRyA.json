{"data":{"wordpressPost":{"title":"How to add ESLint to your project","content":"<p>Yesterday, I wrote about how fun it was to <a href=\"https://swizec.com/blog/i-added-linting-to-a-3-year-old-project-you-can-totally-guess-what-happened-next/swizec/6986\">add linting to a 3 year old project</a>, discover 856 errors, give up immediately, and downgrade all errors to warnings so I can sleep at night.</p>\n<p>2% error rate per line of code – 2 lines with problems for every 100 lines of code – is disheartening as hell. But you know what? You can&#8217;t fix a problem you don&#8217;t know you have.</p>\n<p>By the way, here&#8217;s how you count them:</p>\n<pre lang=\"javascript\">\r\n> webpack --config=webpack.config.js | grep problems > problems.txt\r\n</pre>\n<p>This gives you a file full of lines like <code>✖ 18 problems (0 errors, 18 warnings)</code>. One line for each file with linter issues. 175 of those in my case.</p>\n<p>If your Bash is as bad as mine, you can count the problems with one line of python. Like this:</p>\n<pre lang=\"python\">\r\n// throwaway.py\r\nimport re\r\n\r\nprint sum(int(re.search('\\d+', line).group(0)) for line in open('problems.txt'))\r\n</pre>\n<p>Iterate file line-by-line, extract first number of each line, turn it into an integer, sum. Isn&#8217;t Python great? This would be hell to do in JavaScript.</p>\n<p>In my case, this prints 856. I hope you get less!</p>\n<p>So, how do you get that evil mean output that says your code&#8217;s no good when running Webpack? There are 3 steps:</p>\n<ol>\n<li>Install some npm packages</li>\n<li>Add 5 lines to Webpack</li>\n<li>Get a sensible <code>.eslintrc</code> config file</li>\n</ol>\n<h2>1. npm packages</h2>\n<p>It&#8217;s 2016, so I&#8217;m going to assume you&#8217;re using ES6 to write your code. Even if you aren&#8217;t, empowering ESLint to understand modern JavaScript can&#8217;t hurt.</p>\n<p>The packages you need are: eslint, babel-eslint, eslint-loader.</p>\n<pre lang=\"javascript\">\r\n> npm install --save-dev eslint babel-eslint eslint-loader\r\n</pre>\n<p>This installs the packages and saves them as <code>devDependencies</code> in your <code>package.json</code> file. If you&#8217;re using Heroku, you have to set them as normal dependencies with <code>--save</code>. Otherwise your Webpack build will fail when deploying to Heroku because Heroku doesn&#8217;t install dev dependencies.</p>\n<p>That&#8217;s always fun to re-discover.</p>\n<h2>2. 5 lines of Webpack config</h2>\n<p>Let&#8217;s assume you&#8217;re already using Webpack and have a config going. To add ESLint to your build step, add these lines to that config:</p>\n<pre lang=\"javascript\">\r\n// webpack.config.js\r\n\r\nmodule: {\r\n\tloaders: [\r\n\t\t// ...\r\n\t\t{\r\n\t\t\ttest: /\\.js$/,\r\n\t\t\tinclude: [\r\n\t\t\t\tpath.resolve(__dirname, PATH_TO_YOUR_CODE)\r\n\t\t\t],\r\n\t\t\tloader: 'eslint',\r\n\t\t\texclude: /node_modules/\r\n\t\t},\r\n\t\t// ...\r\n}\r\n</pre>\n<p>For every file in <code>include</code> paths that ends with <code>.js</code>, use the <code>eslint</code> loader. The <code>exclude</code> setting might be unnecessary, but I like to add it out of habit.</p>\n<p>Yes, the best place to put this is in <code>loaders</code>. Not <code>preLoaders</code> and not <code>postLoaders</code>. </p>\n<p>Logically speaking, it fits best in <code>preLoaders</code>, doesn&#8217;t it? You&#8217;d want to run the linter before doing any other transformation. That&#8217;s why it can&#8217;t go in <code>postLoaders</code>.</p>\n<p>That caused strange errors for me that took &#8230; <em>cough</em> &#8230; hours to figure out. When you use the bang syntax to specify loaders in <code>require()</code> calls, <code>eslint</code> gets confused and constructs file paths that do not exist.</p>\n<p>The easiest solution is to use it as a part of normal loaders. Ordering matters.</p>\n<p>If I switch places and put <code>eslint</code> before <code>babel-loader</code>, Webpack spits out 883 errors in 178 files. 27 more errors in 3 more files.</p>\n<p>I will pretend I didn&#8217;t see that.</p>\n<h2>3. A sensible ESLint config</h2>\n<p>Now, the fun part -&gt; ESLint config in <code>.eslintrc</code>. There are many files out there with varying degrees of annoyingness.</p>\n<p>You can use <a href=\"https://www.npmjs.com/package/eslint-config-airbnb\">AirBnB&#8217;s ESLint config</a>, which I&#8217;ve heard is annoying and makes you feel dirty.</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/Swizec\">@Swizec</a> I tried the airbnb ruleset. Threw so many errors I just disabled it. I felt so dirty&#8230;</p>\n<p>&mdash; Jonas (@JonasBadalic) <a href=\"https://twitter.com/JonasBadalic/status/769777611434258432\">August 28, 2016</a></p></blockquote>\n<p><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n<p>Then there&#8217;s <a href=\"https://www.npmjs.com/package/eslint-config-google\">Google&#8217;s ESLint config</a>, which I haven&#8217;t heard anything about. It does have a lot of downloads though. ¯_(ツ)_/¯ </p>\n<p>Or the option that would make me feel all warm and fuzzy: <a href=\"https://gist.github.com/Swizec/7fb9ed92b4b56584d74de8dfcfd1c7d0\">my battle untested base config</a>. It&#8217;s designed to annoy you, but not too much. It’s based off of <a href=\"https://github.com/codeclimate/codeclimate/blob/master/config/eslint/.eslintrc\">Code Climate&#8217;s config</a> with all errors turned into warnings. </p>\n<p>My favorite feature is that it lists all available options, so in theory it&#8217;s easy to fine-tune. I can already tell that we&#8217;ll have to crank up some of the styling rules and tune down some of the &#8220;potential error&#8221; rules.</p>\n<p>Now… how do I get team buy-in? ?</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"b7569b9f-f656-5712-a1f6-a0f9177475ef"}}