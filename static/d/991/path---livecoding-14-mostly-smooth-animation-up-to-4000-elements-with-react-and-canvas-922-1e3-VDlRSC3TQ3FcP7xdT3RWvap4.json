{"data":{"wordpressPost":{"title":"Livecoding #14: Mostly-smooth animation up to 4,000 elements with React and canvas","content":"<p><em>This is a Livecoding Recap â€“ an almost-weekly post about interesting things discovered while livecoding. Shorter than 500 words. With pictures. You can follow my channel <a href=\"https://livecoding.tv/swizec\">here</a>. New content almost <strong>every Sunday at 2pm PDT</strong>. Thereâ€™s live chat. ?</em></p>\n<p><iframe src=\"https://www.livecoding.tv/swizec/videos/dyDYa/embed\" width=\"600\" height=\"400\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"allowfullscreen\"></iframe></p>\n<p>We did it! A few thousand elements smoothly animated with React and canvas! Hooray! \\o/</p>\n<p>Itâ€™s not perfect. We had to throw the baby away with the bath water and drop down a layer below React. The <a href=\"http://swizec.com/blog/livecoding-13-rendering-react-components-with-canvas/swizec/6784\"><code>updateChildren</code> issue from last time</a> proved too hard to solve. Too hard for <em>me</em> to solve at least.</p>\n<figure><img class=\"aligncenter\" src=\"http://i.imgur.com/4OLlufc.gif\" alt=\"\" width=\"850\" height=\"500\" /></figure>\n<p>We moved our particle rendering logic into <code>componentDidUpdate</code> and rolled up our sleeves. Without Reactâ€™s help, we were forced to manually keep track of new and old particles.</p>\n<p>The upside is that we can move existing particles instead of re-creating them. This saves cycles. The downside is that we were unable to remove irrelevant particles efficiently, so they pile up in memory.</p>\n<p>Itâ€™s a garbage collection problem in a way. Animation works well the first time you try it. But if you wait for all the particles to vanish and try again, itâ€™s super slow. Thatâ€™s because it keeps redrawing particles that are no longer there. Oops.</p>\n<p>The meat of our code looks like this:</p>\n<pre><code class=\"javascript\">componentDidUpdate() {\r\n        let layer = this.refs.the_thing,\r\n            particles = this.props.particles,\r\n        for (let i = 0; i &lt; particles.length; i++) {\r\n            let { id, x, y } = particles[i];\r\n\r\n            if (this._particles[id]) {\r\n                // move particle\r\n                this._particles[id].position({\r\n                    x: x,\r\n                    y: y\r\n                });\r\n            }else{\r\n                // create new particle\r\n                let c = new Circle({\r\n                    radius: 1.8,\r\n                    x: x,\r\n                    y: y,\r\n                    fill: 'black'\r\n                });\r\n                this._particles[id] = c;\r\n                layer.add(c);\r\n            }\r\n        };\r\n\r\n        layer.batchDraw();\r\n</code></pre>\n<p>Lovely. <code>new Circle</code> creates a particle, <code>.position</code> updates its position. <code>layer.batchDraw</code> does drawing stuff with the <a href=\"http://konvajs.github.io/\">Konva</a> library.</p>\n<p>This is great, but itâ€™s not perfect. When I stress-tested it later, I discovered an issue. At 4,000 particles, the animation becomes sad. At 7,000 particles, itâ€™s disgusting.</p>\n<img class=\"aligncenter\" src=\"http://i.imgur.com/Y6TDJFX.gif\" alt=\"\" width=\"850\" height=\"500\" />\n<p>So sad.</p>\n<p>Just for shits and giggles, I checked the original pure SVG implementation from a few weeks ago. To my surprise, <em>it works better</em>. Better! React renders and updates pure SVG faster than our hard-earned canvas code does.</p>\n<p><img src=\"http://i.imgur.com/JWublnt.gif\" width=\"850\" height=\"500\" class=\"aligncenter\" /><br />\nIt takes 7,000 elements to bog down the pure SVG implementation.</p>\n<p><img src=\"http://i.imgur.com/UElqylu.gif\" width=\"850\" height=\"500\" class=\"aligncenter\" /><br />\nUgh. So annoying. Back to the drawing board.</p>\n<p>Thereâ€™s a sliver of hope. Take a good look at those gifs.</p>\n<p>React+SVG works well up to about 3,000 particles, then quickly bogs down, and has a hard time reaching more than 6,500 particles on screen.</p>\n<p>React+canvas+Konva works a bit worse at 3,000 particles, but looks like itâ€™s slowing down slower. If that makes sense. Itâ€™s not much worse at 5,000 particles than at 3,000. React+SVG at 5,000 looks terrible compared to 3,000.</p>\n<p>This is promising. It implies that canvas can handle it, but weâ€™re doing something stupid. Maybe Konva is slow, or maybe weâ€™re misusing it.</p>\n<p>Weâ€™ll find out this Sunday ðŸ™‚</p>\n<p>PS: the edited and improved versions of these videos are becoming a video course. Readers of the engineer package of <a href=\"http://swizec.com/reactd3js/\">React+d3js ES6</a> get the video course for free when itâ€™s ready.</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"1c0aec99-f298-5329-8501-bef31b0ffce0"}}