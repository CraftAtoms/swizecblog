{"data":{"wordpressPost":{"title":"Advent of Code Day 20 â€“Â Particle Swarm","content":"<p><iframe width=\"580\" height=\"326\" src=\"https://www.youtube.com/embed/ekm7m9CDnBQ?feature=oembed\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen></iframe></p>\n<p>Day 20 smells like one of those problems that you have to math.</p>\n<blockquote class=\"twitter-tweet\" data-width=\"550\">\n<p lang=\"en\" dir=\"ltr\">OMG I MADE LEADERBOARD FOR DAY 20!!<a href=\"https://t.co/Jn5odRVtVM\">https://t.co/Jn5odRVtVM</a> <a href=\"https://twitter.com/hashtag/AdventOfCode?src=hash&amp;ref_src=twsrc%5Etfw\">#AdventOfCode</a> <a href=\"https://t.co/iDOF1sLREm\">pic.twitter.com/iDOF1sLREm</a></p>\n<p>&mdash; Swizec (@Swizec) <a href=\"https://twitter.com/Swizec/status/943380787528835072?ref_src=twsrc%5Etfw\">December 20, 2017</a></p></blockquote>\n<p><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n<p>You&#8217;re given a large list of particles that each have a velocity vector and an acceleration vector. Velocity tells you where they move and how fast. Acceleration tells you how velocity changes.</p>\n<p>You then have to figure out which particle will stay closest to the center â€“&nbsp;<code>&lt;0,0,0&gt;</code> â€“&nbsp;in the &#8220;long term&#8221;.</p>\n<p>You can math this.</p>\n<img src=\"https://swizec.com/blog/wp-content/uploads/2017/12/advent-of-code-day20-particles-1024x575.jpg\" alt=\"\" class=\"alignnone size-large wp-image-7991\" srcset=\"https://swizec.com/blog/wp-content/uploads/2017/12/advent-of-code-day20-particles-1024x575.jpg 1024w, https://swizec.com/blog/wp-content/uploads/2017/12/advent-of-code-day20-particles-300x168.jpg 300w, https://swizec.com/blog/wp-content/uploads/2017/12/advent-of-code-day20-particles-768x431.jpg 768w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" />\n<p>The particle that is <em>accelerating</em> away from center the slowest is the particle that will eventually stay the closest.</p>\n<p>This makes sense when you think about it. No matter the initial position or velocity, each particle is either accelerating towards the center, or a way from it. Even if a particle is moving towards the center, it can still be accelerating away from center. Eventually it will fly far far away.</p>\n<p>Say a particle starts at <code>p = &lt;3,0,0&gt;</code> and is moving away from center at <code>v = &lt;3,0,0&gt;</code>, but its acceleration is towards center â€“&nbsp;<code>a = &lt;-1,0,0&gt;</code>. If we iterate through each tick of the simulation, you&#8217;ll see what I mean ðŸ‘‡</p>\n<pre><code>p = &lt;3,0,0&gt;  v=&lt;3,0,0&gt;  a = &lt;-1,0,0&gt;\np = &lt;5,0,0&gt;  v=&lt;2,0,0&gt;  a = &lt;-1,0,0&gt;\np = &lt;6,0,0&gt;  v=&lt;1,0,0&gt;  a = &lt;-1,0,0&gt;\np = &lt;6,0,0&gt;  v=&lt;0,0,0&gt;  a = &lt;-1,0,0&gt;\np = &lt;5,0,0&gt;  v=&lt;-1,0,0&gt; a = &lt;-1,0,0&gt;\np = &lt;3,0,0&gt;  v=&lt;-2,0,0&gt; a = &lt;-1,0,0&gt;\np = &lt;0,0,0&gt;  v=&lt;-3,0,0&gt; a = &lt;-1,0,0&gt;\n...\n</code></pre>\n<p>On each tick of the simulation, we add acceleration to velocity, then add velocity to the current position. Our particle that started life flying away from center first slows down, then stops, then hurtles towards center.</p>\n<p>After 4 ticks, it reaches center and keeps flying away ever faster.</p>\n<p>That&#8217;s what I mean when by &#8220;accelerating away from center&#8221;. With enough time <strong>all</strong> particles are accelerating away from center because if they were ever going to cross it, they already have.</p>\n<p>But math is hard and modern computers are fast. Even in JavaScript.</p>\n<h2>Star 1</h2>\n<p>So we can <a href=\"https://github.com/Swizec/advent-of-code-2017/blob/master/20.js#L1037\">brute force the solution</a>. No math required ðŸ˜‡</p>\n<p>The gist of our bruteforcing is the simulation function itself, the <code>tick</code>. It goes through all particles and moves them.</p>\n<pre lang=\"javascript\">\nfunction tick(particles) {\n    return particles.map(({ p, v, a }) => {\n        v = v.map((n, i) => n + a[i]);\n        return {\n            p: p.map((n, i) => n + v[i]),\n            v: v,\n            a: a\n        };\n    });\n}\n</pre>\n<p>That returns a new copy of the <code>particles</code> array with changed positions, <code>p</code>, and velocities, <code>v</code>. Acceleration doesn&#8217;t change.</p>\n<p>We then also need a way to find the particle closest to center. That&#8217;s these two functions.</p>\n<pre lang=\"javascript\">\nfunction distance(particle) {\n    return particle.p.reduce((d, n) => d + Math.abs(n), 0);\n}\n\nfunction closest(particles) {\n    return particles.reduce(\n        ({ min, index }, p, i) =>\n            distance(p) < min\n                ? { min: distance(p), index: i }\n                : { min: min, index: index },\n        { min: distance(particles[0]), index: 0 }\n    );\n}\n</pre>\n<p><code>distance</code> gives us the <a href=\"https://en.wikipedia.org/wiki/Taxicab_geometry\">Manhattan distance</a> between the center and a particle. <code>closest</code> finds the particle with the smallest distance and returns its <code>index</code> and distance <code>min</code>.</p>\n<p>Then we just run the simulation until the closest particle doesn't change for a while. I got good results with <code>\"hasn't changed in 2000 ticks\"</code>. Some fiddling required.</p>\n<p>Generally the larger that number, the more accurate your result. If you describe the problem in terms of search algorithms (you're searching for a stable state), then any sequence of stable states when the <code>min</code> distance doesn't change for a while is a local maximum. You're looking for the global maximum.</p>\n<p>The longer you keep looking, the likelier that you're at the best possible result.</p>\n<pre lang=\"javascript\">\nfunction star1(input) {\n    let particles = prepInput(input);\n\n    let stable = {\n        min: 0,\n        index: 0,\n        iterations_unchanged: 0\n    };\n\n    while (stable.iterations_unchanged < 2000) {\n        particles = tick(particles);\n\n        const { min, index } = closest(particles);\n\n        if (stable.index === index) {\n            stable.iterations_unchanged += 1;\n        } else {\n            stable.min = min;\n            stable.index = index;\n            stable.iterations_unchanged = 0;\n        }\n    }\n\n    console.log(stable);\n}\n</pre>\n<p>Keep track of the result and how long it's remained unchanged. Repeat until desired accuracy.</p>\n<p>Runs in about a second on my machine. ðŸ‘Œ</p>\n<h2>Star 2</h2>\n<p>Star 2 really stretched what I thought was possible with JavaScript: Finding collisions.</p>\n<p>When particles overlap, they are removed from the pool. Your goal is to find how many particles are left standing after \"long enough\".</p>\n<p>The question can once gain be translated into \"What's the steady state?\".</p>\n<p>But how do you find colliding particles?</p>\n<p>The simplest approach is to compare every particle with every particle. Surprisingly, that's good enough. Modern computers are <em>fast</em>.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Collision_detection\">Collision detection</a> is a huge field of algorithmics, by the way. It is definitely not supposed to be as easy as comparing every particle with every particle.</p>\n<pre lang=\"javascript\">\nfunction collision(particles) {\n    return particles.map((particle, idx) => {\n        const { p: [x, y, z] } = particle;\n\n        if (\n            particles.find(\n                ({ p }, i) => i !== idx && p[0] == x && p[1] == y && p[2] == z\n            )\n        ) {\n            particle.dead = true;\n        }\n        return particle;\n    });\n}\n</pre>\n<p>Returns a new copy of the <code>particles</code> array with every particle for which a particle exists in the same position marked as <code>dead</code>.</p>\n<p>To run the experiment, we then use a similar setup as before ðŸ‘‡</p>\n<pre lang=\"javascript\">\nfunction star2(input) {\n    let particles = prepInput(input);\n\n    let stable = {\n        length: particles.length,\n        iterations_unchanged: 0\n    };\n\n    while (stable.iterations_unchanged < 2000) {\n        particles = collision(tick(particles)).filter(({ dead }) => !dead);\n\n        if (stable.length === particles.length) {\n            stable.iterations_unchanged += 1;\n        } else {\n            stable.length = particles.length;\n            stable.iterations_unchanged = 0;\n        }\n    }\n\n    console.log(stable);\n}\n</pre>\n<p>Keep track of stable state and how long it's been stable for. Run the <code>tick</code> simulation, detection <code>collision</code>, and <code>filter</code> dead particles.</p>\n<p>After a few seconds, the result pops out.</p>\n<p>Paying <a href=\"https://swizec.com/blog/first-day-new-2017-macbook-pro/swizec/7643\">$3,000 for a laptop</a> was very worth it ðŸ‘Œ</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"9a32665d-e6b9-5d3c-8da7-258bb2b0279a"}}