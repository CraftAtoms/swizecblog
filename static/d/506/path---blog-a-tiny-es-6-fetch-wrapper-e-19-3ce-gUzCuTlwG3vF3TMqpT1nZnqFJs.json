{"data":{"wordpressPost":{"title":"A tiny ES6 fetch() wrapper that makes your life easier","content":"<p>After <a href=\"link\">yesterday&#39;s shenanigans</a> with ES6 fetch(), I made a tiny library called <a href=\"https://github.com/Swizec/better-fetch\">better-fetch</a> which makes your life easier. Or at least it makes <em>my</em> life easier.</p>\n<p>Without changing the API, better-fetch <strong>automatically includes cookies</strong>, which would have saved me a very frustrating amount of time yesterday, lets you <strong>add default headers</strong>, and you can <strong>pass request body as a plain JS object</strong>. None of that <code>FormData</code> nonsense.</p>\n<p><code>better-fetch</code> works the same as <code>fetch()</code>, but is less cumbersome to use.</p>\n<h2>In practice, better-fetch looks like this:</h2>\n<p>You install with npm. Or whatever you use to install packages from npmjs.org. Yarn maybe?</p>\n<pre><code>$ npm install --save better-fetch\n</code></pre>\n<p>Then you set up headers that every one of your <code>fetch()</code> calls needs. My backend requires an <code>Authorization</code> and an <code>Accept</code> header from all calls.</p>\n<pre lang=\"javascript\">\n// top of project\n// src/index.js\n\nimport fetch from 'better-fetch';\n\nfetch.setDefaultHeaders({\n    Authorization: `Token token=${GlobalTokenValue}`,\n    Accept: \"application/json.v2\"\n});\n\n// ^ this is optional and depends on your use-case ^\n</pre>\n<p>You can then use <code>better-fetch</code> anywhere in your code as you normally would with <code>fetch()</code>. The API feels the same and promises to work just like you&#39;d expect.</p>\n<pre lang=\"javascript\">\n// any file\nimport fetch from 'better-fetch';\n\nfetch('/api/some/thing')\n  .then(response => response.json())\n    .then(json => {\n        // do stuff\n    });\n</pre>\n<p>This code fetches JSON document with a <code>GET</code> request to the <code>/api/some/thing</code> URL. Any default headers are set in the request and cookies are sent as well.</p>\n<p>POST-ing is also made less cumbersome:</p>\n<pre lang=\"javascript\">\n// any file\nimport fetch from 'better-fetch';\n\nconst data = {\n    key: 'value',\n    key2: 'value2'\n};\n\nfetch('/api/save_response', {method: 'POST',\n                             body: data})\n          .then(response => response.json())\n          .then(json => {\n              console.log(json);\n          });\n</pre>\n<p>A dictionary <code>body</code> is automatically transformed into a <code>FormData</code> object, and strings and FormData objects are let through. This gives you flexibility to work with any API backend, but it still makes your life easier.</p>\n<p>Similarly, you can specify headers as either a <code>Headers</code> object or a dictionary â€“ better-fetch has you covered.</p>\n<p>Happy hacking ?</p>\n<p>PS: I know a bunch of <a href=\"https://www.npmjs.com/search?q=fetch\">fetch wrappers</a> exist already. They all make significant changes to the API, and I wanted to avoid that.</p>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"a9a422d5-722b-575f-951a-be9d7c862a7b"}}