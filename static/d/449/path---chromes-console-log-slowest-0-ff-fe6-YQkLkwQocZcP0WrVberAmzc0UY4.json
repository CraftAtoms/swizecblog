{"data":{"wordpressPost":{"title":"Chrome&#8217;s console.log is the slowest","content":"<p>JavaScript is great. You can slice &amp; dice huge datasets on the fly, and play with them, and explore them, and turn them into pictures. All live in the browser.</p>\n<p>Not “big data” huge, more like <em>&#8220;Holy shit 5 years ago this would crash my browser&#8221;</em> huge. Like, you&#8217;re playing with a dataset on 177,830 salaries<sup><a href=\"#fn1-30036\" id=\"fnr1-30036\" title=\"see footnote\" class=\"footnote\">1</a></sup> in the US software industry, and your computer doesn&#8217;t even notice until you do something stupid.</p>\n<p>Something like debug your code, reload a bunch of times, and maybe <code>console.log</code> the whole dataset to make sure it parsed.</p>\n<figure>\n<img src=\"http://i.imgur.com/JBjnr5J.gif\" alt=\"\" /><br />\n</figure>\n<p>That’s, what…? Like, 10 seconds of high CPU load for one <code>console.log</code>? Something like that. The more you do it, the longer it takes. </p>\n<p>Here&#8217;s what reading that output looks like:</p>\n<figure>\n<img src=\"http://i.imgur.com/SAsTfdq.gif\" alt=\"\" /><br />\n</figure>\n<p>As long as that CPU load is high, you can&#8217;t do much. After a few tries, even your reload button stops working and you have to forcefully crash the browser tab to get back to work.</p>\n<p>It’s so annoying because everything else is so damn fast! Want to <code>.map</code> your dataset? No biggie, 10ms max. Want to <code>.filter</code>? 10ms. Want to filter and map and flush React updates to DOM and do all the things? You won&#8217;t even notice it does anything.</p>\n<p>But debugging your code… eesh. Can&#8217;t console.log very well, React dev tools are glacial, and god forbid you try to inspect element if there are thousands of DOM nodes on the page.</p>\n<p>Not to mention the initial page setup. Loading and parsing the dataset (CSV) from cache takes about 3 seconds, running the initial <code>setState</code> takes about a second. That&#8217;s up to 5 seconds between every full page reload and seeing output.</p>\n<p>5 seconds might not sound like a lot, but it adds up. I don&#8217;t know about you, but I run my code at least once every minute. That&#8217;s 5 minutes of waiting every hour, 40 minutes in a work day, and 3 working hours in a week.</p>\n<figure>\n<img src=\"https://i.imgflip.com/1beeaq.jpg\" alt=\"\" /><br />\n</figure>\n<p><em>&#8220;Don&#8217;t console.log your whole dataset then.&#8221;</em></p>\n<p>Thank you, Captain Obvious. <code>console.log(data[0])</code> is your best friend in these situations.</p>\n<p>And yet, you can do a lot by changing your browser.</p>\n<p>Safari makes logs useful right away. It even shows property types. That was a nice surprise.</p>\n<figure>\n<img src=\"http://i.imgur.com/YRMRqhY.gif\" alt=\"\" /><br />\n</figure>\n<p>Firefox makes the output easy to work with, too. But it struggles if you quickly traverse into a deep part of the output.</p>\n<figure>\n<img src=\"http://i.imgur.com/BSlHWdA.gif\" alt=\"\" /><br />\n</figure>\n<p>As far as presentation quality goes: Safari is shiniest, Firefox is practicalest, and Chrome is spartaniest.</p>\n<p>Oh, and Firefox wins the overall <em>&#8220;How long do I have to wait before I can test my code?&#8221;</em> challenge as well<sup><a href=\"#fn2-30036\" id=\"fnr2-30036\" title=\"see footnote\" class=\"footnote\">2</a></sup>. You can shave a few milliseconds off the initial <code>setState({data: foo})</code> call. </p>\n<figure>\n<img src=\"http://i.imgur.com/o1xFBb0.png\" alt=\"\" /><br />\n</figure>\n<p>Fascinating. I&#8217;m a total nerd ? ?</p>\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn1-30036\">\n<p>Playing with the dataset is in progress; pretty pictures in a week or two. <a href=\"#fnr1-30036\" title=\"return to article\" class=\"reversefootnote\">&#8617;&#xFE0E;</a></p>\n</li>\n<li id=\"fn2-30036\">\n<p>Tests were run manually in each browser. The graph shows average time for each operation. <a href=\"#fnr2-30036\" title=\"return to article\" class=\"reversefootnote\">&#8617;&#xFE0E;</a></p>\n</li>\n</ol>\n</div>\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"80c28988-b513-52b3-86fe-2fe1f7dd3cbc"}}