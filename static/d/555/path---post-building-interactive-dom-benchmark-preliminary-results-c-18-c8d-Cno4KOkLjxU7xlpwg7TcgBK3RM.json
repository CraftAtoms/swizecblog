{"data":{"wordpressPost":{"title":"Building an interactive DOM benchmark, preliminary results","content":"<p><em>This is a Livecoding Recap â€“ an almost-weekly post about interesting things discovered while livecoding. Usually shorter than 500 words. Often with pictures. Livecoding happens almost <strong>every Sunday at 2pm PDT</strong> on multiple channels. You should subscribe to <a href=\"https://www.youtube.com/TheSwizec\">My Youtube</a> channel to catch me live.</em></p>\n<p><iframe width=\"580\" height=\"326\" src=\"https://www.youtube.com/embed/Ukm3mRWZtCk?feature=oembed\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe></p>\n<p>After that <a href=\"https://swizec.com/blog/build-list-virtualization/swizec/8167\">chatroom windowing feature</a> I built a few weeks ago, I&#8217;ve been thinking a lot about how fast native DOM manipulation has gotten.</p>\n<p>I&#8217;ve been listening to the <a href=\"https://www.google.com/search?q=dom+is+slow&amp;oq=dom+is+slow&amp;aqs=chrome..69i57j0l5.1249j0j1&amp;sourceid=chrome&amp;ie=UTF-8\"><em>&#8220;DOM is slow&#8221;</em></a> mantra my whole life. But with that feature, I discovered that the DOM is pretty fast, actually.</p>\n<p>Did you know it&#8217;s faster and easier to throw out your DOM nodes and render from scratch? That surprised me.</p>\n<p>So I started working on <a href=\"https://dom-benchmark.now.sh/\">this DOM manipulation benchmark</a>. My goal is to give you a live benchmark that you can play with. A way to <em>feel</em> how fast or slow different approaches are.</p>\n<p>It&#8217;s not complete yet. You can already test React using local state, a naive vanilla JS implementation, and a smart vanilla JS implementation. I&#8217;m adding Vue, Preact, Angular, and maybe some others.</p>\n<p>The test focuses on long flat lists. Those are the most common source of having thousands of nodes. Think chatrooms, news feeds, comments, data viz. All long flat lists of nodes.</p>\n<p>We&#8217;re testing how fast it is to</p>\n<ol>\n<li>Prepend 1000 nodes</li>\n<li>Insert 1000 nodes in the middle</li>\n<li>Append 1000 nodes</li>\n<li>Drop all nodes</li>\n<li>Remove 1 random node </li>\n</ol>\n<h2>React using local state</h2>\n<img class=\"alignnone size-full wp-image-8218\" src=\"https://swizec.com/blog/wp-content/uploads/2018/02/react-dom.gif\" width=\"772\" height=\"495\" />\n<p>React is fast. Between <code>15ms</code> and <code>21ms</code> on average to prepend, insert, and append 1000 nodes. Removing 30,000 nodes is slower because it has to change a lot of individual nodes.</p>\n<p>The benchmark benefits from nodes being stable. That means a node with the same <code>key</code> never changes. You can see <a href=\"https://github.com/Swizec/dom-benchmark/blob/master/src/benchmarks/ReactBenchmark.js\">the code on GitHub</a>.</p>\n<p>We manipulate a list in <code>this.state</code> and measure times between <code>componentWillUpdate</code> and <code>componentDidUpdate</code>. This should exclude the time it takes to manipulate our list.</p>\n<p>What surprised me is the stark difference between dev-mode React and production-built React. React in dev mode is not only slow, but also gets increasingly slower the more nodes you&#8217;re rendering. In production mode performance is constant.</p>\n<p>Neat. ðŸ‘Œ</p>\n<h2>Naive vanilla JS</h2>\n<img class=\"alignnone size-full wp-image-8216\" src=\"https://swizec.com/blog/wp-content/uploads/2018/02/naive-js-dom.gif\" width=\"772\" height=\"495\" />\n<p>The naive approach is slow. Faster than you&#8217;d expect, good for small lists, but not a scalable solution. The more nodes you render, the slower it gets.</p>\n<p>The core of this benchmark is the render code. Drops all nodes and renders from scratch every time.</p>\n<pre lang=\"javascript\">\n    naiveRender() {\n        let start = new Date();\n        // remove all existing nodes\n        // from https://stackoverflow.com/questions/3955229/remove-all-child-elements-of-a-dom-node-in-javascript\n        let scratchpad = this.refs.scratchpad;\n\n        while (scratchpad.firstChild) {\n            scratchpad.removeChild(scratchpad.firstChild);\n        }\n\n        // append all nodes from scratch\n        this.nodes.forEach(k => {\n            let node = document.createElement(\"div\");\n            node.appendChild(document.createTextNode(k));\n            scratchpad.appendChild(node);\n        });\n\n        let end = new Date();\n        this.times.push(end - start);\n\n        // update meta info\n        this.refs.time.innerHTML = `<code>${end - start}ms</code>`;\n        this.refs.currentCount.innerHTML = this.nodes.length;\n        this.refs.avgTime.innerHTML = this.averageTime;\n    }\n</pre>\n<p>You can see the <a href=\"https://github.com/Swizec/dom-benchmark/blob/master/src/benchmarks/VanillaBenchmark.js\">full benchmark on GitHub</a>.</p>\n<p>This renders 1000 nodes in about <code>4ms</code>, which is faster than React. But 4000 takes <code>32ms</code>. Almost three times as much as React.</p>\n<p>Curiously similar performance curve to dev-mode React. ðŸ¤”</p>\n<h2>Smart vanilla JS</h2>\n<img class=\"alignnone size-full wp-image-8217\" src=\"https://swizec.com/blog/wp-content/uploads/2018/02/smart-js-dom.gif\" width=\"772\" height=\"495\" />\n<p>A slightly smart vanilla JS approach is <em>blazing fast</em>. Constant performance around <code>2ms</code>. Wat ðŸ¤¨</p>\n<p>I used the new <code>prepend()</code> and <code>append()</code> DOM methods. Nothing super clever, just a basic implementation of what we&#8217;re testing.</p>\n<p>You can see the whole <a href=\"https://github.com/Swizec/dom-benchmark/blob/master/src/benchmarks/SmartVanillaBenchmark.js\">benchmark on GitHub</a>, but here&#8217;s the <code>prepend</code> code for example.</p>\n<pre lang=\"javascript\">\n    prepend = () => {\n        let nodes = this.newNodes,\n            scratchpad = this.refs.scratchpad;\n        this.nodes = [...nodes, ...this.nodes];\n\n        let start = new Date();\n\n        nodes.map(k => {\n            let node = document.createElement(\"div\");\n            node.appendChild(document.createTextNode(k));\n            return node;\n        });\n        scratchpad.prepend(nodes);\n\n        this.updateMeta(start);\n    };\n</pre>\n<p>We&#8217;re still manipulating the <code>this.nodes</code> array. Keeps &#8220;data&#8221; and DOM in sync, stays consistent to the other implementations.</p>\n<p>Then we walk through the list of new nodes, create <code>div</code> elements for each of them, attach some text, and finally <code>prepend()</code> the whole array of nodes into the DOM. This, it turns out, is fast. ðŸ”¥</p>\n<p>1000 nodes in <code>1ms</code> to <code>2ms</code>. A tenth of the time it takes React to do it. Similar results for inserting and appending:</p>\n<ul>\n<li>appends in about <code>2ms</code></li>\n<li>inserts in about <code>5ms</code></li>\n</ul>\n<p>Inserting is slowest because there&#8217;s no magic method for it. You have to <code>insertBefore</code> each DOM node individually. The browser then has to shove the entire list around to make room.</p>\n<p>Even dropping all nodes is crazy fast despite dropping 1-by-1 ðŸ‘‰ around <code>2ms</code> for 40,000 nodes. Wow.</p>\n<h2>Conclusion</h2>\n<p>In conclusion, vanilla JavaScript is fast if you know what you&#8217;re doing. Faster probably than anything else I can add to this benchmark.</p>\n<p><strong>But</strong> it&#8217;s not as powerful as React or a similar framework. It takes more time to build, it&#8217;s hyper optimized for this example, and it wouldn&#8217;t scale in a real world environment.</p>\n<p>Code is hard to maintain. You waste time thinking about rendering instead of what you&#8217;re building, and you will cry as soon as nodes stop being stable. Just imagine figuring out by hand which nodes&#8217; contents changed and which didn&#8217;t.</p>\n<p>That&#8217;s what React is doing for you ðŸ‘‰ Spending a little runtime to save a lot of dev time.</p>\n<p>Can&#8217;t wait to add Vue and Preact to the mix.</p>\n<img src=\"https://media.giphy.com/media/l2JehIXdp8F7Up5sc/giphy.gif\" />\n"},"site":{"siteMetadata":{"title":"Swizec Blog","subtitle":"Fetch Data From Local WP Install"}}},"pageContext":{"id":"cf006b4b-ec77-5627-a4f4-a5f24583df9c"}}